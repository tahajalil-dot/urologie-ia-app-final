# app.py ‚Äî Urology Assistant AI (Accueil + Vessie TVNIM/TVIM/M√©tastatique + HBP)
# Version: 2025-09-02
# Notes:
# - Ce prototype vise √† structurer la d√©cision clinique (AFU/EAU 2024‚Äì2026 √† v√©rifier localement).
# - Le module HBP a √©t√© modifi√© pour: (1) ne PAS proposer de m√©dical si indication chirurgicale stricte
#   (√©chec m√©dical OU complications OU lobe m√©dian) ; (2) pr√©senter toutes les options en "Option 1, 2, ...".

import base64
from datetime import datetime
from pathlib import Path
import html as ihtml
import io
import streamlit as st

# =========================
# CONFIG + THEME CLAIR (VERT)
# =========================
st.set_page_config(page_title="Urology Assistant AI", layout="wide")

st.markdown(
    """
<style>
:root, html, body, .stApp, .block-container { background:#ffffff !important; color:#111 !important; }
[data-testid="stHeader"], header { background:#ffffff !important; }

/* Titres & liens */
h1,h2,h3,h4,h5,h6 { color:#0B5D3B !important; }
a, a:visited { color:#0B5D3B !important; }

/* Texte markdown par d√©faut */
[data-testid="stMarkdownContainer"] p,
[data-testid="stMarkdownContainer"] li,
[data-testid="stMarkdownContainer"] span,
[data-testid="stMarkdownContainer"] div { color:#111 !important; }

/* Boutons */
.stButton > button {
  background:#0B5D3B !important; color:#fff !important; border-radius:10px; padding:0.6rem 1rem; border:none;
}
.stButton > button:hover { background:#0E744C !important; }

/* Inputs */
div[data-baseweb="select"] > div,
.stTextInput input, .stTextArea textarea, .stNumberInput input {
  background:#fff !important; color:#111 !important; border:1px solid #e4efe8 !important;
}

/* En-t√™te (gradient vert tr√®s clair) */
.header-green {
  padding:18px 22px; background:linear-gradient(90deg,#F6FBF7,#EAF6EE);
  border:1px solid #d8eadf; border-radius:12px; margin-bottom:18px;
}

/* Barre d√©corative sous les cat√©gories */
.cat-bar { height:6px; background:#DFF3E6; border-radius:6px; margin-bottom:12px; }

/* Tableaux (HTML) pour Donn√©es & Stratification */
.kv-table { width:100%; border-collapse:separate; border-spacing:0; }
.kv-table thead th {
  background:#ECF7F0; color:#0B5D3B; font-weight:700; text-align:left;
  border-bottom:1px solid #dfece5; padding:10px 12px;
}
.kv-table tbody td {
  background:#ffffff; color:#111; padding:10px 12px; border-bottom:1px solid #f0f5f2;
}
.kv-table tbody tr:last-child td { border-bottom:none; }
.kv-table td:first-child { width:38%; }
.kv-table td strong { color:#0B5D3B; }
.section-block { margin-top: 0.6rem; margin-bottom: 1.2rem; }
</style>
""",
    unsafe_allow_html=True,
)

APP_TITLE = "Urology Assistant AI"
APP_SUBTITLE = "Assistant intelligent pour la d√©cision clinique ‚Äî *d√©mo, ne remplace pas les RBP officielles*"

MODULES = [
    "Tumeur de la vessie",
    "Tumeurs des voies excr√©trices",
    "Tumeur de la prostate",
    "Tumeur du rein",
    "Hypertrophie b√©nigne de la prostate (HBP)",
    "Lithiase",
    "Infectiologie",
]
PALETTE = {m: "#DFF3E6" for m in MODULES}

if "page" not in st.session_state:
    st.session_state["page"] = "Accueil"

# =========================
# HELPERS UI
# =========================

def go_home():
    st.session_state["page"] = "Accueil"
    st.rerun()


def go_module(label: str):
    st.session_state["page"] = label
    st.rerun()


def category_button(label: str, color: str, key: str):
    with st.container():
        clicked = st.button(f"{label}  ‚Ä∫", key=key, use_container_width=True)
        st.markdown(f"<div class='cat-bar' style='background:{color}'></div>", unsafe_allow_html=True)
        if clicked:
            go_module(label)


def top_header():
    st.markdown(
        f"<div class='header-green'><h1 style='margin:0;font-weight:800;font-size:28px'>{APP_TITLE}</h1></div>",
        unsafe_allow_html=True,
    )


def btn_home_and_back(show_back: bool = False, back_label: str = "Tumeur de la vessie"):
    cols = st.columns([1, 3])
    with cols[0]:
        st.button("üè† Accueil", on_click=go_home)
    if show_back:
        with cols[1]:
            st.button(f"‚¨ÖÔ∏è Retour : {back_label}", on_click=lambda: go_module(back_label))


# ===== Tableaux (HTML 2 colonnes) ‚Äî pour Donn√©es & Stratification =====

def esc(x: str) -> str:
    return ihtml.escape(str(x))


def render_kv_table(title, pairs, col1="√âl√©ment", col2="D√©tail"):
    if not pairs:
        return
    st.markdown(f"### {esc(title)}")
    html = [
        f"<div class='section-block'><table class='kv-table'><thead><tr><th>{esc(col1)}</th><th>{esc(col2)}</th></tr></thead><tbody>",
    ]
    for k, v in pairs:
        html.append(f"<tr><td><strong>{esc(k)}</strong></td><td>{esc(v)}</td></tr>")
    html.append("</tbody></table></div>")
    st.markdown("".join(html), unsafe_allow_html=True)


# ===== Export helpers (download_button) =====

def build_report_text(title: str, sections: dict) -> str:
    lines = []
    lines.append(f"Urology Assistant AI ‚Äî {title} (AFU/EAU 2024‚Äì2026 ‚Äî √† v√©rifier)")
    lines.append(f"G√©n√©r√© le : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    lines.append("")
    for sec, arr in sections.items():
        if not arr:
            continue
        lines.append(f"== {sec} ==")
        for x in arr:
            lines.append(f"‚Ä¢ {x}")
        lines.append("")
    lines.append("R√©fs : AFU/EAU ‚Äî synth√®se PROVISOIRE pour prototypage.")
    return "\n".join(lines)


def offer_exports(report_text: str, basename: str):
    bio = io.BytesIO(report_text.encode("utf-8"))
    st.download_button("üìù T√©l√©charger le rapport .txt", data=bio, file_name=f"{basename}.txt")

    html = f"""<!doctype html><html lang='fr'><meta charset='utf-8'><title>{basename}</title><pre>{ihtml.escape(report_text)}</pre></html>"""
    st.download_button(
        "üìÑ T√©l√©charger le rapport .html",
        data=html.encode("utf-8"),
        file_name=f"{basename}.html",
        mime="text/html",
    )


# =========================
# LOGIQUE CLINIQUE ‚Äî HBP 
# =========================
from typing import Optional, Any, List, Tuple, Dict, Union

# -- helper bool robuste (g√®re Oui/Non, true/false, 1/0, etc.)
def _to_bool(x: Any) -> bool:
    if isinstance(x, bool): return x
    if isinstance(x, (int, float)): return x != 0
    if isinstance(x, str): return x.strip().lower() in {"1","true","vrai","oui","y","yes"}
    return bool(x)

def classer_ipss(ipss: int) -> str:
    if ipss <= 7: return "l√©gers"
    if ipss <= 19: return "mod√©r√©s"
    return "s√©v√®res"

# =========================
# TRIAGE ADK (TR + PSAD si PSA ‚â• 4)
# =========================
def eval_suspicion_adk(psa_total: float, volume_ml: int, tr_suspect: Union[bool,str,int,float]) -> Tuple[bool, List[str], Optional[float]]:
    """
    - TR suspect ‚Üí ADK (IRM multiparam√©trique + biopsies)
    - PSA ‚â• 4 ‚Üí PSAD = PSA/volume ; si PSAD > 0,15 ‚Üí ADK ; sinon HBP
    - PSA < 4 ‚Üí HBP
    - Si PSA ‚â• 4 mais volume inconnu/0 ‚Üí mesurer le volume (TRUS/IRM) pour calculer PSAD
    """
    exp: List[str] = []
    psad: Optional[float] = None
    if _to_bool(tr_suspect):
        exp.append("TR suspect ‚Üí orientation ADK (IRM multiparam√©trique puis biopsies).")
        return True, exp, psad

    if psa_total >= 4.0:
        if volume_ml and volume_ml > 0:
            psad = psa_total / float(volume_ml)
            exp.append(f"Densit√© PSA (PSAD) = {psad:.2f}.")
            if psad > 0.15:
                exp.append("PSAD > 0,15 ‚Üí crit√®re suspect ‚Üí IRM + biopsies (orientation ADK).")
                return True, exp, psad
            else:
                exp.append("PSAD ‚â§ 0,15 ‚Üí non suspect imm√©diat ‚Üí poursuite de la CAT HBP.")
        else:
            exp.append("PSA ‚â• 4 mais volume inconnu/0 ‚Üí mesurer le volume (TRUS/IRM) pour calculer la PSAD.")
    else:
        exp.append("PSA < 4 ‚Üí profil HBP (pas d‚Äôorientation ADK imm√©diate).")
    return False, exp, psad

# =========================
# Coeur logique : NOUVELLE signature (sans lobe_median / preservation_ejac)
# =========================
def _plan_hbp_core(
    age: int,
    volume_ml: int,
    ipss: int,
    psa_total: float,
    tr_suspect: Union[bool,str,int,float],
    anticoag: Union[bool,str,int,float],
    ci_chirurgie: Union[bool,str,int,float],
    refus_chir: Union[bool,str,int,float],
    infections_recid: Union[bool,str,int,float],
    retention: Union[bool,str,int,float],
    calculs: Union[bool,str,int,float],
    hematurie_recid: Union[bool,str,int,float],
    ir_post_obstacle: Union[bool,str,int,float],
    echec_medical: Union[bool,str,int,float],
    *,
    stockage_predominant: Union[bool,str,int,float] = False,
    rpm_ml: Optional[int] = None,
    dysfonction_erectile: Union[bool,str,int,float] = False,
) -> Dict[str, Any]:
    # normalisation
    tr_suspect        = _to_bool(tr_suspect)
    anticoag          = _to_bool(anticoag)
    ci_chirurgie      = _to_bool(ci_chirurgie)
    refus_chir        = _to_bool(refus_chir)
    infections_recid  = _to_bool(infections_recid)
    retention         = _to_bool(retention)
    calculs           = _to_bool(calculs)
    hematurie_recid   = _to_bool(hematurie_recid)
    ir_post_obstacle  = _to_bool(ir_post_obstacle)
    echec_medical     = _to_bool(echec_medical)
    stockage_predominant = _to_bool(stockage_predominant)
    dysfonction_erectile = _to_bool(dysfonction_erectile)

    # Donn√©es
    donnees: List[Tuple[str,str]] = [
        ("√Çge", f"{age} ans"),
        ("Volume prostatique", f"{volume_ml} mL"),
        ("IPSS", f"{ipss} ({classer_ipss(ipss)})"),
        ("PSA total", f"{psa_total:.2f} ng/mL"),
        ("TR suspect", "Oui" if tr_suspect else "Non"),
        ("Anticoagulants/antiagr√©gants", "Oui" if anticoag else "Non"),
        (
            "Complications",
            ", ".join([txt for ok, txt in [
                (infections_recid, "IU r√©cidivantes"),
                (retention, "R√©tention compliqu√©e/sevrage impossible"),
                (calculs, "Calcul v√©sical"),
                (hematurie_recid, "H√©maturie r√©cidivante li√©e √† l‚ÄôHBP"),
                (ir_post_obstacle, "IR obstructive li√©e √† l‚Äôobstacle"),
            ] if ok]) or "Aucune"
        ),
        ("√âchec du traitement m√©dical", "Oui" if echec_medical else "Non"),
        ("LUTS de remplissage pr√©dominants", "Oui" if stockage_predominant else "Non"),
    ]
    if rpm_ml is not None:
        donnees.append(("R√©sidu post-mictionnel (RPM)", f"{rpm_ml} mL"))

    # (0) TRIAGE ADK
    suspect_adk, exp_adk, psad = eval_suspicion_adk(psa_total, volume_ml, tr_suspect)
    if psad is not None:
        donnees.append(("Densit√© PSA (PSAD)", f"{psad:.2f}"))
    if suspect_adk:
        traitement = [
            "Option : IRM prostatique multiparam√©trique, Biopsies prostatiques cibl√©es ¬± syst√©matiques selon IRM.",
        ]
        return {"donnees": donnees, "traitement": traitement, "notes": exp_adk}

    # (1) Indication chirurgicale stricte
    complications_presentes = any([infections_recid, retention, calculs, hematurie_recid, ir_post_obstacle])
    indication_chir_stricte = echec_medical or complications_presentes

    options: List[str] = []
    n = 1

    # (2) Pas d'indication chirurgicale stricte ‚Üí m√©dical d'abord
    if not indication_chir_stricte:
        if ipss <= 7:
            # STRICTEMENT 2 options
            options.append(
                f"Option {n} : abstention-surveillance ‚Äî informer du faible risque √©volutif + conseils hygi√©no-di√©t√©tiques "
                "(r√©duire apports hydriques apr√®s 18h, diminuer caf√©ine/alcool, traiter la constipation)."
            ); n += 1
            options.append(
                f"Option {n} : traitement m√©dical ‚Äî Œ±-bloquant (monoth√©rapie). "
                "Action rapide, am√©liore SBAU et d√©bit."
            ); n += 1
        else:
            options.append(
                f"Option {n} : Œ±-bloquant en premi√®re intention puis r√©√©valuation clinique/IPSS pour v√©rifier am√©lioration ou √©chec sous traitement."
            ); n += 1
            if volume_ml > 40:
                options.append(
                    f"Option {n} : inhibiteur de la 5Œ±-r√©ductase L , ‚Üìrisque de RAU car il diminue le volume prostatique; PSA mesur√© ‚âà 50 % du r√©el, efficacit√© sur plus de 3 mois )."
                ); n += 1
                options.append(
                    f"Option {n} : association Œ±-bloquant + I5AR si monoth√©rapie insuffisante ."
                ); n += 1
            if stockage_predominant and (rpm_ml is not None and rpm_ml < 150):
                options.append(
                    f"Option {n} : anticholinergique si SBAU de remplissage pr√©dominants ET RPM < 150 mL "
                    "(plut√¥t en ajout si persistance sous Œ±-bloquant)."
                ); n += 1
            options.append(
                f"Option {n} : alternative ‚Äî phytoth√©rapie (Serenoa repens / Pygeum africanum) ."
            ); n += 1
          

    # (3) Indication chirurgicale stricte ‚Üí chirurgie si possible, sinon alternatives/palliatif
    if indication_chir_stricte and not ci_chirurgie and not refus_chir:
        if 30 <= volume_ml <= 70:
            options.append(f"Option {n} : RTUP (mono/bipolaire) ou vaporisation endoscopique (laser/bipolaire) pour 30‚Äì70 mL."); n += 1
        if volume_ml >= 70:
            options.append(f"Option {n} : √©nucl√©ation endoscopique (HoLEP/ThuLEP/BipolEP) pour ‚â• 70‚Äì100+ mL."); n += 1
        if volume_ml > 100:
            options.append(f"Option {n} : ad√©nomectomie sus-pubienne (ouverte/robot) si tr√®s gros volumes ou si √©nucl√©ation indisponible."); n += 1
        if anticoag or (30 <= volume_ml <= 70):
            options.append(f"Option {n} : vaporisation laser (GreenLight) en cas de risque h√©morragique/anticoagulants."); n += 1
        if volume_ml <= 40:
            options.append(f"Option {n} : incision cervico-prostatique si petit volume (‚â§ 30‚Äì40 mL)."); n += 1
    elif indication_chir_stricte and (ci_chirurgie or refus_chir):
        if volume_ml > 80:
            options.append(f"Option {n} : alternative ‚Äî embolisation des art√®res prostatiques (diminution du volume) selon contexte."); n += 1
        options.append(f"Option {n} : palliatif ‚Äî autosondages intermittents, ou sonde v√©sicale/cath√©ter sus-pubien √† demeure."); n += 1

    notes: List[str] = [
        "R√©√©valuation apr√®s Œ±-bloquant : une semaine (clinique, IPSS, tol√©rance).",
        "Avant toute chirurgie : r√©aliser un ECBU ; information et consentement indispensables.",
        "Complications chirurgicales : perop (saignement; TUR syndrome en monopolaire), pr√©coces (RAU, h√©maturie/caillots, infection, TVP/EP, irritatifs), tardives (st√©nose ur√®tre, scl√©rose du col).",
        "RTUP bipolaire/lasers : s√©rum physiologique (pas de glycocolle). RTUP monopolaire : glycocolle (risque de TUR syndrome).",
    ]
    return {"donnees": donnees, "traitement": options, "notes": notes}

# =========================
# ADAPTATEUR : accepte ANCIEN appel (avec lobe_median, preservation_ejac) et NOUVEL appel
# =========================
def plan_hbp(*args, **kwargs) -> Dict[str, Any]:
    """
    Adapte les appels positionnels:
      Ancienne signature (‚â•16 args positionnels):
        age, volume_ml, lobe_median, ipss, psa_total, tr_suspect, anticoag,
        preservation_ejac, ci_chirurgie, refus_chir, infections_recid, retention,
        calculs, hematurie_recid, ir_post_obstacle, echec_medical, [optionnels...]
      Nouvelle signature (‚â•14 args positionnels, sans lobe_median/preservation_ejac):
        age, volume_ml, ipss, psa_total, tr_suspect, anticoag, ci_chirurgie, refus_chir,
        infections_recid, retention, calculs, hematurie_recid, ir_post_obstacle, echec_medical, [optionnels...]
      Ou bien en mots-cl√©s (kwargs) avec la nouvelle signature.
    """
    # 1) Appel 100% kwargs (nouvelle signature)
    if not args:
        return _plan_hbp_core(**kwargs)

    # 2) Ancienne signature positionnelle (avec lobe_median & preservation_ejac)
    if len(args) >= 16:
        age              = args[0]
        volume_ml        = args[1]
        # args[2] = lobe_median (ignor√©)
        ipss             = args[3]
        psa_total        = args[4]
        tr_suspect       = args[5]
        anticoag         = args[6]
        # args[7] = preservation_ejac (ignor√©)
        ci_chirurgie     = args[8]
        refus_chir       = args[9]
        infections_recid = args[10]
        retention        = args[11]
        calculs          = args[12]
        hematurie_recid  = args[13]
        ir_post_obstacle = args[14]
        echec_medical    = args[15]
        # optionnels positionnels suivants
        opt = list(args[16:])
        # extraction optionnels s'ils sont l√† en position: stockage_predominant, rpm_ml, dysfonction_erectile
        stockage_predominant = opt[0] if len(opt) >= 1 else kwargs.pop("stockage_predominant", False)
        rpm_ml                = opt[1] if len(opt) >= 2 else kwargs.pop("rpm_ml", None)
        dysfonction_erectile  = opt[2] if len(opt) >= 3 else kwargs.pop("dysfonction_erectile", False)
        return _plan_hbp_core(
            age, volume_ml, ipss, psa_total, tr_suspect, anticoag, ci_chirurgie, refus_chir,
            infections_recid, retention, calculs, hematurie_recid, ir_post_obstacle, echec_medical,
            stockage_predominant=_to_bool(stockage_predominant),
            rpm_ml=rpm_ml,
            dysfonction_erectile=_to_bool(dysfonction_erectile),
            **kwargs
        )

    # 3) Nouvelle signature positionnelle (sans lobe_median/preservation_ejac)
    if len(args) >= 14:
        age              = args[0]
        volume_ml        = args[1]
        ipss             = args[2]
        psa_total        = args[3]
        tr_suspect       = args[4]
        anticoag         = args[5]
        ci_chirurgie     = args[6]
        refus_chir       = args[7]
        infections_recid = args[8]
        retention        = args[9]
        calculs          = args[10]
        hematurie_recid  = args[11]
        ir_post_obstacle = args[12]
        echec_medical    = args[13]
        # optionnels positionnels suivants (si pr√©sents)
        opt = list(args[14:])
        stockage_predominant = opt[0] if len(opt) >= 1 else kwargs.pop("stockage_predominant", False)
        rpm_ml                = opt[1] if len(opt) >= 2 else kwargs.pop("rpm_ml", None)
        dysfonction_erectile  = opt[2] if len(opt) >= 3 else kwargs.pop("dysfonction_erectile", False)
        return _plan_hbp_core(
            age, volume_ml, ipss, psa_total, tr_suspect, anticoag, ci_chirurgie, refus_chir,
            infections_recid, retention, calculs, hematurie_recid, ir_post_obstacle, echec_medical,
            stockage_predominant=_to_bool(stockage_predominant),
            rpm_ml=rpm_ml,
            dysfonction_erectile=_to_bool(dysfonction_erectile),
            **kwargs
        )

    # 4) Sinon, on tente de compl√©ter depuis kwargs (mots-cl√©s)
    return _plan_hbp_core(**kwargs)

# =========================
# LOGIQUE CLINIQUE ‚Äî PROSTATE (Localis√© / R√©cidive / M√©tastatique)
# =========================

# --- 1) Strate de risque (D'Amico adapt√© AFU) ---
def prostate_risk_damico(psa: float, isup: int, cT: str) -> str:
    """
    Retourne 'faible', 'interm√©diaire', '√©lev√©'.
    D'Amico (adapt√© AFU localis√©) : 
      - FAIBLE   : T1‚ÄìT2a ET PSA < 10 ET ISUP 1
      - INTER    : PSA 10‚Äì20 OU ISUP 2‚Äì3 OU T2b‚ÄìT2c (sans crit√®re '√©lev√©')
      - √âLEV√â    : PSA > 20 OU ISUP 4‚Äì5 OU ‚â• T3
    # IBJSR6-main.pdf ‚Äî AFU localis√© : les parties 'prise en charge de la maladie localis√©e' cadrent ces approches (ex. F418 L31-L35 pour PT comme traitement de r√©f√©rence).
    """
    t_high = cT.startswith("T3") or cT.startswith("T4")
    t_inter = cT in ["T2b", "T2c"]
    if (psa > 20) or (isup >= 4) or t_high:
        return "√©lev√©"
    if (10 <= psa <= 20) or (isup in [2, 3]) or t_inter:
        return "interm√©diaire"
    if (psa < 10) and (isup == 1) and (cT in ["T1", "T2a"]):
        return "faible"
    # Par d√©faut, classer interm√©diaire si ambigu
    return "interm√©diaire"


# --- 2) CAT ‚Äî Prostate localis√©e (options + degr√©) ---
def plan_prostate_localise(psa: float, isup: int, cT: str, esperance_vie_ans: int):
    """
    Retourne dict {donnees, risque, options, notes}
    Chaque option = {label, degre ('fort'/'moyen'/'faible'), details}
    R√©f√©rences (commentaires) :
      - PT = traitement de r√©f√©rence dans le localis√© (IBJSR6 F418 L31-L35).
      - Surveillance active pour bas-risque (AFU localis√©, section d√©di√©e ‚Äòsurveillance active‚Äô).
      - RT externe/curieth√©rapie selon risque; HT courte avec RT si interm√©diaire d√©favorable (AFU localis√©).
    """
    risque = prostate_risk_damico(psa, isup, cT)
    options = []
    idx = 1

    if risque == "faible":
        # Surveillance active ‚Äî fort (standard bas-risque)
        options.append({
            "label": f"Option {idx} : Surveillance active",
            "degre": "fort",
            "details": "Bas-risque (T1‚ÄìT2a, PSA<10, ISUP1). √âviter sur-traitement ; suivi structur√© (PSA/IRM/cysto-biopsies selon protocole local)."
            # AFU localis√© : SA recommand√©e pour bas-risque.
        }); idx += 1

        # Prostatectomie totale ‚Äî fort si esp√©rance de vie > 10 ans
        deg = "fort" if esperance_vie_ans >= 10 else "moyen"
        options.append({
            "label": f"Option {idx} : Prostatectomie totale (PT)",
            "degre": deg,
            "details": "Traitement de r√©f√©rence chirurgical ; b√©n√©fice attendu si esp√©rance de vie ‚â•10 ans."
            # IBJSR6 F418 L31-L35 : PT = un des traitements de r√©f√©rence du CaP localis√©.
        }); idx += 1

        # Radioth√©rapie externe / curieth√©rapie ‚Äî moyen
        options.append({
            "label": f"Option {idx} : Radioth√©rapie (RCMI/curieth√©rapie)",
            "degre": "moyen",
            "details": "Alternative non invasive ; SA pr√©f√©r√©e si bas-risque pur ; pas d‚ÄôHT associ√©e en bas-risque."
            # AFU localis√© : RT standard dans localis√© ; HT pas indiqu√©e en bas-risque.
        }); idx += 1

    elif risque == "interm√©diaire":
        # RT +/‚àí hormonoth√©rapie courte ‚Äî fort si 'interm√©diaire d√©favorable'
        options.append({
            "label": f"Option {idx} : Radioth√©rapie externe ¬± hormonoth√©rapie 4‚Äì6 mois",
            "degre": "fort",
            "details": "RT standard ; HT courte si facteurs d√©favorables (ISUP3, ‚â•50% biopsies positives, PSA proche 20)."
            # AFU localis√© : RT + HT courte pour interm√©diaire d√©favorable (dur√©e typique 4‚Äì6 mois).
        }); idx += 1

        # Prostatectomie totale ¬± curage ‚Äî fort si op√©rable
        options.append({
            "label": f"Option {idx} : Prostatectomie totale ¬± curage pelvien",
            "degre": "fort",
            "details": "Option de r√©f√©rence si op√©rable ; discuter marges/nerve-sparing selon tumeur."
            # IBJSR6 F418 L31-L35 : PT = traitement de r√©f√©rence.
        }); idx += 1

        # Surveillance active ‚Äî faible (s√©lection ultra-stricte)
        options.append({
            "label": f"Option {idx} : Surveillance active (s√©lectionn√©e)",
            "degre": "faible",
            "details": "√Ä √©viter si crit√®res d√©favorables ; r√©serv√©e √† des cas tr√®s s√©lectionn√©s."
        }); idx += 1

    else:  # √©lev√©
        # RT + HT longue (18‚Äì36 mois) ‚Äî fort
        options.append({
            "label": f"Option {idx} : Radioth√©rapie + hormonoth√©rapie prolong√©e (18‚Äì36 mois)",
            "degre": "fort",
            "details": "Standard haut-risque ; b√©n√©fice en survie ; intensifications possibles selon contexte."
            # AFU localis√© : haut-risque ‚Üí RT + ADT longue.
        }); idx += 1

        # Prostatectomie totale ¬± traitements compl√©mentaires ‚Äî moyen (s√©lectionn√©)
        options.append({
            "label": f"Option {idx} : Prostatectomie totale (s√©lectionn√©e) ¬± RT/HT adjuvantes",
            "degre": "moyen",
            "details": "Discut√©e en RCP (marges, pT3, pN+). Soins compl√©mentaires selon anatomo-path et facteurs."
        }); idx += 1

    notes = [
        "Toujours d√©cision partag√©e en RCP et avec le patient.",
        "Hypofractionnements/modulations selon plateau technique (service de RT).",
    ]
    donnees = [("PSA", f"{psa:.2f} ng/mL"), ("ISUP", isup), ("cT", cT), ("Esp√©rance de vie", f"{esperance_vie_ans} ans")]
    return {"donnees": donnees, "risque": risque, "options": options, "notes": notes}


# --- 3) R√©cidive (d√©finition & CAT simple) ---
def detect_recurrence(type_initial: str, psa_actuel: float, psa_nadir_post_rt: float | None, confirmations: int) -> tuple[bool, str]:
    """
    - Apr√®s prostatectomie : r√©cidive biologique si PSA ‚â• 0,2 ng/mL confirm√© (deux dosages).
    - Apr√®s radioth√©rapie : 'Phoenix' = nadir + 2,0 ng/mL.
    R√©fs AFU (r√©cidive) : IBJSR6 ‚Äî sections 'r√©cidive' (ex. F414 L1-L6 sur diagnostic de r√©cidive locale).
    """
    if type_initial == "Prostatectomie":
        if psa_actuel >= 0.2 and confirmations >= 2:
            return True, "R√©cidive biologique apr√®s prostatectomie (PSA ‚â• 0,2 ng/mL confirm√©)."
        return False, "Pas de r√©cidive biologique confirm√©e (apr√®s prostatectomie)."
    else:  # Radioth√©rapie
        if (psa_nadir_post_rt is not None) and (psa_actuel >= psa_nadir_post_rt + 2.0):
            return True, "R√©cidive biologique apr√®s radioth√©rapie (nadir + 2)."
        return False, "Pas de r√©cidive biologique selon Phoenix (apr√®s radioth√©rapie)."


def plan_prostate_recidive(type_initial: str, psa_actuel: float, psa_nadir_post_rt: float | None, confirmations: int):
    """
    Retourne {resume, options, notes}
    Options avec degr√© indicatif; √† affiner selon imagerie (PSMA-PET/IRM), d√©lai, marge, pT, pN, vitesse PSA.
    """
    est_recidive, resume = detect_recurrence(type_initial, psa_actuel, psa_nadir_post_rt, confirmations)
    options, idx = [], 1

    if est_recidive:
        if type_initial == "Prostatectomie":
            options.append({"label": f"Option {idx} : Radioth√©rapie de rattrapage du lit prostatique ¬± bassin",
                            "degre": "fort",
                            "details": "√Ä initier pr√©cocement ; ¬± hormonoth√©rapie courte selon facteurs."}); idx += 1
            options.append({"label": f"Option {idx} : Hormonoth√©rapie seule (si non √©ligible RT/chir ou progression)",
                            "degre": "moyen",
                            "details": "Approche palliative/d‚Äôinhibition androg√©nique selon cin√©tique PSA/sympt√¥mes."}); idx += 1
        else:
            options.append({"label": f"Option {idx} : Traitement local de rattrapage (salvage) s√©lectionn√©",
                            "degre": "moyen",
                            "details": "Prostatectomie de rattrapage/curieth√©rapie/HIFU/cryoth√©rapie selon localisation et expertise."}); idx += 1
            options.append({"label": f"Option {idx} : Hormonoth√©rapie ¬± traitements syst√©miques",
                            "degre": "moyen",
                            "details": "Si √©chec local/oligo vs polyprogression ; imagerie de re-stadification requise."}); idx += 1
        notes = [
            "Re-stadifier (IRM, TEP-PSMA si dispo) avant rattrapage.",
            "Discuter en RCP radio-onco/uro/nucl√©o.",
        ]
    else:
        options = [{"label": "Option 1 : Poursuivre la surveillance",
                    "degre": "moyen",
                    "details": "Contr√¥les PSA et imagerie selon protocole ; pas d‚Äôargument de r√©cidive pour l‚Äôinstant."}]
        notes = []

    return {"resume": resume, "options": options, "notes": notes}


# --- 4) M√©tastatique (mHSPC vs mCRPC) ---
def plan_prostate_metastatique(testosterone_castration: bool,
                               volume_eleve: bool,
                               symptomes_osseux: bool,
                               deja_docetaxel: bool,
                               deja_arpi: bool,
                               alteration_HRR: bool):
    """
    Retourne {profil, options, adjoints, notes}
    R√©f√©rences (AFU r√©cidive/m√©tastatique ‚Äî Abup6x-main.pdf) :
      - mHSPC : intensification HTNG (abirat√©rone/enzalutamide/apalutamide) sup√©rieure au doc√©taxel ; doc√©taxel utile surtout en haut volume (F469 L41-L47 ; F470 L50-L52).
      - Support osseux : zoledronate/denosumab pour fractures/sympt√¥mes (F471 L28-L36).
      - mCRPC : iPARP si alt√©rations HRR (PROfound, TRITON-3) ; cabazitaxel apr√®s doc√©taxel (NEJM 2019) (F515‚ÄìF516 ; F533 L29-L32).
    """
    options, idx = [], 1
    adjoints = []
    profil = "mHSPC (sensible √† la castration)" if not testosterone_castration else "mCRPC (r√©sistant √† la castration)"

    if not testosterone_castration:
        # mHSPC
        options.append({"label": f"Option {idx} : ADT + ARPI (abirat√©rone OU enzalutamide OU apalutamide)",
                        "degre": "fort",
                        "details": "Intensification standard de 1re ligne mHSPC."}); idx += 1
        if volume_eleve:
            options.append({"label": f"Option {idx} : ADT + doc√©taxel (haut volume)",
                            "degre": "moyen",
                            "details": "B√©n√©fice surtout en haut volume ; discuter toxicit√© et comorbidit√©s."}); idx += 1
        else:
            options.append({"label": f"Option {idx} : ADT seule (si contre-indication √† l‚Äôintensification)",
                            "degre": "faible",
                            "details": "Moins performant ; r√©serv√© si CI/fragilit√©."}); idx += 1

    else:
        # mCRPC
        if not deja_arpi:
            options.append({"label": f"Option {idx} : ARPI (enzalutamide OU abirat√©rone)",
                            "degre": "fort",
                            "details": "Standard mCRPC 1re ligne selon exposition ant√©rieure."}); idx += 1
        if not deja_docetaxel:
            options.append({"label": f"Option {idx} : Doc√©taxel",
                            "degre": "fort",
                            "details": "Chimioth√©rapie de r√©f√©rence si √©ligible ; surtout si symptomatique/rapide progression."}); idx += 1
        else:
            options.append({"label": f"Option {idx} : Cabazitaxel (apr√®s doc√©taxel)",
                            "degre": "fort",
                            "details": "Sup√©rieur √† switch ARPI/ARPI dans proc√®s comparatifs ; standard apr√®s doc√©taxel."}); idx += 1
        if alteration_HRR:
            options.append({"label": f"Option {idx} : iPARP (olaparib/rucaparib) chez alt√©rations BRCA/HRR",
                            "degre": "fort",
                            "details": "Efficacit√© d√©montr√©e (PROfound/TRITON-3) ; combinaisons ARPI+iPARP possibles selon autorisations/local."}); idx += 1

    # Mesures adjointes
    if symptomes_osseux:
        adjoints.append("Soins osseux : acide zol√©dronique ou denosumab ; suppl√©mentation Ca/Vit D ; √©valuer radioth√©rapie antalgique cibl√©e.")

    notes = ["Toujours d√©cision en RCP. S√©quen√ßage selon expositions ant√©rieures, comorbidit√©s, pr√©f√©rences patient."]
    return {"profil": profil, "options": options, "adjoints": adjoints, "notes": notes}

# =========================
# LOGIQUE CLINIQUE ‚Äî REIN (localis√©, m√©tastatique, biopsie)
# =========================

from typing import List, Tuple, Dict

def plan_rein_local(
    cT: str,
    cN_pos: bool,
    thrombus: str,  # "Aucun", "Veine r√©nale", "VCC infra-h√©patique", "VCC supra-h√©patique/atrium"
    rein_unique_ou_CKD: bool,
    tumeur_hilaire: bool,
    exophytique: bool,
    age: int,
    haut_risque_op: bool,
    biopsie_dispo: bool,
):
    """
    Retourne dict {donnees, traitement, suivi, notes} avec options num√©rot√©es.
    NOTE: aucune taille en cm; les d√©cisions se basent sur le stade cT.
    """
    donnees = [
        ("cT", cT),
        ("cN+", "Oui" if cN_pos else "Non"),
        ("Thrombus", thrombus),
        ("Rein unique/CKD", "Oui" if rein_unique_ou_CKD else "Non"),
        ("Tumeur hilaire/centrale", "Oui" if tumeur_hilaire else "Non"),
        ("Exophytique", "Oui" if exophytique else "Non"),
        ("√Çge", f"{age} ans"),
        ("Haut risque op√©ratoire", "Oui" if haut_risque_op else "Non"),
        ("Biopsie disponible", "Oui" if biopsie_dispo else "Non"),
    ]

    options: List[str] = []
    idx = 1
    notes: List[str] = []

    if not biopsie_dispo:
        notes.append("Biopsie √† discuter si traitement focal/surveillance pr√©vue, doute diagnostique, ou avant traitement syst√©mique.")

    # D√©cision par stade
    if cT == "T1a":  # ‚â§ 4 cm (cat√©goris√© par le stade)
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle (standard)."); idx += 1
        if exophytique:
            options.append(f"Option {idx} : traitement focal ‚Äî Cryoablation/RFA percutan√©e (l√©sion exophytique, plateau adapt√©, patient fragile)."); idx += 1
        options.append(f"Option {idx} : surveillance active ‚Äî Imagerie √† 3‚Äì6 mois puis 6‚Äì12 mois; d√©clencheurs = croissance rapide, sympt√¥mes, haut grade confirm√©."); idx += 1
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale si NP non faisable (anatomie/hilaire) ou rein non fonctionnel."); idx += 1

    elif cT == "T1b":  # >4 √† ‚â§7 cm
        if rein_unique_ou_CKD:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle en centre expert (pr√©servation r√©nale prioritaire)."); idx += 1
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale si NP non faisable."); idx += 1
        else:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle (s√©lectionn√©e) OU N√©phrectomie totale selon complexit√© (hilaire/endophytique ‚Üí plut√¥t NT)."); idx += 1
        options.append(f"Option {idx} : surveillance active ‚Äî Uniquement si comorbidit√©s majeures/inop√©rable (RCP)."); idx += 1

    elif cT in ("T2a", "T2b"):  # >7 √† ‚â§10 cm ; >10 cm
        if rein_unique_ou_CKD:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle *imp√©rative* (centre expert) OU N√©phrectomie totale si NP impossible."); idx += 1
        else:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale (standard)."); idx += 1
        options.append(f"Option {idx} : surveillance ‚Äî seulement si inop√©rable/fragilit√© majeure (RCP, soins de support)."); idx += 1

    elif cT == "T3a":
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale avec ex√©r√®se graisse p√©ri-r√©nale ¬± veine r√©nale (si envahie)."); idx += 1
        if rein_unique_ou_CKD:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle *imp√©rative* (centre expert) si anatomie favorable."); idx += 1

    elif cT in ("T3b", "T3c"):
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale + thrombectomie (niveau {thrombus}). √âquipe vasculaire/cardiothoracique si VCC."); idx += 1
        options.append(f"Option {idx} : strat√©gie ‚Äî Discussion RCP sp√©cialis√©e (op√©rabilit√© vs traitement syst√©mique d‚Äôembl√©e)."); idx += 1

    elif cT == "T4":
        options.append(f"Option {idx} : traitement chirurgical ‚Äî R√©section √©largie si r√©s√©cable (RCP de recours)."); idx += 1
        options.append(f"Option {idx} : strat√©gie ‚Äî Traitement syst√©mique d‚Äôembl√©e si non r√©s√©cable."); idx += 1

    # Ganglions
    if cN_pos:
        notes.append("Curage ganglionnaire cibl√© si ad√©nopathies cliniquement envahies; curage √©tendu syst√©matique non recommand√©.")

    # Adjuvant
    notes.append("Adjuvant : pembrolizumab 12 mois √† discuter chez ccRCC √† haut risque (profils type KEYNOTE-564).")

    # Haut risque op√©ratoire ‚Äî rappel d‚Äôorientation
    if haut_risque_op:
        notes.append("Haut risque op√©ratoire : privil√©gier prise en charge mini-invasive si √©ligible (TA) ou surveillance selon stade/comorbidit√©s, en RCP.")

    # Suivi post-traitement
    suivi: List[str] = []
    if cT == "T1a" and not cN_pos:
        suivi += [
            "Consultation : 3‚Äì6 mois post-op, puis 12 mois, puis annuel jusqu‚Äô√† 5 ans.",
            "Imagerie : TDM/IRM abdo ¬± TDM thorax √† 12 mois puis annuel.",
            "Biologie : cr√©at/DFG √† chaque visite; PA; +/- Hb/Ca selon contexte.",
        ]
    elif cT in ("T1b", "T2a", "T2b") and not cN_pos:
        suivi += [
            "Consultation : tous les 6‚Äì12 mois pendant 3 ans, puis annuel jusqu‚Äô√† 5 ans.",
            "Imagerie : TDM abdo + TDM thorax tous les 6‚Äì12 mois (3 ans), puis annuel.",
            "Biologie : cr√©at/DFG, +/- Hb/Ca; adapter si rein unique/CKD.",
        ]
    else:  # T3/T4 ou N+
        suivi += [
            "Consultation : tous les 3‚Äì6 mois pendant 3 ans, puis 6‚Äì12 mois jusqu‚Äô√† 5 ans.",
            "Imagerie : TDM TAP tous les 3‚Äì6 mois (3 ans), puis 6‚Äì12 mois.",
            "Biologie : cr√©at/DFG, Hb, Ca; sympt√¥mes cibl√©s. IRM c√©r√©brale si clinique.",
        ]

    return {"donnees": donnees, "traitement": options, "suivi": suivi, "notes": notes}


# ‚Äî‚Äî‚Äî inchang√© ci-dessous ‚Äî‚Äî‚Äî

def calc_imdc(
    karnofsky_lt80: bool,
    time_to_systemic_le_12mo: bool,
    hb_basse: bool,
    calcium_haut: bool,
    neutro_hauts: bool,
    plaquettes_hautes: bool,
):
    """Heng/IMDC : 6 facteurs (KPS<80, d√©lai<1 an, Hb basse, Ca haut, neutros hautes, plaquettes hautes)."""
    score = sum([karnofsky_lt80, time_to_systemic_le_12mo, hb_basse, calcium_haut, neutro_hauts, plaquettes_hautes])
    if score == 0:
        groupe = "Bon pronostic (0)"
    elif score in (1, 2):
        groupe = "Interm√©diaire (1‚Äì2)"
    else:
        groupe = "Mauvais (‚â•3)"
    return score, groupe


def calc_mskcc(
    karnofsky_lt80: bool,
    time_to_systemic_le_12mo: bool,
    hb_basse: bool,
    calcium_haut: bool,
    ldh_haut: bool,
):
    """MSKCC/Motzer : 5 facteurs (KPS<80, d√©lai<1 an, Hb basse, Ca haut, LDH √©lev√©)."""
    score = sum([karnofsky_lt80, time_to_systemic_le_12mo, hb_basse, calcium_haut, ldh_haut])
    if score == 0:
        groupe = "Bon pronostic (0)"
    elif score in (1, 2):
        groupe = "Interm√©diaire (1‚Äì2)"
    else:
        groupe = "Mauvais (‚â•3)"
    return score, groupe


def plan_rein_meta(
    histo: str,             # "ccRCC" ou "non-ccRCC"
    score: int,
    group: str,
    score_system_label: str,
    oligo: bool,
    bone: bool,
    brain: bool,
    liver: bool,
    io_contra: bool,
):
    """
    Retourne dict {donnees, stratification, traitement, suivi, notes}.
    Inclut la n√©phrectomie de cytor√©duction comme option selon IMDC/MSKCC et charge tumorale.
    """
    donnees = [
        ("Histologie", histo),
        (f"{score_system_label} score", str(score)),
        (f"Groupe {score_system_label}", group),
        ("Oligom√©tastatique", "Oui" if oligo else "Non"),
        ("M√©tastases osseuses", "Oui" if bone else "Non"),
        ("C√©r√©brales", "Oui" if brain else "Non"),
        ("H√©patiques", "Oui" if liver else "Non"),
        ("CI immunoth√©rapie", "Oui" if io_contra else "Non"),
    ]

    options: List[str] = []
    idx = 1
    notes: List[str] = []

    # Cytor√©duction
    if "Bon" in group and oligo:
        options.append(f"Option {idx} : n√©phrectomie de cytor√©duction **imm√©diate** (bon pronostic, tumeur r√©nale dominante, faible charge)."); idx += 1
    elif "Interm√©diaire" in group or "Mauvais" in group:
        options.append(f"Option {idx} : n√©phrectomie de cytor√©duction **diff√©r√©e** apr√®s r√©ponse au traitement syst√©mique (s√©lectionn√©s)."); idx += 1

    # 1re ligne
    if histo == "ccRCC":
        if "Bon" in group:
            if not io_contra:
                options.append(f"Option {idx} : 1re ligne ‚Äî Pembrolizumab + Axitinib."); idx += 1
                options.append(f"Option {idx} : 1re ligne ‚Äî Pembrolizumab + Lenvatinib."); idx += 1
                options.append(f"Option {idx} : 1re ligne ‚Äî Nivolumab + Cabozantinib."); idx += 1
                options.append(f"Option {idx} : strat√©gie ‚Äî Surveillance rapproch√©e (maladie indolente, faible charge)."); idx += 1
            options.append(f"Option {idx} : 1re ligne ‚Äî TKI seul (Axitinib, Pazopanib, Sunitinib, Tivozanib) si CI √† l‚Äôimmunoth√©rapie."); idx += 1
        else:
            if not io_contra:
                options.append(f"Option {idx} : 1re ligne ‚Äî Nivolumab + Ipilimumab."); idx += 1
                options.append(f"Option {idx} : 1re ligne ‚Äî Pembrolizumab + Lenvatinib."); idx += 1
                options.append(f"Option {idx} : 1re ligne ‚Äî Nivolumab + Cabozantinib."); idx += 1
                options.append(f"Option {idx} : 1re ligne ‚Äî Pembrolizumab + Axitinib."); idx += 1
            options.append(f"Option {idx} : 1re ligne ‚Äî TKI seul (Cabozantinib, Axitinib, Sunitinib, Tivozanib) si CI √† l‚Äôimmunoth√©rapie."); idx += 1
    else:
        options.append(f"Option {idx} : 1re ligne ‚Äî Cabozantinib (pr√©f√©rence papillaire)."); idx += 1
        options.append(f"Option {idx} : 1re ligne ‚Äî Pembrolizumab + Lenvatinib."); idx += 1
        options.append(f"Option {idx} : 1re ligne ‚Äî Sunitinib ou Pazopanib."); idx += 1
        options.append(f"Option {idx} : 1re ligne ‚Äî Lenvatinib + Everolimus (s√©lectionn√©)."); idx += 1
        options.append(f"Option {idx} : chimioth√©rapie ‚Äî Gemcitabine + (Cisplatine/Carboplatine) pour sous-types agressifs."); idx += 1
        options.append(f"Option {idx} : strat√©gie ‚Äî Essai clinique si disponible."); idx += 1

    # 2e ligne
    if histo == "ccRCC":
        options.append(f"Option {idx} : 2e ligne ‚Äî Cabozantinib."); idx += 1
        options.append(f"Option {idx} : 2e ligne ‚Äî Lenvatinib + Everolimus."); idx += 1
        options.append(f"Option {idx} : 2e ligne ‚Äî Tivozanib."); idx += 1
        options.append(f"Option {idx} : 2e ligne ‚Äî Belzutifan (si disponible)."); idx += 1
    else:
        options.append(f"Option {idx} : 2e ligne ‚Äî Cabozantinib / Lenvatinib + Everolimus."); idx += 1
        options.append(f"Option {idx} : 2e ligne ‚Äî Essai clinique fortement recommand√©."); idx += 1

    # Sites sp√©ciaux
    if oligo:
        notes.append("Maladie oligom√©tastatique : √† discuter m√©tastasectomie et/ou radioth√©rapie st√©r√©otaxique.")
    if bone:
        notes.append("Os : acide zol√©dronique ou denosumab + Ca/Vit D; radioth√©rapie antalgique si douloureux.")
    if brain:
        notes.append("Cerveau : st√©r√©otaxie/chirurgie + st√©ro√Ødes selon sympt√¥mes; coordination neuro-oncologie.")

    # Suivi m√©tastatique
    suivi = [
        "Avant et pendant traitement : PA/poids, sympt√¥mes; NFS, cr√©at/DFG, transaminases, phosphatases, Ca; TSH (IO/TKI).",
        "Prot√©inurie et TA √† chaque visite sous TKI; ECG/risques CV si n√©cessaire.",
        "Imagerie de r√©√©valuation : TDM TAP toutes 8‚Äì12 semaines les 6‚Äì9 premiers mois, puis espacer selon r√©ponse/clinique.",
        "IRM c√©r√©brale si sympt√¥mes ou l√©sions trait√©es (toutes 8‚Äì12 semaines au d√©but).",
    ]

    return {
        "donnees": donnees,
        "stratification": [(score_system_label, f"{group} (score {score})")],
        "traitement": options,
        "suivi": suivi,
        "notes": notes,
    }


def plan_rein_biopsy(
    indication_systemique: bool,
    indication_ablation: bool,
    inoperable_haut_risque: bool,
    lesion_indet: bool,
    suspicion_lymphome_metastase_infection: bool,
    rein_unique_ou_ckd: bool,
    petite_masse_typique_et_chirurgie_prevue: bool,
    bosniak: str,  # "II", "IIF", "III", "IV", "Non applicable"
    troubles_coag_non_corriges: bool,
):
    """
    Retourne dict {donnees, conduite, suivi, notes} pour les indications de biopsie percutan√©e d'une masse r√©nale.
    """
    donnees = [
        ("Avant traitement syst√©mique (m√©tastatique)", "Oui" if indication_systemique else "Non"),
        ("Avant traitement focal (cryo/RFA) pr√©vu", "Oui" if indication_ablation else "Non"),
        ("Patient inop√©rable/haut risque chirurgical", "Oui" if inoperable_haut_risque else "Non"),
        ("L√©sion ind√©termin√©e en imagerie", "Oui" if lesion_indet else "Non"),
        ("Suspicion lymphome / m√©tastase / infection", "Oui" if suspicion_lymphome_metastase_infection else "Non"),
        ("Rein unique / CKD significative", "Oui" if rein_unique_ou_ckd else "Non"),
        ("Petite masse typique et chirurgie d√©j√† pr√©vue", "Oui" if petite_masse_typique_et_chirurgie_prevue else "Non"),
        ("Bosniak (si kystique)", bosniak),
        ("Troubles de coagulation non corrig√©s", "Oui" if troubles_coag_non_corriges else "Non"),
    ]

    options: List[str] = []
    idx = 1
    notes: List[str] = []

    # CI imm√©diate
    if troubles_coag_non_corriges:
        options.append(f"Option {idx} : corriger les troubles de coagulation **avant** toute biopsie; sinon diff√©rer."); idx += 1

    # Indications fortes
    indications_fortes = any([
        indication_systemique,
        indication_ablation,
        inoperable_haut_risque,
        lesion_indet,
        suspicion_lymphome_metastase_infection,
        rein_unique_ou_ckd,
    ])

    # Non n√©cessaire d‚Äôembl√©e
    non_necessaire = petite_masse_typique_et_chirurgie_prevue and not indications_fortes

    # Bosniak
    if bosniak in ("III", "IV"):
        notes.append("Kystique Bosniak III/IV : la biopsie peut avoir un rendement limit√©; d√©cision RCP (biopsie vs chirurgie d‚Äôembl√©e).")

    if indications_fortes:
        options.append(f"Option {idx} : Biopsie r√©nale percutan√©e guid√©e (TDM/√©cho), 2‚Äì3 carottes, histo + IHC si besoin."); idx += 1
    elif not indications_fortes and not non_necessaire:
        options.append(f"Option {idx} : Discussion RCP ‚Äî Biopsie **ou** surveillance/traitement selon pr√©f√©rences et risque."); idx += 1
    else:
        options.append(f"Option {idx} : Pas d‚Äôindication routini√®re √† la biopsie si chirurgie partielle d√©j√† pr√©vue chez patient apte (petite masse solide typique)."); idx += 1

    # Suivi
    suivi = [
        "Apr√®s biopsie : surveillance du point de ponction, contr√¥le Hb si risque saignement.",
        "Si surveillance active choisie : imagerie √† 3‚Äì6 mois puis tous les 6‚Äì12 mois; re-biopsie si √©volution atypique.",
        "Si ablation apr√®s biopsie : TDM/IRM √† 3 mois, puis 6‚Äì12 mois les 2 premi√®res ann√©es.",
    ]

    notes += [
        "CI relatives : infection cutan√©e au point de ponction, impossibilit√© de coop√©ration/apn√©e, anticoagulation non interrompue.",
        "Informer sur rendements : meilleurs pour masses solides; plus limit√© pour kystiques complexes.",
    ]

    return {"donnees": donnees, "conduite": options, "suivi": suivi, "notes": notes}

# =========================
# LOGIQUE CLINIQUE ‚Äî TVNIM (simplifi√©e pour prototypage)
# =========================

def stratifier_tvnim(stade: str, grade: str, taille_mm: int, nombre: str,
                     cis_associe: bool, lvi: bool, urethre_prostatique: bool, formes_agressives: bool) -> str:
    """Retourne "faible", "interm√©diaire" ou "√©lev√©" (simplifi√©)."""
    if stade == "pT1" or cis_associe or lvi or urethre_prostatique or formes_agressives:
        return "√©lev√©"
    multiple = (nombre != "Unique")
    if grade == "Bas grade" and (taille_mm < 30) and not multiple:
        return "faible"
    return "interm√©diaire"


def plan_tvnim(risque: str):
    traitement, suivi, protocoles, notes = [], [], [], []
    if risque == "faible":
        traitement = [
            "RTUV compl√®te.",
            " il est recommand√© de r√©aliser une instillation postop√©ratoire pr√©coce (IPOP) . Aucun autre traitement compl√©mentaire n‚Äôest n√©cessaire. Une surveillance simple selon le sch√©ma propos√©  est n√©cessaire pour une dur√©e totale de 5 ans.",
        ]
        suivi = [
            "3e et 12e mois Puis 1√ó/an pendant 5 ans .",
            
        ]
    elif risque == "interm√©diaire":
        traitement = [
            "RTUV compl√®te.",
            "instillations endov√©sicales par chimioth√©rapie (mitomycine, √©pirubicine, gemcitabine) selon un sch√©ma de 6-8 instillations d‚Äôinduction+ traitement d‚Äôentretien peut √™tre discut√© pour les patients les plus √† risque de r√©cidive. Une alternative th√©rapeutique est la BCG-th√©rapie avec un entretien de 1 an  pour diminuer le risque de r√©cidive.",
        ]
        suivi = ["3e et 6e mois puis tous les 6 mois pendant 2 ans Puis 1√ó/an , + cytologie urinaire."]
        protocoles = ["BCG : induction (6 instillations) + maintenance (~1 an)."]
    else:  # √©lev√©
        traitement = [
            "RTUV compl√®te avec re‚Äër√©section (second look) .",
            "BCG : induction 6 seances  + entretien prolong√©e (3 ans selon dispo/tol√©rance).",
            "Discuter cystectomie pr√©coce si T1 haut grade avec facteurs d√©favorables ( tr√®s haut risque).",
        ]
        suivi = [
            "Cysto + cytologie rapproch√©es (ex3e et 6e mois puis tous les 3 mois pendant 2 ans puis tous les 6 mois jusqu‚Äô√† 5 ans puis 1√ó/an a vie ).",
            "Imagerie selon facteurs/sympt√¥mes.",
        ]
        protocoles = ["BCG : induction (6) + maintenance prolong√©e."]
        notes = ["Second look recommand√© si T1 haut grade (2‚Äì6 semaines)."]

    notes_second_look = notes or [
        "Second look : √† envisager si r√©section incompl√®te ou doute sur le stade, ou muscle non vue a l'anapath;."
    ]
    return traitement, suivi, protocoles, notes_second_look


# =========================
# LOGIQUE CLINIQUE ‚Äî TVIM (simplifi√©e pour prototypage)
# =========================

def plan_tvim(
    t_cat: str,
    cN_pos: bool,
    metastases: bool,
    cis_eligible: bool,
    hydron: bool,
    bonne_fct_v: bool,
    cis_diffus: bool,
    post_op_high_risk: bool,
    neo_adjuvant_fait: bool,
    # crit√®res pour l'alternative TMT
    
):
    """
    Alternative TMT affich√©e seulement si TOUS les crit√®res sont satisfaits :
      - T2‚ÄìT3 (ou t2_localise = True)
      - N0 (cN_pos = False)
      - M0 (metastases = False)
      - Pas de CIS diffus
      - Pas d‚Äôhydron√©phrose
      - Bonne fonction v√©sicale
    """
    traitement, surveillance, notes = [], [], []

    # Maladie m√©tastatique : pas d'alternative TMT ni de chirurgie curative
    if metastases:
        traitement = ["Maladie m√©tastatique ‚Üí voir module d√©di√©."]
        return {"traitement": traitement, "surveillance": surveillance, "notes": notes}

    # Standard : chimio n√©oadjuvante si √©ligible, puis cystectomie
    if cis_eligible and not neo_adjuvant_fait:
        traitement += [
            "Chimioth√©rapie n√©oadjuvante √† base de cisplatine (MVAC dose-dense ou GemCis).",
            "‚Üí Puis cystectomie radicale + curage ganglionnaire (10‚Äì12 semaines apr√®s la derni√®re cure).",
        ]
    else:
        traitement += [
            "Cystectomie radicale + curage ganglionnaire (< 3 mois apr√®s le diagnostic de TVIM)."
        ]

    # V√©rification stricte de l'√©ligibilit√© √† l'ALTERNATIVE TMT
    stade_ok = (t_cat.upper() in {"T2", "T3"}) 
    strict_tmt_ok = all([
        stade_ok,
        not bool(cN_pos),         # N0
        not bool(metastases),     # M0
        not bool(cis_diffus),
        not bool(hydron),
        bool(bonne_fct_v),
    ])

    # Ajouter l'ALTERNATIVE TMT uniquement si tous les crit√®res sont remplis
    if strict_tmt_ok:
        traitement += [
            "Alternative : TMT √† base de RTUTV it√©ratives + chimioth√©rapie et radioth√©rapie + surveillance, "
            "√† condition que les RTUTV soient toujours compl√®tes et que le patient soit inform√© et compliant."
        ]

    # Notes adjuvant si haut risque post-op
    if post_op_high_risk:
        notes += ["Risque post-op √©lev√© (pT3‚Äì4/pN+) : discuter traitement adjuvant (ex. immunoth√©rapie adjuvante)."]

    # Suivi
    surveillance = ["Suivi clinique, imagerie et biologie selon protocole (tous les 3‚Äì6 mois les 2 premi√®res ann√©es)."]

    return {"traitement": traitement, "surveillance": surveillance, "notes": notes}


# =========================
# LOGIQUE CLINIQUE ‚Äî Vessie m√©tastatique (simplifi√©e pour prototypage)
# =========================

def plan_meta(cis_eligible: bool, carbo_eligible: bool, platinum_naive: bool, pdl1_pos: bool,
              prior_platinum: bool, prior_cpi: bool, bone_mets: bool):
    traitement, suivi, notes = [], [], []

    if platinum_naive:
        traitement += [
            "1re ligne (na√Øf platine) : combinaison r√©cente anticorps‚Äëconjugu√© + immunoth√©rapie (selon acc√®s).",
            "Alternative : Gemcitabine + Cisplatine (ou Carboplatine si non √©ligible Cisplatine), puis maintenance IO si RC/PR/SD.",
        ]
    else:
        if prior_platinum and not prior_cpi:
            traitement += ["Apr√®s platine : immunoth√©rapie (PD‚Äë1/PD‚ÄëL1) si non d√©j√† re√ßue."]
        elif prior_cpi:
            traitement += ["Apr√®s immunoth√©rapie : envisager anticorps‚Äëconjugu√© (Nectin‚Äë4/Trop‚Äë2) selon disponibilit√©."]

    if bone_mets:
        notes += [
            "M√©tastases osseuses : envisager traitement osseux (acide zol√©dronique/denosumab) + Ca/Vit D, pr√©vention SDS.",
        ]

    suivi = ["R√©√©valuation toutes 6‚Äì8 semaines au d√©but (clinique/imagerie/biologie)."]

    return {"traitement": traitement, "suivi": suivi, "notes": notes}

# =========================
# LOGIQUE CLINIQUE ‚Äî TVES (localis√© & m√©tastatique)
# =========================

def stratifier_tves_risque(
    grade_biopsie: str,          # "Bas grade", "Haut grade", "Ind√©termin√©"
    cytologie_hg_positive: bool,
    taille_cm: float,
    multifocal: bool,
    invasion_imagerie: bool,
    hydron: bool,
    kss_faisable: bool,          # possibilit√© de traitement conservateur endoscopique/segmentaire complet
    accepte_suivi_strict: bool,
):
    """
    R√®gles (synth√®se) :
      BAS RISQUE si TOUT est r√©uni :
        - Bas grade √† la biopsie URSS
        - Cytologie haut grade n√©gative
        - L√©sion non infiltrante √† l‚Äôimagerie (pas d‚Äôinvasion) et PAS d‚Äôhydron√©phrose
        - Taille < 2 cm
        - Unifocale (multifocal = False)
        - Traitement conservateur r√©alisable (kss_faisable = True)
        - Patient accepte le suivi strict (accepte_suivi_strict = True)
      Sinon = HAUT RISQUE
    """
    conditions_bas = [
        grade_biopsie == "Bas grade",
        not cytologie_hg_positive,
        not invasion_imagerie,
        not hydron,
        taille_cm < 2.0,
        not multifocal,
        kss_faisable,
        accepte_suivi_strict,
    ]
    return "Bas risque" if all(conditions_bas) else "Haut risque"


def _suivi_tves_apres_nut():
    return [
        "Cystoscopie + cytologie : tous les 3 mois pendant 1 an, puis tous les 6 mois pendant 2 ans, puis annuelle (dur√©e prolong√©e > 5‚Äì10 ans).",
        "Imagerie (uro-TDM ¬± TDM thorax) : tous les 6 mois pendant 4 ans, puis annuelle.",
        "Biologie : cr√©at/DFG √† chaque visite; adapter si rein unique/CKD.",
    ]


def _suivi_tves_apres_kss():
    return [
        "URSS (¬± biopsies) + cytologie *in situ* : √† 6‚Äì8 semaines (second look), puis √† 3 et 6 mois, ensuite annuelle si stable.",
        "Cystoscopie : √† 3 et 6 mois, puis annuelle.",
        "Imagerie (uro-TDM) : √† 3 et 6 mois, puis annuelle.",
        "Biologie : cr√©at/DFG, selon contexte.",
    ]


def plan_tves_localise(
    grade_biopsie: str,
    cytologie_hg_positive: bool,
    taille_cm: float,
    multifocal: bool,
    invasion_imagerie: bool,
    hydron: bool,
    kss_faisable: bool,
    accepte_suivi_strict: bool,
    localisation: str,  # "Bassinets/caliciel", "Uret√®re proximal", "Uret√®re moyen", "Uret√®re distal"
):
    """
    Renvoie dict {donnees, stratification, traitement, suivi, notes}
    - Options num√©rot√©es si plusieurs possibilit√©s ; sinon conduite directe.
    """
    risque = stratifier_tves_risque(
        grade_biopsie, cytologie_hg_positive, taille_cm, multifocal,
        invasion_imagerie, hydron, kss_faisable, accepte_suivi_strict
    )

    donnees = [
        ("Risque estim√©", risque),
        ("Grade biopsie URSS", grade_biopsie),
        ("Cytologie haut grade positive", "Oui" if cytologie_hg_positive else "Non"),
        ("Taille l√©sion", f"{taille_cm:.1f} cm"),
        ("Multifocale", "Oui" if multifocal else "Non"),
        ("Invasion suspecte √† l‚Äôimagerie", "Oui" if invasion_imagerie else "Non"),
        ("Hydron√©phrose", "Oui" if hydron else "Non"),
        ("KSS (conservateur) faisable", "Oui" if kss_faisable else "Non"),
        ("Acceptation suivi strict", "Oui" if accepte_suivi_strict else "Non"),
        ("Localisation", localisation),
    ]

    options = []
    notes = []
    suivi = []
    idx = 1

    if risque == "Bas risque":
        # KSS prioritaire
        options.append(f"Option {idx} : traitement conservateur endoscopique (URSS laser/ablation) avec second look √† 6‚Äì8 semaines."); idx += 1
        if "Uret√®re distal" in localisation:
            options.append(f"Option {idx} : chirurgie conservatrice ‚Äî Ur√©t√©rectomie segmentaire + r√©implantation (s√©lectionn√©)."); idx += 1

        # Si KSS impossible malgr√© crit√®res bas risque ‚Üí NUT
        options.append(f"Option {idx} : N√©phro-ur√©t√©rectomie totale (NUT) si KSS non r√©alisable/√©chec."); idx += 1

        # Adjuvants/pr√©ventions
        notes += [
            "Apr√®s NUT : instillation intrav√©sicale unique (ex. mitomycine) 2‚Äì10 jours post-op pour ‚Üì r√©cidives v√©sicales.",
            "Topiques r√©no-ur√©t√©raux (ex. MMC/gel) apr√®s KSS selon centres/disponibilit√©.",
        ]

        suivi = _suivi_tves_apres_kss()

    else:  # Haut risque
        options.append(f"Option {idx} : N√©phro-ur√©t√©rectomie totale (NUT) avec collerette v√©sicale en bloc ¬± curage selon topographie."); idx += 1
        # (N√©oadjuvant possible selon centre; souvent adjuvant privil√©gi√© POUT)
        notes.append("Adjuvant : chimioth√©rapie sels de platine (sch√©ma bas√© cisplatine si DFG suffisant) √† discuter pour pT2‚ÄìT4 et/ou pN+ (type POUT).")
        notes.append("Apr√®s NUT : instillation intrav√©sicale unique (ex. mitomycine) 2‚Äì10 jours post-op pour ‚Üì r√©cidive v√©sicale.")
        suivi = _suivi_tves_apres_nut()

    # Conduite directe si une seule option
    if len(options) == 1:
        traitement = options  # 1 seule ligne (conduite)
    else:
        traitement = options  # plusieurs "Option x"

    return {
        "donnees": donnees,
        "stratification": [("Risque", risque)],
        "traitement": traitement,
        "suivi": suivi,
        "notes": notes,
    }


def plan_tves_metastatique(
    ev_pembro_eligible: bool,
    cis_eligible: bool,
    carbo_eligible: bool,
    platinum_naif: bool,
    fgfr_alt: bool,
    prior_platinum: bool,
    prior_io: bool,
    use_cis_gem_nivo: bool,   # ‚Üê nouveau param√®tre (pour le bras "Cisplatine Gem Nivo")
):
    """
    Aligne la CAT sur l‚Äôalgorithme fourni pour carcinome uroth√©lial m√©tastatique:

    - Si √©ligible EV + Pembro ‚Üí 1L = EV + Pembrolizumab (option pr√©f√©rentielle)
        ‚Ä¢ Progression ‚Üí 2L: Platine-Gemcitabine (cis/carbo selon √©ligibilit√©)
        ‚Ä¢ (FGFR alt) ‚Üí Erdafitinib possible (2L/3L)
        ‚Ä¢ Progression ult√©rieure ‚Üí 3L: EV (si non d√©j√† exploitable en monoth√©rapie) ¬± Erdafitinib si FGFR alt non utilis√©

    - Si NON √©ligible EV + Pembro:
        ‚Ä¢ Option A (si cis √©ligible ET choisi): 1L = Cisplatine + Gemcitabine + Nivolumab
              ‚Ü≥ Progression ‚Üí EV  ¬± Erdafitinib (si FGFR alt)
        ‚Ä¢ Option B (par d√©faut): 1L = Platine-Gemcitabine (cis si possible, sinon carbo)
              ‚Ü≥ TDM TAP apr√®s 4‚Äì6 cycles:
                    - maladie contr√¥l√©e (RC/PR/SD) ‚Üí maintenance Avelumab
                    - progression ‚Üí Pembrolizumab
              ‚Ü≥ Progression apr√®s maintenance/IO ‚Üí EV  ¬± Erdafitinib (si FGFR alt)

    - Si patient NON na√Øf de platine: orienter directement vers Pembro (si pas d‚ÄôIO ant√©rieure),
      sinon EV / Erdafitinib selon FGFR.

    Renvoie: dict {donnees, traitement (options num√©rot√©es), suivi (d√©taill√©), notes}
    """
    donnees = [
        ("√âligible EV + Pembrolizumab", "Oui" if ev_pembro_eligible else "Non"),
        ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"),
        ("√âligible Carboplatine", "Oui" if carbo_eligible else "Non"),
        ("Na√Øf de platine (1re ligne)", "Oui" if platinum_naif else "Non"),
        ("Alt√©rations FGFR2/3", "Oui" if fgfr_alt else "Non"),
        ("Platines d√©j√† re√ßus", "Oui" if prior_platinum else "Non"),
        ("Immunoth√©rapie d√©j√† re√ßue", "Oui" if prior_io else "Non"),
        ("Choix 1L Cis-Gem-Nivo", "Oui" if use_cis_gem_nivo else "Non"),
    ]

    options = []
    idx = 1
    notes = []

    # Cas o√π le patient n'est pas na√Øf de platine (par ex. rechute post-chimio ant√©rieure)
    if not platinum_naif:
        if not prior_io:
            options.append(f"Option {idx} : Pembrolizumab (si IO non re√ßue)."); idx += 1
        options.append(f"Option {idx} : Enfortumab v√©dotin (EV)."); idx += 1
        if fgfr_alt:
            options.append(f"Option {idx} : Erdafitinib (si alt√©ration FGFR2/3)."); idx += 1
        notes.append("S√©quence ult√©rieure selon r√©ponses et tol√©rance; envisager essais cliniques.")
    else:
        # Vrai 1re ligne
        if ev_pembro_eligible:
            # 1L pr√©f√©rentielle
            options.append(f"Option {idx} : 1L ‚Äî Enfortumab v√©dotin + Pembrolizumab (pr√©f√©rentiel)."); idx += 1
            # 2L / 3L selon progression
            options.append(f"Option {idx} : 2L ‚Äî Platine + Gemcitabine (cis si √©ligible, sinon carbo)."); idx += 1
            if fgfr_alt:
                options.append(f"Option {idx} : 2L/3L ‚Äî Erdafitinib (si FGFR2/3 alt√©r√©)."); idx += 1
            options.append(f"Option {idx} : 3L ‚Äî EV (si strat√©gie monoth√©rapie envisageable) ou autre s√©quence selon tol√©rance."); idx += 1

        else:
            # Non √©ligible EV+Pembro ‚Üí deux branches possibles
            if use_cis_gem_nivo and cis_eligible:
                # Triplet CheckMate-901
                options.append(f"Option {idx} : 1L ‚Äî Cisplatine + Gemcitabine + Nivolumab."); idx += 1
                options.append(f"Option {idx} : 2L ‚Äî Enfortumab v√©dotin (EV)."); idx += 1
                if fgfr_alt:
                    options.append(f"Option {idx} : Ligne d√©di√©e ‚Äî Erdafitinib (si FGFR2/3 alt√©r√©)."); idx += 1
            else:
                # 1L platine-gem conventionnelle avec maintenance avelumab si contr√¥le
                if cis_eligible:
                    options.append(f"Option {idx} : 1L ‚Äî Gemcitabine + Cisplatine."); idx += 1
                elif carbo_eligible:
                    options.append(f"Option {idx} : 1L ‚Äî Gemcitabine + Carboplatine."); idx += 1
                else:
                    options.append(f"Option {idx} : 1L ‚Äî (si aucun platine) discuter alternatives/essai clinique."); idx += 1

                options.append(f"Option {idx} : Contr√¥le apr√®s 4‚Äì6 cycles ‚Äî TDM TAP."); idx += 1
                options.append(f"Option {idx} : Maintenance ‚Äî Avelumab si maladie contr√¥l√©e (RC/PR/SD) apr√®s 4‚Äì6 cycles."); idx += 1
                options.append(f"Option {idx} : 2L ‚Äî Pembrolizumab en cas de progression sous/√† l‚Äôissue de chimio."); idx += 1
                options.append(f"Option {idx} : 2L/3L ‚Äî Enfortumab v√©dotin (EV) en cas de progression apr√®s IO."); idx += 1
                if fgfr_alt:
                    options.append(f"Option {idx} : Ligne d√©di√©e ‚Äî Erdafitinib (si FGFR2/3 alt√©r√©)."); idx += 1

    # Suivi d√©taill√© (communs aux sch√©mas)
    suivi = [
        "√âvaluation d‚Äôefficacit√©: TDM TAP toutes 8‚Äì12 semaines (au d√©marrage), puis adapter selon r√©ponse/clinique.",
        "Si 1L platine-gem: TDM TAP apr√®s 4‚Äì6 cycles pour d√©cider maintenance Avelumab ou bascule 2L.",
        "Biologie r√©currente: NFS, cr√©at/DFG, bilan h√©patique; glyc√©mie (EV), phosphat√©mie et bilan ophtalmo (FGFRi), TSH ¬± enzymes pancr√©atiques (IO).",
        "Toxicit√©s √† surveiller: EV (√©ruption cutan√©e, neuropathie, hyperglyc√©mie); IO (dermatites, colite, pneumonite, endocrinopathies); FGFRi (hyperphosphat√©mie, toxicit√© oculaire).",
        "Soins de support: prise en charge douleur, di√©t√©tique, activit√© adapt√©e; √©valuation g√©riatrique si besoin.",
    ]

    return {
        "donnees": donnees,
        "traitement": options,
        "suivi": suivi,
        "notes": notes,
    }
# =========================
# LOGIQUE CLINIQUE ‚Äî LITHIASE (MAJ: hygi√®ne, antalgie si douleur, options chir pr√©cises)
# =========================

def classer_cn_severite(fievre: bool, hyperalgique: bool, oligoanurie: bool, doute_diag: bool) -> str:
    """Retourne 'compliqu√©e' si au moins un crit√®re de gravit√©, sinon 'simple'."""
    if fievre or hyperalgique or oligoanurie or doute_diag:
        return "compliqu√©e"
    return "simple"


def choix_technique_selon_calcul(localisation: str, taille_mm: int, grossesse: bool, anticoag: bool):
    """
    Propose des options proc√©durales libell√©es pr√©cis√©ment :
    - LEC/ESWL
    - URS semi-rigide (ur√©t√©ral)
    - URS souple/flexible (r√©nal ¬± ur√©t√©ral)
    - Mini-perc (mini-PCNL)
    - NLPC / PCNL
    Avec prise en compte de CI usuelles: grossesse, troubles h√©mostase/anticoagulants non corrig√©s.
    """
    options = []
    i = 1
    eswl_possible = (not grossesse) and (not anticoag)

    is_ureter = localisation.startswith("Uret√®re")

    if is_ureter:
        # Ur√©t√©ral <10 mm : ESWL privil√©gi√©e, URS semi-rigide en alternative
        if taille_mm < 10:
            if eswl_possible:
                options.append(f"Option {i} : traitement chirurgical ‚Äî LEC/ESWL (uret√®re < 10 mm)."); i += 1
            options.append(f"Option {i} : traitement chirurgical ‚Äî URS semi-rigide (ur√©t√©ral < 10 mm)."); i += 1
        else:
            # Ur√©t√©ral ‚â•10 mm : URS semi-rigide en 1re intention ; ESWL discut√©e
            options.append(f"Option {i} : traitement chirurgical ‚Äî URS semi-rigide (uret√®re ‚â• 10 mm)."); i += 1
            if eswl_possible:
                options.append(f"Option {i} : traitement chirurgical ‚Äî LEC/ESWL (au cas par cas selon densit√©/position)."); i += 1
        # URS souple/flexible si besoin d'acc√®s proximal/complexe
        options.append(f"Option {i} : traitement chirurgical ‚Äî URS souple/flexible (si localisation haute/acc√®s difficile)."); i += 1
    else:
        # R√©nal (intracavicitaire)
        if taille_mm < 20:
            if eswl_possible:
                options.append(f"Option {i} : traitement chirurgical ‚Äî LEC/ESWL (r√©nal < 20 mm)."); i += 1
            options.append(f"Option {i} : traitement chirurgical ‚Äî URS souple/flexible (r√©nal < 20 mm, p√¥le inf√©rieur inclus)."); i += 1
            # Mini-perc possible pour calcul r√©nal 10‚Äì20 mm denses/anatomie d√©favorable
            if taille_mm >= 10:
                options.append(f"Option {i} : traitement chirurgical ‚Äî Mini-perc (mini-PCNL) (r√©nal 10‚Äì20 mm denses ou anatomie d√©favorable)."); i += 1
        else:
            # ‚â•20 mm : PCNL/NLPC de r√©f√©rence ; mini-perc si charge mod√©r√©e et morphologie favorable
            options.append(f"Option {i} : traitement chirurgical ‚Äî NLPC / PCNL (‚â• 20 mm, coralliformes)."); i += 1
            options.append(f"Option {i} : traitement chirurgical ‚Äî Mini-perc (mini-PCNL) (s√©lectionn√© selon charge et morphologie)."); i += 1

    # Contre-indications/notes g√©n√©rales
    if grossesse:
        options.append("Note : Grossesse ‚Üí ESWL contre-indiqu√©e.")
    if anticoag:
        options.append("Note : Anticoagulants/troubles de l‚Äôh√©mostase non corrig√©s ‚Üí corriger avant geste endoscopique/ESWL.")

    return options


def plan_lithiase(
    fievre: bool,
    hyperalgique: bool,
    oligoanurie: bool,
    doute_diag: bool,
    grossesse: bool,
    anticoag: bool,
    localisation: str,      # "Uret√®re distal/moyen/proximal" ou "Rein (intracavicitaire)"
    taille_mm: int | None,  # None si inconnue
    douleur_actuelle: bool  # ‚Üê NOUVEAU: pour d√©cider si on prescrit antalgie
):
    """
    Retourne dict {donnees, traitement, hygiene, notes}
    - Met en avant drainage initial si forme compliqu√©e
    - Antalgie seulement si douleur_actuelle = True
    - Remplace 'suivi' par 'hygiene' (r√®gles hygi√©no-di√©t√©tiques)
    """
    severite = classer_cn_severite(fievre, hyperalgique, oligoanurie, doute_diag)

    donnees = [
        ("Forme", severite),
        ("Fi√®vre/infection", "Oui" if fievre else "Non"),
        ("Douleur hyperalgique", "Oui" if hyperalgique else "Non"),
        ("Oligo-anurie / IR", "Oui" if oligoanurie else "Non"),
        ("Doute diagnostique", "Oui" if doute_diag else "Non"),
        ("Douleur actuelle", "Oui" if douleur_actuelle else "Non"),
        ("Grossesse", "Oui" if grossesse else "Non"),
        ("Anticoagulants/troubles h√©mostase non corrig√©s", "Oui" if anticoag else "Non"),
        ("Localisation du calcul", localisation),
        ("Taille estim√©e", f"{taille_mm} mm" if isinstance(taille_mm, (int, float)) else "Inconnue"),
    ]

    options = []
    notes = []
    i = 1

    # 1) Urgences / imagerie / drainage
    if severite == "compliqu√©e":
        # Imagerie urgente
        if grossesse:
            options.append(f"Option {i} : imagerie ‚Äî √âchographie ¬± ASP en premi√®re intention (grossesse)."); i += 1
        else:
            options.append(f"Option {i} : imagerie ‚Äî TDM abdomino-pelvienne sans injection en URGENCE."); i += 1

        # Drainage initial en urgence (mettre bien en √©vidence)
        options.append(f"Option {i} : drainage initial en urgence ‚Äî sonde JJ **ou** n√©phrostomie percutan√©e (obstacle infect√©/anurie/hyperalgie)."); i += 1

        # ATB si fi√®vre/infection (adaptation secondaire)
        if fievre:
            options.append(f"Option {i} : antibioth√©rapie probabiliste puis adapt√©e √† l‚ÄôECBU (si infection associ√©e)."); i += 1

        # Antalgie seulement si douleur
        if douleur_actuelle:
            options.append(f"Option {i} : antalgie ‚Äî AINS IV (ex. k√©toprof√®ne) ¬± paliers sup√©rieurs si besoin, anti√©m√©tiques."); i += 1

        # Notes de CI
        if grossesse:
            notes.append("Grossesse : ESWL contre-indiqu√©e.")
        if anticoag:
            notes.append("Anticoagulants/troubles de l‚Äôh√©mostase non corrig√©s : corriger avant tout geste.")
        notes.append("Le traitement lithiasique d√©finitif est diff√©r√© apr√®s contr√¥le de l‚Äôinfection et lev√©e de l‚Äôobstacle.")
    else:
        # 2) Forme simple ‚Äî options selon taille/localisation
        if taille_mm is not None:
            options += choix_technique_selon_calcul(localisation, taille_mm, grossesse, anticoag)
        else:
            # Taille inconnue ‚Üí affiner par imagerie hors grossesse TDM, en grossesse √©cho/ASP
            if grossesse:
                options.append(f"Option {i} : imagerie ‚Äî √âchographie ¬± ASP pour pr√©ciser taille/localisation."); i += 1
            else:
                options.append(f"Option {i} : imagerie ‚Äî TDM sans injection pour pr√©ciser taille/densit√©/localisation."); i += 1

        # Antalgie seulement si douleur
        if douleur_actuelle:
            options.append(f"Option {i} : antalgie ‚Äî AINS ¬± morphiniques si besoin, anti√©m√©tiques."); i += 1

        # Notes CI
        if grossesse:
            notes.append("Grossesse : ESWL contre-indiqu√©e.")
        if anticoag:
            notes.append("Anticoagulants/troubles de l‚Äôh√©mostase non corrig√©s : prudence et correction avant geste.")

    # 3) Hygi√®ne-di√©t√©tique (remplace 'suivi')
    hygiene = [
        "Hydratation : viser ‚â• 2 litres/j (adapter si insuffisance cardiaque/r√©nale).",
        "R√©duire le sel (‚âà6‚Äì7 g/j) et mod√©rer les prot√©ines animales (<1 g/kg/j).",
        "Limiter sucres rapides et aliments riches en oxalates si lithiase oxalo-calcique suspect√©e.",
        "Activit√© physique r√©guli√®re, √©viter l‚Äôimmobilisation prolong√©e.",
        "√Ä distance : bilan m√©tabolique et **adaptation des apports** selon le type de lithiase (si identifi√©).",
    ]

    # 4) Notes g√©n√©rales
    notes.append("Tout calcul extrait doit √™tre adress√© pour **√©tude spectrom√©trique** (analyse morpho-constitutionnelle).")

    return {"donnees": donnees, "traitement": options, "hygiene": hygiene, "notes": notes}


# =========================
# LOGIQUE CLINIQUE ‚Äî INFECTIO (Grossesse, Cystite, PNA, Prostatite)
# =========================

def _flags_severite(seps_sbp_lt90: bool, seps_hr_gt120: bool, confusion: bool, vomissements: bool, obstruction_suspecte: bool):
    """Retourne (est_grave: bool, raisons: list[str])"""
    raisons = []
    if seps_sbp_lt90: raisons.append("Hypotension (sepsis/choc)")
    if seps_hr_gt120: raisons.append("Tachycardie >120/min")
    if confusion: raisons.append("Troubles neuro (confusion)")
    if vomissements: raisons.append("Vomissements emp√™chant la voie orale")
    if obstruction_suspecte: raisons.append("Obstacle/suspicion de colique ou anurie")
    grave = bool(seps_sbp_lt90 or seps_hr_gt120 or confusion or obstruction_suspecte or vomissements)
    return grave, raisons


def _is_risque_complication(
    homme: bool=False, grossesse: bool=False, age_ge65_fragile: bool=False, anomalies_uro: bool=False,
    immunodep: bool=False, irc_significative: bool=False, sonde: bool=False, diabete_non_controle: bool=False
):
    """Facteurs de risque de complication (hors gravit√©)"""
    return any([homme, grossesse, age_ge65_fragile, anomalies_uro, immunodep, irc_significative, sonde, diabete_non_controle])


# ---------- CYSTITE (plut√¥t femme, hors grossesse) ----------

def plan_cystite(
    age: int,
    fievre_ge_38_5: bool,
    lombalgies: bool,
    douleurs_intenses: bool,
    hematurie: bool,
    recidivante: bool,
    homme: bool,
    grossesse: bool,
    age_ge65_fragile: bool,
    anomalies_uro: bool,
    immunodep: bool,
    irc_significative: bool,
    sonde: bool,
    diabete_non_controle: bool,
    seps_sbp_lt90: bool,
    seps_hr_gt120: bool,
    confusion: bool,
    vomissements: bool,
):
    """
    Classe: simple / √† risque de complication / grave (suspicion py√©lo ou sepsis).
    """
    donnees = [
        ("√Çge", f"{age} ans"),
        ("Fi√®vre ‚â• 38,5¬∞C", "Oui" if fievre_ge_38_5 else "Non"),
        ("Douleur lombaire", "Oui" if lombalgies else "Non"),
        ("Douleur intense", "Oui" if douleurs_intenses else "Non"),
        ("H√©maturie", "Oui" if hematurie else "Non"),
        ("R√©cidivante", "Oui" if recidivante else "Non"),
        ("Sexe masculin", "Oui" if homme else "Non"),
        ("Grossesse", "Oui" if grossesse else "Non"),
        ("‚â•65 ans fragile", "Oui" if age_ge65_fragile else "Non"),
        ("Anomalies uro/obstacle", "Oui" if anomalies_uro else "Non"),
        ("Immunod√©pression", "Oui" if immunodep else "Non"),
        ("IR chronique significative", "Oui" if irc_significative else "Non"),
        ("Sonde urinaire", "Oui" if sonde else "Non"),
        ("Diab√®te non contr√¥l√©", "Oui" if diabete_non_controle else "Non"),
    ]
    obstruction_suspecte = anomalies_uro
    grave, raisons_grav = _flags_severite(seps_sbp_lt90, seps_hr_gt120, confusion, vomissements, obstruction_suspecte)

    # Py√©lo suspect√©e si fi√®vre/lombalgies/douleurs importantes ‚Üí bascule vers prise en charge PNA
    suspicion_pyelo = fievre_ge_38_5 or lombalgies or douleurs_intenses

    risque = "Grave" if grave or suspicion_pyelo else ("√Ä risque de complication" if _is_risque_complication(
        homme, grossesse, age_ge65_fragile, anomalies_uro, immunodep, irc_significative, sonde, diabete_non_controle
    ) else "Simple")

    classification = [("Cat√©gorie", risque)]
    if grave or suspicion_pyelo:
        classification.append(("Arguments de gravit√©/suspicion PNA", ", ".join(raisons_grav) if raisons_grav else "Fi√®vre/douleur lombaire"))

    options = []
    idx = 1
    notes = []
    suivi = []

    # Conduites + probabiliste
    if risque == "Simple":
        options.append(f"Option {idx} : Probabiliste ‚Äî Fosfomycine-trom√©tamol (dose unique)."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî Pivm√©cillinam (5‚Äì7 jours)."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî Nitrofuranto√Øne (5 jours)."); idx += 1
        options.append(f"Option {idx} : Alternative ‚Äî Fluoroquinolone courte (si alternatives inadapt√©es/locales)."); idx += 1

        suivi = [
            "ECBU non syst√©matique si √©volution typique; reconsulter si non am√©lioration en 48‚Äì72 h.",
            "Si non am√©lioration 48‚Äì72 h : r√©aliser ECBU, r√©√©valuer diagnostic, envisager √©cho r√©nale (¬± uro-TDM si fi√®vre/douleurs).",
            "Si r√©cidivantes : mesures hygi√©no-di√©t√©tiques; ECBU √† chaque √©pisode pour diff√©rencier rechute/reinfection.",
        ]

    elif risque == "√Ä risque de complication":
        options.append(f"Option {idx} : ECBU avant ATB si possible, puis Probabiliste ‚Äî Nitrofuranto√Øne (7 jours)."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî C√©fixime (5‚Äì7 jours) selon √©co locale."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî Fluoroquinolone (‚âà5 jours) si alternatives inadapt√©es."); idx += 1

        suivi = [
            "ECBU syst√©matique AVANT antibioth√©rapie si possible; adapter au r√©sultat sous 48‚Äì72 h.",
            "Si non am√©lioration 48‚Äì72 h : contr√¥le ECBU, v√©rifier observance et interactions; imagerie si fi√®vre/douleur (√©cho ¬± uro-TDM).",
        ]
        notes.append("√âviter fosfomycine/nitrofuranto√Øne chez l‚Äôhomme (pr√©f√©rer prostatite : voir module d√©di√©).")

    else:  # Grave
        options.append(f"Option {idx} : Suspect PNA/sepsis ‚Üí bascule vers protocole PNA (voir rubrique PNA)."); idx += 1
        options.append(f"Option {idx} : Hospitalisation si signes de sepsis/choc, vomissements, ou obstacle suspect."); idx += 1
        suivi = [
            "ECBU + h√©mocultures avant ATB; antibioth√©rapie IV probabiliste; imagerie (uro-TDM ‚â§24 h) si douleur/fi√®vre prolong√©e/obstacle.",
        ]

    # √âtapes communes
    if risque != "Simple":
        notes.append("Toujours adapter l‚Äôantibioth√©rapie √† l‚Äôantibiogramme (48‚Äì72 h).")
    return {"donnees": donnees, "classification": classification, "traitement": options, "suivi": suivi, "notes": notes}


# ---------- PY√âLON√âPHRITE AIGU√ã (PNA) ----------

def plan_pna(
    fievre_ge_38_5: bool,
    douleur_lombaire: bool,
    vomissements: bool,
    homme: bool,
    grossesse: bool,
    age_ge65_fragile: bool,
    anomalies_uro: bool,
    immunodep: bool,
    irc_significative: bool,
    sonde: bool,
    diabete_non_controle: bool,
    seps_sbp_lt90: bool,
    seps_hr_gt120: bool,
    confusion: bool,
):
    donnees = [
        ("Fi√®vre ‚â• 38,5¬∞C", "Oui" if fievre_ge_38_5 else "Non"),
        ("Douleur lombaire", "Oui" if douleur_lombaire else "Non"),
        ("Vomissements", "Oui" if vomissements else "Non"),
        ("Sexe masculin", "Oui" if homme else "Non"),
        ("Grossesse", "Oui" if grossesse else "Non"),
        ("‚â•65 ans fragile", "Oui" if age_ge65_fragile else "Non"),
        ("Anomalies uro/obstacle", "Oui" if anomalies_uro else "Non"),
        ("Immunod√©pression", "Oui" if immunodep else "Non"),
        ("IR chronique significative", "Oui" if irc_significative else "Non"),
        ("Sonde urinaire", "Oui" if sonde else "Non"),
        ("Diab√®te non contr√¥l√©", "Oui" if diabete_non_controle else "Non"),
    ]
    obstruction_suspecte = anomalies_uro
    grave, raisons_grav = _flags_severite(seps_sbp_lt90, seps_hr_gt120, confusion, vomissements, obstruction_suspecte)

    if grave:
        categorie = "Grave"
    else:
        categorie = "√Ä risque de complication" if _is_risque_complication(
            homme, grossesse, age_ge65_fragile, anomalies_uro, immunodep, irc_significative, sonde, diabete_non_controle
        ) else "Simple"

    classification = [("Cat√©gorie", categorie)]
    if raisons_grav:
        classification.append(("Crit√®res de gravit√©", ", ".join(raisons_grav)))

    options = []
    idx = 1
    notes = []
    suivi = []

    # Probabiliste par cat√©gorie
    if categorie == "Simple":
        options.append(f"Option {idx} : Probabiliste ‚Äî Fluoroquinolone per os (si √©pid√©miologie locale favorable)."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî C3G (ex. ceftriaxone) dose initiale IV/IM puis relais per os."); idx += 1
        options.append(f"Option {idx} : Alternative ‚Äî B√™ta-lactamine parent√©rale en relais PO (dur√©e totale 7‚Äì10 jours)."); idx += 1

        suivi = [
            "ECBU syst√©matique (avant ATB si possible).",
            "R√©√©valuation clinique/biologique √† 48‚Äì72 h; adapter √† l‚Äôantibiogramme.",
            "Imagerie non syst√©matique au d√©part; r√©aliser une √©cho si douleur inhabituelle, calcul connu, ou si non am√©lioration 48‚Äì72 h.",
        ]

    elif categorie == "√Ä risque de complication":
        options.append(f"Option {idx} : Probabiliste ‚Äî C3G IV (ex. cefotaxime/ceftriaxone) ¬± amikacine selon gravit√© locale."); idx += 1
        options.append(f"Option {idx} : Alternative ‚Äî BLSE suspect√© : carbap√©n√®me ¬± amikacine."); idx += 1

        suivi = [
            "ECBU + h√©mocultures avant ATB; imagerie uro-TDM ‚â§24 h si douleur s√©v√®re, fi√®vre persistante, ou obstacle suspect.",
            "R√©√©valuation √† 48‚Äì72 h : adapter ATB; relais per os d√®s apyrexie/prise orale possible; dur√©e 10‚Äì14 jours (selon mol√©cule).",
        ]

    else:  # Grave
        options.append(f"Option {idx} : Hospitalisation d‚Äôembl√©e."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî C3G IV + amikacine; si BLSE suspect√© ‚Üí carbap√©n√®me + amikacine."); idx += 1
        options.append(f"Option {idx} : Drainage urgent si obstacle (JJ/n√©phrostomie) apr√®s avis urologique."); idx += 1

        suivi = [
            "ECBU + h√©mocultures; bilan biologique complet.",
            "Uro-TDM en urgence si obstacle suspect√©; sinon ‚â§24 h si √©tat s√©v√®re persistant.",
            "R√©√©valuation 24‚Äì48 h : adapter; surveillance rapproch√©e (PA/FC/SpO2/diur√®se).",
        ]

    notes.append("Adapter syst√©matiquement au r√©sultat de l‚Äôantibiogramme (48‚Äì72 h).")
    return {"donnees": donnees, "classification": classification, "traitement": options, "suivi": suivi, "notes": notes}


# ---------- GROSSESSE (bact√©riurie, cystite, PNA) ----------

def plan_grossesse(
    type_tableau: str,  # "Bact√©riurie asymptomatique", "Cystite", "PNA"
    terme_9e_mois: bool,
    allergies_betalactamines: bool,
    seps_sbp_lt90: bool,
    seps_hr_gt120: bool,
    vomissements: bool,
):
    donnees = [
        ("Tableau", type_tableau),
        ("9e mois (nitrofuranto√Øne √† √©viter)", "Oui" if terme_9e_mois else "Non"),
        ("Allergie b√™ta-lactamines", "Oui" if allergies_betalactamines else "Non"),
    ]
    grave, raisons_grav = _flags_severite(seps_sbp_lt90, seps_hr_gt120, False, vomissements, False)

    options = []
    idx = 1
    suivi = []
    notes = []

    if type_tableau in ("Bact√©riurie asymptomatique", "Cystite"):
        # Toujours √† risque (grossesse) mais hors gravit√©
        options.append(f"Option {idx} : Probabiliste ‚Äî Amoxicilline / Pivm√©cillinam / Fosfomycine (dose unique) / C√©fixime (selon contexte local)."); idx += 1
        if not terme_9e_mois:
            options.append(f"Option {idx} : Alternative ‚Äî Nitrofuranto√Øne (√©viter au 9e mois)."); idx += 1
        options.append(f"Option {idx} : Alternative ‚Äî Trim√©thoprime (√† partir du 2e trimestre) si autres CI."); idx += 1

        suivi = [
            "ECBU AVANT traitement; contr√¥le ECBU 48 h apr√®s d√©but si sympt√¥mes persistants; ECBU de contr√¥le 8‚Äì10 jours apr√®s fin du traitement.",
            "D√©pistage mensuel ult√©rieur de la bact√©riurie pendant la grossesse.",
            "Si non am√©lioration √† 48‚Äì72 h : r√©√©valuer, refaire ECBU, envisager √©cho r√©nale.",
        ]

    else:  # PNA gravidique
        options.append(f"Option {idx} : Hospitalisation d‚Äôembl√©e."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî C3G IV (ex. ceftriaxone) ¬± amikacine selon gravit√©."); idx += 1
        options.append(f"Option {idx} : Alternative ‚Äî Selon allergie BL, discuter aztr√©onam ¬± aminoside (avis sp√©cialis√©)."); idx += 1

        suivi = [
            "ECBU + h√©mocultures avant ATB; surveillance obst√©tricale.",
            "Imagerie en cas de non r√©ponse 48‚Äì72 h ou douleur atypique (√©cho; uro-TDM si indispensable).",
            "Dur√©e minimale 14 jours; relais per os d√®s que possible; ECBU de contr√¥le √† 8‚Äì10 jours apr√®s fin.",
        ]

    if grave:
        notes.append("Signes de gravit√© (ex. sepsis, vomissements) ‚Üí hospitalisation et traitement IV.")
    notes.append("Adapter syst√©matiquement √† l‚Äôantibiogramme (48‚Äì72 h).")
    return {"donnees": donnees, "classification": [("Gravit√©", "Oui" if grave else "Non")], "traitement": options, "suivi": suivi, "notes": notes}


# ---------- HOMME ‚Äî PROSTATITE AIGU√ã (IU masculine) ----------

def plan_prostatite(
    fievre_ge_38_5: bool,
    douleurs_perineales: bool,
    dysurie: bool,
    retention: bool,
    post_biopsie_prostate: bool,
    immunodep: bool,
    irc_significative: bool,
    seps_sbp_lt90: bool,
    seps_hr_gt120: bool,
    confusion: bool,
):
    donnees = [
        ("Fi√®vre ‚â• 38,5¬∞C", "Oui" if fievre_ge_38_5 else "Non"),
        ("Douleurs p√©rin√©ales", "Oui" if douleurs_perineales else "Non"),
        ("Dysurie", "Oui" if dysurie else "Non"),
        ("R√©tention aigu√´", "Oui" if retention else "Non"),
        ("Contexte post-biopsie", "Oui" if post_biopsie_prostate else "Non"),
        ("Immunod√©pression", "Oui" if immunodep else "Non"),
        ("IR chronique significative", "Oui" if irc_significative else "Non"),
    ]
    obstruction_suspecte = retention
    grave, raisons_grav = _flags_severite(seps_sbp_lt90, seps_hr_gt120, confusion, False, obstruction_suspecte)

    # Toute IU masculine = √† risque; grave si sepsis/retention/post-biopsie f√©brile
    categorie = "Grave" if grave or post_biopsie_prostate else "√Ä risque de complication"

    classification = [("Cat√©gorie", categorie)]
    if raisons_grav or post_biopsie_prostate:
        r = raisons_grav.copy()
        if post_biopsie_prostate: r.append("Contexte post-biopsie")
        classification.append(("Crit√®res", ", ".join(r)))

    options = []
    idx = 1
    notes = []
    suivi = []

    if categorie == "√Ä risque de complication":
        options.append(f"Option {idx} : Probabiliste ‚Äî Fluoroquinolone (bonne diffusion prostatique) **ou** TMP-SMX (relais document√©)."); idx += 1
        options.append(f"Option {idx} : Alternative ‚Äî Dose initiale C3G (ceftriaxone) puis relais per os (FQ/TMP-SMX) selon ATBgramme."); idx += 1

        suivi = [
            "ECBU syst√©matique (avant ATB si possible) ¬± h√©mocultures si fi√®vre.",
            "R√©√©valuation 48‚Äì72 h; adapter √† l‚Äôantibiogramme; dur√©e totale ‚â•14 jours (souvent 14‚Äì21 jours).",
            "√âviter nitrofuranto√Øne, fosfomycine, amoxicilline+acide clavulanique, c√©fixime (diffusion prostatique insuffisante).",
        ]

    else:  # Grave ou post-biopsie
        options.append(f"Option {idx} : Hospitalisation/prise en charge rapproch√©e."); idx += 1
        options.append(f"Option {idx} : Probabiliste ‚Äî C3G IV + amikacine; relais per os par FQ/TMP-SMX d√®s am√©lioration."); idx += 1
        if post_biopsie_prostate:
            options.append(f"Option {idx} : Contexte post-biopsie ‚Äî Bi-antibioth√©rapie IV d‚Äôembl√©e (C3G + aminoside)."); idx += 1
        if retention:
            options.append(f"Option {idx} : Drainage v√©sical (sondage sus-pubien privil√©gi√©) apr√®s avis."); idx += 1

        suivi = [
            "ECBU + h√©mocultures; bilan biologique.",
            "√âchographie si r√©tention/douleur; uro-TDM si √©volution d√©favorable.",
            "R√©√©valuation 24‚Äì48 h; adapter ATB; dur√©e totale 14‚Äì21 jours.",
        ]

    notes.append("Adapter syst√©matiquement au r√©sultat de l‚Äôantibiogramme (48‚Äì72 h).")
    return {"donnees": donnees, "classification": classification, "traitement": options, "suivi": suivi, "notes": notes}

# =========================
# PAGES (UI)
# =========================

def render_home():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")


def render_vessie_menu():
    btn_home_and_back()
    st.markdown("## Tumeur de la vessie")
    st.caption("Choisissez le sous-module")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.button("TVNIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVNIM"))
    with c2:
        st.button("TVIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVIM"))
    with c3:
        st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Vessie: M√©tastatique"))


def render_tvnim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVNIM (tumeur n‚Äôinfiltrant pas le muscle)")
    with st.form("tvnim_form"):
        stade = st.selectbox("Stade tumoral", ["pTa", "pT1"])
        grade = st.selectbox("Grade tumoral", ["Bas grade", "Haut grade"])
        taille = st.slider("Taille maximale (mm)", 1, 100, 10)
        nombre = st.selectbox("Nombre de tumeurs", ["Unique", "Multiple", "Papillomatose v√©sicale"])
        cis_associe = lvi = urethre_prostatique = formes_agressives = False
        if stade == "pT1" and grade == "Haut grade":
            st.markdown("#### Facteurs aggravants (pT1 haut grade) ‚Äî cochez s‚Äôils sont pr√©sents")
            c1, c2 = st.columns(2)
            with c1:
                cis_associe = st.checkbox("CIS associ√©")
                lvi = st.checkbox("Envahissement lymphovasculaire (LVI)")
            with c2:
                urethre_prostatique = st.checkbox("Atteinte de l‚Äôur√®tre prostatique")
                formes_agressives = st.checkbox("Formes anatomo-pathologiques agressives")
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT")
    if submitted:
        risque = stratifier_tvnim(stade, grade, taille, nombre, cis_associe, lvi, urethre_prostatique, formes_agressives)
        traitement, suivi, protocoles, notes_second_look = plan_tvnim(risque)
        donnees_pairs = [
            ("Stade", stade), ("Grade", grade), ("Taille maximale", f"{taille} mm"), ("Nombre", nombre)
        ]
        if stade == "pT1" and grade == "Haut grade":
            if cis_associe: donnees_pairs.append(("CIS associ√©", "Oui"))
            if lvi: donnees_pairs.append(("LVI", "Oui"))
            if urethre_prostatique: donnees_pairs.append(("Atteinte ur√®tre prostatique", "Oui"))
            if formes_agressives: donnees_pairs.append(("Formes anatomo-path. agressives", "Oui"))
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        render_kv_table("üìä Stratification", [("Risque estim√©", risque.upper())], "√âl√©ment", "R√©sultat")
        st.markdown("### üíä Traitement recommand√©")
        for t in traitement: st.markdown("- " + t)
        if protocoles:
            st.markdown("### üì¶ Sch√©mas BCG (sans dose)")
            for p in protocoles: st.markdown("- " + p)
        st.markdown("### üìÖ Modalit√©s de suivi")
        for s in suivi: st.markdown("- " + s)
        st.markdown("### üìù RTUV de second look ‚Äî rappels")
        for n in notes_second_look: st.markdown("- " + n)
        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in donnees_pairs],
            "Stratification": [f"Risque estim√© : {risque.upper()}"],
            "Traitement recommand√©": traitement + (["Sch√©mas BCG :"] + protocoles if protocoles else []),
            "Modalit√©s de suivi": suivi,
            "Rappels second look": notes_second_look,
        }
        report_text = build_report_text("CAT TVNIM", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_TVNIM")


def render_tvim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVIM (tumeur infiltrant le muscle)")
    with st.form("tvim_form"):
        t_cat = st.selectbox("T (clinique)", ["T2", "T3", "T4a"])
        cN_pos = st.radio("Atteinte ganglionnaire clinique (cN+) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        metastases = st.radio("M√©tastases √† distance ?", ["Non", "Oui"], horizontal=True) == "Oui"
        st.markdown("#### √âligibilit√©s & contexte")
        cis_eligible = st.radio("√âligible Cisplatine (PS 0‚Äì1, DFG ‚â•50‚Äì60‚Ä¶)?", ["Oui", "Non"], horizontal=True) == "Oui"
        hydron = st.radio("Hydron√©phrose ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bonne_fct_v = st.radio("Bonne fonction v√©sicale ?", ["Oui", "Non"], horizontal=True) == "Oui"
        cis_diffus = st.radio("CIS diffus ?", ["Non", "Oui"], horizontal=True) == "Oui"
        post_op_high_risk = st.radio("pT3‚Äì4 et/ou pN+ attendu/identifi√© ?", ["Non", "Oui"], horizontal=True) == "Oui"
        neo_adjuvant_fait = st.radio("N√©oadjuvant d√©j√† r√©alis√© ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì TVIM")
    if submitted:
        plan = plan_tvim(
            t_cat, cN_pos, metastases, cis_eligible, hydron,
            bonne_fct_v, cis_diffus, post_op_high_risk, neo_adjuvant_fait
        )
        donnees_pairs = [
            ("T", t_cat), ("cN+", "Oui" if cN_pos else "Non"), ("M√©tastases", "Oui" if metastases else "Non"),
            ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"),
            ("Hydron√©phrose", "Oui" if hydron else "Non"),
            ("Bonne fonction v√©sicale", "Oui" if bonne_fct_v else "Non"),
            ("CIS diffus", "Oui" if cis_diffus else "Non"),
            ("pT3‚Äì4/pN+ attendu/identifi√©", "Oui" if post_op_high_risk else "Non"),
            ("NAC d√©j√† faite", "Oui" if neo_adjuvant_fait else "Non"),
        ]
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)

        st.markdown("### üíä Traitement recommand√©")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["surveillance"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es":[f"{k}: {v}" for k,v in donnees_pairs],
            "Traitement recommand√©": plan["traitement"],
            "Modalit√©s de suivi": plan["surveillance"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT TVIM", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_TVIM")



def render_vessie_meta_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ Tumeur de la vessie m√©tastatique")
    with st.form("meta_form"):
        st.markdown("#### Contexte & √©ligibilit√©")
        platinum_naive = st.radio("Jamais trait√© par platine (1re ligne) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        cis_eligible = st.radio("√âligible Cisplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
        carbo_eligible = st.radio("√âligible Carboplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
        pdl1_pos = st.radio("PD-L1 positif (si dispo) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_platinum = st.radio("A d√©j√† re√ßu un platine ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_cpi = st.radio("A d√©j√† re√ßu une immunoth√©rapie (CPI) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bone_mets = st.radio("M√©tastases osseuses ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì M√©tastatique")
    if submitted:
        plan = plan_meta(cis_eligible, carbo_eligible, platinum_naive, pdl1_pos, prior_platinum, prior_cpi, bone_mets)
        donnees_pairs = [
            ("1re ligne (na√Øf platine)", "Oui" if platinum_naive else "Non"),
            ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"),
            ("√âligible Carboplatine", "Oui" if carbo_eligible else "Non"),
            ("PD-L1 positif", "Oui" if pdl1_pos else "Non"),
            ("Platines re√ßus", "Oui" if prior_platinum else "Non"),
            ("CPI re√ßu", "Oui" if prior_cpi else "Non"),
            ("M√©tastases osseuses", "Oui" if bone_mets else "Non"),
        ]
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)

        st.markdown("### üíä Traitement recommand√©")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es":[f"{k}: {v}" for k,v in donnees_pairs],
            "Traitement recommand√©": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Vessie M√©tastatique", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_Vessie_Metastatique")


def render_tves_menu():
    btn_home_and_back()
    st.markdown("## Tumeurs des voies excr√©trices")
    st.caption("Choisissez le sous-module")
    c1, c2 = st.columns(2)
    with c1:
        st.button("Localis√© (non m√©tastatique)", use_container_width=True, on_click=lambda: go_module("TVES: Localis√©"))
    with c2:
        st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("TVES: M√©tastatique"))


def render_tves_local_page():
    btn_home_and_back(show_back=True, back_label="Tumeurs des voies excr√©trices")
    st.header("üî∑ TVES ‚Äî localis√© (UTUC non m√©tastatique)")
    with st.form("tves_local_form"):
        grade_biopsie = st.selectbox("Grade biopsie URSS", ["Bas grade", "Haut grade", "Ind√©termin√©"])
        cytologie_hg_positive = st.radio("Cytologie haut grade positive ?", ["Non", "Oui"], horizontal=True) == "Oui"
        taille_cm = st.number_input("Taille l√©sion (cm)", min_value=0.2, max_value=10.0, value=1.5, step=0.1)
        multifocal = st.radio("Multifocale ?", ["Non", "Oui"], horizontal=True) == "Oui"
        invasion_imagerie = st.radio("Invasion suspecte √† l‚Äôimagerie (uro-TDM/IRM) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        hydron = st.radio("Hydron√©phrose ?", ["Non", "Oui"], horizontal=True) == "Oui"
        kss_faisable = st.radio("Traitement conservateur complet r√©alisable ?", ["Oui", "Non"], horizontal=True) == "Oui"
        accepte_suivi_strict = st.radio("Patient accepte le suivi strict endoscopique/imagerie ?", ["Oui", "Non"], horizontal=True) == "Oui"
        localisation = st.selectbox("Localisation", ["Bassinets/caliciel", "Uret√®re proximal", "Uret√®re moyen", "Uret√®re distal"])
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì TVES localis√©")

    if submitted:
        plan = plan_tves_localise(
            grade_biopsie, cytologie_hg_positive, taille_cm, multifocal,
            invasion_imagerie, hydron, kss_faisable, accepte_suivi_strict,
            localisation
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", plan["stratification"], "√âl√©ment", "R√©sultat")

        if len(plan["traitement"]) == 1:
            st.markdown("### üß≠ Conduite recommand√©e")
            for x in plan["traitement"]:
                st.markdown("- " + x)
        else:
            st.markdown("### üíä Traitement ‚Äî Options num√©rot√©es")
            for x in plan["traitement"]:
                st.markdown("- " + x)

        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Stratification": [f"{k}: {v}" for k, v in plan["stratification"]],
            "Traitement": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT TVES localis√©", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_TVES_Localise")

def render_tves_meta_page():
    btn_home_and_back(show_back=True, back_label="Tumeurs des voies excr√©trices")
    st.header("üî∑ TVES ‚Äî m√©tastatique (algorithme EV+Pembro / Platine-Gem / Cis-Gem-Nivo)")

    with st.form("tves_meta_form"):
        ev_pembro_eligible = st.radio("√âligible √† EV + Pembrolizumab (1L pr√©f√©rentielle) ?", ["Oui", "Non"], horizontal=True) == "Oui"

        if not ev_pembro_eligible:
            st.markdown("#### Si EV+Pembro non √©ligible :")
            cis_eligible = st.radio("√âligible Cisplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
            carbo_eligible = st.radio("√âligible Carboplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
            use_cis_gem_nivo = False
            if cis_eligible:
                use_cis_gem_nivo = st.radio("Choisir 1L **Cisplatine + Gemcitabine + Nivolumab** ?", ["Non", "Oui"], horizontal=True) == "Oui"
        else:
            # Valeurs par d√©faut si EV+Pembro √©ligible
            cis_eligible = False
            carbo_eligible = False
            use_cis_gem_nivo = False

        st.markdown("#### Historique & biomarqueurs")
        platinum_naif = st.radio("Na√Øf de platine (vraie 1re ligne) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        prior_platinum = st.radio("A d√©j√† re√ßu une chimio √† base de platine ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_io = st.radio("A d√©j√† re√ßu une immunoth√©rapie (PD-1/PD-L1) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        fgfr_alt = st.radio("Alt√©rations FGFR2/3 connues ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì TVES m√©tastatique")

    if submitted:
        plan = plan_tves_metastatique(
            ev_pembro_eligible, cis_eligible, carbo_eligible, platinum_naif,
            fgfr_alt, prior_platinum, prior_io, use_cis_gem_nivo
        )

        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        st.markdown("### üíä Traitement ‚Äî Options num√©rot√©es")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Traitement (options)": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT TVES m√©tastatique (algorithme actualis√©)", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_TVES_Metastatique")


def render_infectio_menu():
    btn_home_and_back()
    st.markdown("## Infectiologie ‚Äî Infections urinaires")
    st.caption("Choisissez le sous-module")
    c1, c2 = st.columns(2)
    with c1:
        st.button("Grossesse", use_container_width=True, on_click=lambda: go_module("IU: Grossesse"))
        st.button("Cystite", use_container_width=True, on_click=lambda: go_module("IU: Cystite"))
    with c2:
        st.button("Py√©lon√©phrite aigu√´ (PNA)", use_container_width=True, on_click=lambda: go_module("IU: PNA"))
        st.button("Infection masculine (Prostatite)", use_container_width=True, on_click=lambda: go_module("IU: Prostatite"))


# ---------- UI ‚Äî Cystite ----------
def render_infectio_cystite_page():
    btn_home_and_back(show_back=True, back_label="Infectiologie")
    st.header("üî∑ Cystite (hors grossesse) ‚Äî triage simple / √† risque / grave")

    with st.form("cystite_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            age = st.number_input("√Çge", min_value=12, max_value=100, value=28)
            fievre_ge_38_5 = st.radio("Fi√®vre ‚â• 38,5¬∞C ?", ["Non", "Oui"], horizontal=True) == "Oui"
            lombalgies = st.radio("Douleur lombaire ?", ["Non", "Oui"], horizontal=True) == "Oui"
            douleurs_intenses = st.radio("Douleur intense ?", ["Non", "Oui"], horizontal=True) == "Oui"
            hematurie = st.radio("H√©maturie ?", ["Non", "Oui"], horizontal=True) == "Oui"
            recidivante = st.radio("Cystites r√©cidivantes ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with col2:
            age_ge65_fragile = st.radio("‚â•65 ans fragile ?", ["Non", "Oui"], horizontal=True) == "Oui"
            anomalies_uro = st.radio("Anomalies uro/obstacle connu ?", ["Non", "Oui"], horizontal=True) == "Oui"
            immunodep = st.radio("Immunod√©pression ?", ["Non", "Oui"], horizontal=True) == "Oui"
            irc_significative = st.radio("IR chronique importante ?", ["Non", "Oui"], horizontal=True) == "Oui"
            sonde = st.radio("Sonde urinaire ?", ["Non", "Oui"], horizontal=True) == "Oui"
            diabete_non_controle = st.radio("Diab√®te non contr√¥l√© ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with col3:
            homme = st.radio("Sexe masculin ?", ["Non", "Oui"], horizontal=True) == "Oui"
            grossesse = st.radio("Grossesse ?", ["Non", "Oui"], horizontal=True) == "Oui"
            seps_sbp_lt90 = st.radio("TAS < 90 mmHg ?", ["Non", "Oui"], horizontal=True) == "Oui"
            seps_hr_gt120 = st.radio("FC > 120/min ?", ["Non", "Oui"], horizontal=True) == "Oui"
            confusion = st.radio("Confusion ?", ["Non", "Oui"], horizontal=True) == "Oui"
            vomissements = st.radio("Vomissements majeurs ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äî Cystite")

    if submitted:
        plan = plan_cystite(
            age, fievre_ge_38_5, lombalgies, douleurs_intenses, hematurie, recidivante,
            homme, grossesse, age_ge65_fragile, anomalies_uro, immunodep, irc_significative,
            sonde, diabete_non_controle, seps_sbp_lt90, seps_hr_gt120, confusion, vomissements
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", plan["classification"], "√âl√©ment", "R√©sultat")

        st.markdown("### üíä Options probabilistes / conduite")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Conduite et suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es":[f"{k}: {v}" for k,v in plan["donnees"]],
            "Stratification":[f"{k}: {v}" for k,v in plan["classification"]],
            "Traitement": plan["traitement"],
            "Conduite/Follow-up": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT ‚Äî Cystite", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_Cystite")



# ---------- UI ‚Äî PNA ----------
def render_infectio_pna_page():
    btn_home_and_back(show_back=True, back_label="Infectiologie")
    st.header("üî∑ Py√©lon√©phrite aigu√´ (PNA) ‚Äî triage simple / √† risque / grave")

    with st.form("pna_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            fievre_ge_38_5 = st.radio("Fi√®vre ‚â• 38,5¬∞C ?", ["Oui", "Non"], horizontal=True) == "Oui"
            douleur_lombaire = st.radio("Douleur lombaire ?", ["Oui", "Non"], horizontal=True) == "Oui"
            vomissements = st.radio("Vomissements majeurs ?", ["Non", "Oui"], horizontal=True) == "Oui"
            homme = st.radio("Sexe masculin ?", ["Non", "Oui"], horizontal=True) == "Oui"
            grossesse = st.radio("Grossesse ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with col2:
            age_ge65_fragile = st.radio("‚â•65 ans fragile ?", ["Non", "Oui"], horizontal=True) == "Oui"
            anomalies_uro = st.radio("Anomalies uro/obstacle ?", ["Non", "Oui"], horizontal=True) == "Oui"
            immunodep = st.radio("Immunod√©pression ?", ["Non", "Oui"], horizontal=True) == "Oui"
            irc_significative = st.radio("IR chronique importante ?", ["Non", "Oui"], horizontal=True) == "Oui"
            sonde = st.radio("Sonde urinaire ?", ["Non", "Oui"], horizontal=True) == "Oui"
            diabete_non_controle = st.radio("Diab√®te non contr√¥l√© ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with col3:
            seps_sbp_lt90 = st.radio("TAS < 90 mmHg ?", ["Non", "Oui"], horizontal=True) == "Oui"
            seps_hr_gt120 = st.radio("FC > 120/min ?", ["Non", "Oui"], horizontal=True) == "Oui"
            confusion = st.radio("Confusion ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äî PNA")

    if submitted:
        plan = plan_pna(
            fievre_ge_38_5, douleur_lombaire, vomissements, homme, grossesse, age_ge65_fragile,
            anomalies_uro, immunodep, irc_significative, sonde, diabete_non_controle,
            seps_sbp_lt90, seps_hr_gt120, confusion
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", plan["classification"], "√âl√©ment", "R√©sultat")

        st.markdown("### üíä Options probabilistes / conduite")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Conduite et suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es":[f"{k}: {v}" for k,v in plan["donnees"]],
            "Stratification":[f"{k}: {v}" for k,v in plan["classification"]],
            "Traitement": plan["traitement"],
            "Conduite/Follow-up": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT ‚Äî PNA", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_PNA")



# ---------- UI ‚Äî Grossesse ----------
def render_infectio_grossesse_page():
    btn_home_and_back(show_back=True, back_label="Infectiologie")
    st.header("üî∑ Infection urinaire au cours de la grossesse")

    with st.form("iu_grossesse_form"):
        type_tableau = st.selectbox("Tableau clinique", ["Bact√©riurie asymptomatique", "Cystite", "PNA"])
        terme_9e_mois = st.radio("9e mois de grossesse ?", ["Non", "Oui"], horizontal=True) == "Oui"
        allergies_betalactamines = st.radio("Allergie b√™ta-lactamines ?", ["Non", "Oui"], horizontal=True) == "Oui"
        seps_sbp_lt90 = st.radio("TAS < 90 mmHg ?", ["Non", "Oui"], horizontal=True) == "Oui"
        seps_hr_gt120 = st.radio("FC > 120/min ?", ["Non", "Oui"], horizontal=True) == "Oui"
        vomissements = st.radio("Vomissements majeurs ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äî Grossesse")

    if submitted:
        plan = plan_grossesse(
            type_tableau, terme_9e_mois, allergies_betalactamines,
            seps_sbp_lt90, seps_hr_gt120, vomissements
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Gravit√©", plan["classification"], "√âl√©ment", "R√©sultat")

        st.markdown("### üíä Options probabilistes / conduite")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Conduite et suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es":[f"{k}: {v}" for k,v in plan["donnees"]],
            "Gravit√©":[f"{k}: {v}" for k,v in plan["classification"]],
            "Traitement": plan["traitement"],
            "Conduite/Follow-up": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT ‚Äî IU Grossesse", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_IU_Grossesse")


# ---------- UI ‚Äî Prostatite ----------
def render_infectio_homme_page():
    btn_home_and_back(show_back=True, back_label="Infectiologie")
    st.header("üî∑ Infection masculine ‚Äî Prostatite aigu√´")

    with st.form("iu_homme_form"):
        col1, col2 = st.columns(2)
        with col1:
            fievre_ge_38_5 = st.radio("Fi√®vre ‚â• 38,5¬∞C ?", ["Oui", "Non"], horizontal=True) == "Oui"
            douleurs_perineales = st.radio("Douleurs p√©rin√©ales ?", ["Oui", "Non"], horizontal=True) == "Oui"
            dysurie = st.radio("Dysurie ?", ["Oui", "Non"], horizontal=True) == "Oui"
            retention = st.radio("R√©tention aigu√´ ?", ["Non", "Oui"], horizontal=True) == "Oui"
            post_biopsie_prostate = st.radio("Post-biopsie prostatique r√©cente ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with col2:
            immunodep = st.radio("Immunod√©pression ?", ["Non", "Oui"], horizontal=True) == "Oui"
            irc_significative = st.radio("IR chronique importante ?", ["Non", "Oui"], horizontal=True) == "Oui"
            seps_sbp_lt90 = st.radio("TAS < 90 mmHg ?", ["Non", "Oui"], horizontal=True) == "Oui"
            seps_hr_gt120 = st.radio("FC > 120/min ?", ["Non", "Oui"], horizontal=True) == "Oui"
            confusion = st.radio("Confusion ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äî Prostatite")

    if submitted:
        plan = plan_prostatite(
            fievre_ge_38_5, douleurs_perineales, dysurie, retention, post_biopsie_prostate,
            immunodep, irc_significative, seps_sbp_lt90, seps_hr_gt120, confusion
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", plan["classification"], "√âl√©ment", "R√©sultat")

        st.markdown("### üíä Options probabilistes / conduite")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Conduite et suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es":[f"{k}: {v}" for k,v in plan["donnees"]],
            "Stratification":[f"{k}: {v}" for k,v in plan["classification"]],
            "Traitement": plan["traitement"],
            "Conduite/Follow-up": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT ‚Äî Prostatite aigu√´", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_Prostatite")

# -------------------------
# LITHIASE (UI) ‚Äî MAJ
# -------------------------
def render_lithiase_page():
    btn_home_and_back()
    st.header("üî∑ Lithiase urinaire ‚Äî Conduite √† tenir")

    with st.form("lithiase_form"):
        st.markdown("#### Triage initial")
        c1, c2, c3, c4 = st.columns(4)
        with c1: fievre = st.radio("Fi√®vre / infection ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with c2: hyperalgique = st.radio("Douleur hyperalgique ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with c3: oligoanurie = st.radio("Oligo-anurie / IR ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with c4: doute_diag = st.radio("Doute diagnostique ?", ["Non", "Oui"], horizontal=True) == "Oui"

        st.markdown("#### Contexte")
        c5, c6, c7 = st.columns(3)
        with c5: grossesse = st.radio("Grossesse ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with c6: anticoag = st.radio("Anticoagulants / troubles h√©mostase non corrig√©s ?", ["Non", "Oui"], horizontal=True) == "Oui"
        with c7: douleur_actuelle = st.radio("Douleur actuelle ?", ["Non", "Oui"], horizontal=True) == "Oui"

        st.markdown("#### Calcul (si connu)")
        c8, c9 = st.columns(2)
        with c8:
            localisation = st.selectbox(
                "Localisation",
                ["Uret√®re distal", "Uret√®re moyen", "Uret√®re proximal", "Rein (intracavicitaire)"],
                index=0
            )
        with c9:
            taille_mm = st.number_input("Taille estim√©e (mm)", min_value=0, max_value=40, value=5, step=1)

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì Lithiase")

    if submitted:
        plan = plan_lithiase(
            fievre=fievre,
            hyperalgique=hyperalgique,
            oligoanurie=oligoanurie,
            doute_diag=doute_diag,
            grossesse=grossesse,
            anticoag=anticoag,
            localisation=localisation,
            taille_mm=taille_mm if taille_mm > 0 else None,
            douleur_actuelle=douleur_actuelle,
        )

        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])

        st.markdown("### üíä Conduite √† tenir (options class√©es)")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üçΩÔ∏è R√®gles hygi√©no-di√©t√©tiques")
        for x in plan["hygiene"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        # Export
        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Conduite √† tenir": plan["traitement"],
            "Hygi√®ne-di√©t√©tique": plan["hygiene"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Lithiase", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_Lithiase")


# -------------------------
# cancer du rein  (UI)
# -------------------------
def render_kidney_menu():
    btn_home_and_back()
    st.markdown("## Tumeur du rein")
    st.caption("Choisissez le sous-module")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.button("Non m√©tastatique", use_container_width=True, on_click=lambda: go_module("Rein: Non m√©tastatique"))
    with c2:
        st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Rein: M√©tastatique"))
    with c3:
        st.button("Indications de biopsie", use_container_width=True, on_click=lambda: go_module("Rein: Biopsie"))


def render_kidney_local_page():
    btn_home_and_back(show_back=True, back_label="Tumeur du rein")
    st.header("üî∑ Rein ‚Äî tumeur non m√©tastatique")

    # Mapping libell√© ‚Üí cT
    ct_labels = [
        "Localis√© ‚Äî T1a (‚â§ 4 cm)",
        "Localis√© ‚Äî T1b (> 4 √† ‚â§ 7 cm)",
        "Localis√© ‚Äî T2a (> 7 √† ‚â§ 10 cm)",
        "Localis√© ‚Äî T2b (> 10 cm)",
        "Localement avanc√© ‚Äî T3a",
        "Localement avanc√© ‚Äî T3b",
        "Localement avanc√© ‚Äî T3c",
        "Localement avanc√© ‚Äî T4",
    ]
    ct_map = {
        "Localis√© ‚Äî T1a (‚â§ 4 cm)": "T1a",
        "Localis√© ‚Äî T1b (> 4 √† ‚â§ 7 cm)": "T1b",
        "Localis√© ‚Äî T2a (> 7 √† ‚â§ 10 cm)": "T2a",
        "Localis√© ‚Äî T2b (> 10 cm)": "T2b",
        "Localement avanc√© ‚Äî T3a": "T3a",
        "Localement avanc√© ‚Äî T3b": "T3b",
        "Localement avanc√© ‚Äî T3c": "T3c",
        "Localement avanc√© ‚Äî T4": "T4",
    }

    with st.form("kidney_local_form"):
        cT_label = st.selectbox("Cat√©gorie (sans saisie de taille)", ct_labels, index=0)
        cT = ct_map[cT_label]

        cN_pos = st.radio("Ad√©nopathies cliniques (cN+) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        thrombus = st.selectbox("Thrombus veineux", ["Aucun", "Veine r√©nale", "VCC infra-h√©patique", "VCC supra-h√©patique/atrium"])
        rein_unique_ou_CKD = st.radio("Rein unique ou CKD significative ?", ["Non", "Oui"], horizontal=True) == "Oui"
        tumeur_hilaire = st.radio("Tumeur hilaire/centrale ?", ["Non", "Oui"], horizontal=True) == "Oui"
        exophytique = st.radio("Tumeur exophytique ?", ["Oui", "Non"], horizontal=True) == "Oui"
        age = st.number_input("√Çge (ans)", min_value=18, max_value=100, value=62)
        haut_risque_op = st.radio("Haut risque op√©ratoire ?", ["Non", "Oui"], horizontal=True) == "Oui"
        biopsie_dispo = st.radio("Biopsie disponible ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì Rein non m√©tastatique")

    if submitted:
        plan = plan_rein_local(
            cT, cN_pos, thrombus, rein_unique_ou_CKD, tumeur_hilaire,
            exophytique, age, haut_risque_op, biopsie_dispo
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        st.markdown("### üíä Traitement ‚Äî Options num√©rot√©es")
        for x in plan["traitement"]:
            st.markdown("- " + x)
        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)
        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Traitement (options)": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Rein non m√©tastatique", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Rein_Non_Metastatique")


def render_kidney_meta_page():
    btn_home_and_back(show_back=True, back_label="Tumeur du rein")
    st.header("üî∑ Rein ‚Äî tumeur m√©tastatique")
    with st.form("kidney_meta_form"):
        histo = st.selectbox("Histologie pr√©sum√©e/confirm√©e", ["ccRCC", "non-ccRCC (papillaire/chromophobe/autre)"])
        risk_system = st.radio("Classification pronostique", ["IMDC (Heng)", "MSKCC (Motzer)"], horizontal=True)

        st.markdown("#### Variables communes")
        kps = st.slider("Karnofsky (%)", 50, 100, 90, step=10)
        karnofsky_lt80 = (kps < 80)
        time_le_12 = st.radio("D√©lai diagnostic ‚Üí traitement syst√©mique ‚â§ 12 mois ?", ["Non", "Oui"], horizontal=True) == "Oui"
        hb_basse = st.radio("Hb < LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
        ca_haut = st.radio("Calcium corrig√© > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"

        if risk_system.startswith("IMDC"):
            st.markdown("#### Variables sp√©cifiques IMDC (Heng)")
            neutro_hauts = st.radio("Neutrophiles > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
            plaquettes_hautes = st.radio("Plaquettes > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
            ldh_haut = False
        else:
            st.markdown("#### Variables sp√©cifiques MSKCC (Motzer)")
            ldh_haut = st.radio("LDH > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
            neutro_hauts = False
            plaquettes_hautes = False

        st.markdown("#### Charge tumorale & sites")
        oligo = st.radio("Oligom√©tastatique (nombre limit√©, r√©s√©cable/irradiable) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bone = st.radio("M√©tastases osseuses ?", ["Non", "Oui"], horizontal=True) == "Oui"
        brain = st.radio("M√©tastases c√©r√©brales ?", ["Non", "Oui"], horizontal=True) == "Oui"
        liver = st.radio("M√©tastases h√©patiques ?", ["Non", "Oui"], horizontal=True) == "Oui"
        io_contra = st.radio("Contre-indication √† l‚Äôimmunoth√©rapie ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì Rein m√©tastatique")

    if submitted:
        if risk_system.startswith("IMDC"):
            score, group = calc_imdc(karnofsky_lt80, time_le_12, hb_basse, ca_haut, neutro_hauts, plaquettes_hautes)
            label = "IMDC (Heng)"
        else:
            score, group = calc_mskcc(karnofsky_lt80, time_le_12, hb_basse, ca_haut, ldh_haut)
            label = "MSKCC (Motzer)"

        plan = plan_rein_meta(
            "ccRCC" if "ccRCC" in histo else "non-ccRCC",
            score, group, label, oligo, bone, brain, liver, io_contra
        )

        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", plan["stratification"], "Syst√®me", "R√©sultat")
        st.markdown("### üíä Traitement ‚Äî Options num√©rot√©es")
        for x in plan["traitement"]:
            st.markdown("- " + x)
        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Stratification": [f"{label}: {group} (score {score})"],
            "Traitement (options)": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Rein m√©tastatique", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Rein_Metastatique")


def render_kidney_biopsy_page():
    btn_home_and_back(show_back=True, back_label="Tumeur du rein")
    st.header("üî∑ Rein ‚Äî Indications de biopsie percutan√©e")
    st.markdown("Les indications suivantes s‚Äôappliquent :")
    st.markdown("- **Avant un traitement m√©dical** en l‚Äôabsence de diagnostic histologique ;")
    st.markdown("- **Avant un traitement focal** (radiofr√©quence, curieth√©rapie ou radioth√©rapie) ;")
    st.markdown("- **Avant une n√©phrectomie √©largie** pour tumeur localis√©e si la n√©phrectomie partielle est jug√©e non r√©alisable (**cT1, cT2**) ;")
    st.markdown("- **Avant une n√©phrectomie partielle** pour tumeur de complexit√© chirurgicale √©lev√©e et risque de totalisation ;")
    st.markdown("- **En cas d‚Äôindication imp√©rative**, de rein unique et de tumeurs bilat√©rales ;")
    st.markdown("- **En cas d‚Äôincertitude diagnostique** (lymphome, m√©tastase d‚Äôun autre cancer, carcinome uroth√©lial, sarcome).")


# =========================
# PAGES ‚Äî PROSTATE (UI)
# =========================

def render_prostate_menu():
    btn_home_and_back()
    st.markdown("## Tumeur de la prostate")
    st.caption("Choisissez le sous-module")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.button("Localis√©e", use_container_width=True, on_click=lambda: go_module("Prostate: Localis√©e"))
    with c2:
        st.button("R√©cidive", use_container_width=True, on_click=lambda: go_module("Prostate: R√©cidive"))
    with c3:
        st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Prostate: M√©tastatique"))


def render_prostate_localise_page():
    btn_home_and_back(show_back=True, back_label="Tumeur de la prostate")
    st.header("üî∑ Prostate localis√©e ‚Äî stratification & CAT")
    with st.form("prost_loc_form"):
        cT = st.selectbox("Stade clinique (cT)", ["T1", "T2a", "T2b", "T2c", "T3a", "T3b", "T4"])
        psa = st.number_input("PSA (ng/mL)", min_value=0.0, step=0.1, value=7.0)
        isup = st.selectbox("ISUP (1‚Äì5)", [1, 2, 3, 4, 5])
        exp = st.number_input("Esp√©rance de vie estim√©e (ans)", min_value=1, max_value=30, value=12)
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äî Localis√©e")

    if submitted:
        plan = plan_prostate_localise(psa, isup, cT, exp)
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", [("Risque", plan["risque"].upper())], "√âl√©ment", "R√©sultat")
        st.markdown("### üíä Options de traitement")
        for x in plan["options"]:
            st.markdown(f"- **{x['label']}** ‚Äî *niveau de reco : {x['degre']}*  \n  {x['details']}")
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for n in plan["notes"]:
                st.markdown(f"- {n}")

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Stratification": [f"Risque : {plan['risque'].upper()}"],
            "Options": [f"{o['label']} ‚Äî {o['degre']} : {o['details']}" for o in plan["options"]],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Prostate Localis√©e", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Prostate_Localisee")


def render_prostate_recidive_page():
    btn_home_and_back(show_back=True, back_label="Tumeur de la prostate")
    st.header("üî∑ Prostate ‚Äî R√©cidive (biologique)")

    with st.form("prost_rec_form"):
        type_initial = st.selectbox("Traitement initial", ["Prostatectomie", "Radioth√©rapie"])
        psa_actuel = st.number_input("PSA actuel (ng/mL)", min_value=0.0, step=0.01, value=0.18)
        psa_nadir = None
        conf = st.number_input("Nombre de dosages confirmant (si prostatectomie)", min_value=1, max_value=3, value=1)
        if type_initial == "Radioth√©rapie":
            psa_nadir = st.number_input("PSA nadir post-RT (si connu)", min_value=0.0, step=0.01, value=0.1)
        submitted = st.form_submit_button("üîé √âvaluer la r√©cidive")

    if submitted:
        plan = plan_prostate_recidive(type_initial, psa_actuel, psa_nadir, conf)
        st.markdown(f"**R√©sum√© :** {plan['resume']}")
        st.markdown("### üíä Options")
        for x in plan["options"]:
            st.markdown(f"- **{x['label']}** ‚Äî *{x['degre']}*  \n  {x['details']}")
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for n in plan["notes"]:
                st.markdown(f"- {n}")

        sections = {
            "R√©sum√©": [plan["resume"]],
            "Options": [f"{o['label']} ‚Äî {o['degre']} : {o['details']}" for o in plan["options"]],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Prostate R√©cidive", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Prostate_Recidive")


def render_prostate_meta_page():
    btn_home_and_back(show_back=True, back_label="Tumeur de la prostate")
    st.header("üî∑ Prostate m√©tastatique ‚Äî mHSPC / mCRPC")

    with st.form("prost_meta_form"):
        testo_castration = st.radio("Testost√©rone < 50 ng/dL (castration) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        volume_eleve = st.radio("Volume de la maladie √©lev√© (ex : haut volume) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        sympt_os = st.radio("Sympt√¥mes osseux ?", ["Non", "Oui"], horizontal=True) == "Oui"
        deja_doc = st.radio("Doc√©taxel d√©j√† re√ßu ?", ["Non", "Oui"], horizontal=True) == "Oui"
        deja_arpi = st.radio("ARPI (abirat√©rone/enzalutamide/apalutamide) d√©j√† re√ßu ?", ["Non", "Oui"], horizontal=True) == "Oui"
        alt_HRR = st.radio("Alt√©ration g√®nes HRR (BRCA/ATM) connue ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äî M√©tastatique")

    if submitted:
        plan = plan_prostate_metastatique(testo_castration, volume_eleve, sympt_os, deja_doc, deja_arpi, alt_HRR)
        render_kv_table("üßæ Profil", [("Statut", plan["profil"])])
        st.markdown("### üíä Options")
        for x in plan["options"]:
            st.markdown(f"- **{x['label']}** ‚Äî *{x['degre']}*  \n  {x['details']}")
        if plan["adjoints"]:
            st.markdown("### ‚ûï Mesures adjointes")
            for a in plan["adjoints"]:
                st.markdown(f"- {a}")
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for n in plan["notes"]:
                st.markdown(f"- {n}")

        sections = {
            "Profil": [plan["profil"]],
            "Options": [f"{o['label']} ‚Äî {o['degre']} : {o['details']}" for o in plan["options"]],
            "Mesures adjointes": plan["adjoints"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Prostate M√©tastatique", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Prostate_Metastatique")

# =========================
# ROUTING + FALLBACK
# =========================

def render_home_wrapper():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")


def render_generic(page_label: str):
    btn_home_and_back()
    st.header(page_label)
    st.info("Module en cours de construction.")


page = st.session_state["page"]
if page == "Accueil":
    render_home_wrapper()
elif page == "Tumeur de la vessie":
    render_vessie_menu()
elif page == "Vessie: TVNIM":
    render_tvnim_page()
elif page == "Vessie: TVIM":
    render_tvim_page()
elif page == "Vessie: M√©tastatique":
    render_vessie_meta_page()
elif page == "Tumeur du rein":
    render_kidney_menu()
elif page == "Rein: Non m√©tastatique":
    render_kidney_local_page()
elif page == "Rein: M√©tastatique":
    render_kidney_meta_page()
elif page == "Rein: Biopsie":
    render_kidney_biopsy_page()
elif page == "Tumeurs des voies excr√©trices":
    render_tves_menu()
elif page == "TVES: Localis√©":
    render_tves_local_page()
elif page == "TVES: M√©tastatique":
    render_tves_meta_page()
elif page == "Infectiologie":
    render_infectio_menu()
elif page == "IU: Grossesse":
    render_infectio_grossesse_page()
elif page == "IU: Cystite":
    render_infectio_cystite_page()
elif page == "IU: PNA":
    render_infectio_pna_page()
elif page == "IU: Prostatite":
    render_infectio_homme_page() 
elif page == "Lithiase":
    render_lithiase_page()
elif page == "Hypertrophie b√©nigne de la prostate (HBP)":
elif page == "Tumeur de la prostate":
    render_prostate_menu()
elif page == "Prostate: Localis√©e":
    render_prostate_localise_page()
elif page == "Prostate: R√©cidive":
    render_prostate_recidive_page()
elif page == "Prostate: M√©tastatique":
    render_prostate_meta_page()
else:
    render_generic(page)
