# app.py ‚Äî Urology Assistant AI (Accueil + Vessie -> TVNIM/TVIM/M√©tastatique)
import streamlit as st
import base64
from datetime import datetime

# --- CONFIG ---
st.set_page_config(page_title="Urology Assistant AI", layout="wide")

APP_TITLE = "Urology Assistant AI"
APP_SUBTITLE = "Assistant intelligent pour la d√©cision clinique align√© AFU 2024‚Äì2026"

# Image des protocoles (ton sch√©ma BCG/MMC)
PROTO_IMG_PATH = "/mnt/data/Capture d‚Äô√©cran 2025-09-01 √† 12.19.54.png"  # <- change le chemin si n√©cessaire

# Modules (page d‚Äôaccueil)
MODULES = [
    "Tumeur de la vessie",
    "Tumeurs des voies excr√©trices",
    "Tumeur de la prostate",
    "Tumeur du rein",
    "Hypertrophie b√©nigne de la prostate (HBP)",
    "Lithiase",
    "Infectiologie",
]

# Couleurs pastel
PALETTE = {
    "Tumeur de la vessie": "#D8EEF0",
    "Tumeurs des voies excr√©trices": "#E5F3E6",
    "Tumeur de la prostate": "#FFF2C6",
    "Tumeur du rein": "#FFD8CC",
    "Hypertrophie b√©nigne de la prostate (HBP)": "#E7E0FF",
    "Lithiase": "#FFE6CC",
    "Infectiologie": "#DDE8F7",
}

# Etat initial
if "page" not in st.session_state:
    st.session_state["page"] = "Accueil"

# --- Helpers navigation ---
def go_home():
    st.session_state["page"] = "Accueil"
    st.rerun()

def go_module(label: str):
    st.session_state["page"] = label
    st.rerun()

def category_button(label: str, color: str, key: str):
    with st.container():
        clicked = st.button(f"{label}  ‚Ä∫", key=key, use_container_width=True)
        st.markdown(
            f"<div style='height:6px;background:{color};border-radius:6px;margin-bottom:12px;'></div>",
            unsafe_allow_html=True,
        )
        if clicked:
            go_module(label)

def top_header():
    st.markdown(
        f"<div style='padding:18px 22px;background:linear-gradient(90deg,#0E3C6E,#154c8a);"
        f"border-radius:12px;margin-bottom:18px;'>"
        f"<h1 style='color:#fff;margin:0;font-weight:800;font-size:28px'>{APP_TITLE}</h1>"
        f"</div>",
        unsafe_allow_html=True,
    )

def btn_home_and_back(show_back: bool = False, back_label: str = "Tumeur de la vessie"):
    cols = st.columns([1, 3])
    with cols[0]:
        st.button("üè† Accueil", on_click=go_home)
    if show_back:
        with cols[1]:
            st.button(f"‚¨ÖÔ∏è Retour : {back_label}", on_click=lambda: go_module(back_label))

# =========================
# TVNIM ‚Äî logique clinique (AFU)
# =========================
def stratifier_tvnim(stade: str, grade: str, taille_mm: int, nombre: str) -> str:
    """
    AFU (Tableau III) simplifi√©e avec nos variables :
    - Faible : pTa bas grade, <3 cm, unifocale
    - Interm√©diaire : pTa bas grade (sans crit√®res haut/tr√®s haut)
    - Haut : pT1 OU haut grade
    - Tr√®s haut : pT1 haut grade + (taille >3 cm OU multifocale/papillomatose)
    """
    if stade == "pTa" and grade == "Bas grade" and taille_mm < 30 and nombre == "Unique":
        return "faible"
    if stade == "pT1" and grade == "Haut grade" and (taille_mm > 30 or nombre != "Unique"):
        return "tr√®s haut"
    if stade == "pT1" or grade == "Haut grade":
        return "haut"
    return "interm√©diaire"

def plan_tvnim(risque: str):
    """
    Retourne (traitement, suivi, protocoles d√©taill√©s, notes_second_look)
    Doses et sch√©mas usuels (align√©s pratique clinique/AFU) ‚Äî √† adapter selon disponibilit√©s locales.
    """
    # Notes RTUV second look ‚Äî √† afficher pour TOUS les cas si crit√®res
    notes_second_look = [
        "RTUV de second look :",
        "- Indiqu√©e pour TOUTE tumeur pT1 (r√©√©valuation syst√©matique).",
        "- Indiqu√©e si tumeur volumineuse et/ou multifocale (1re r√©section potentiellement incompl√®te).",
        "- Indiqu√©e si absence de muscle d√©trusor dans la pi√®ce initiale.",
    ]

    # Protocoles / Doses
    PROTO = {
        "IPOP": [
            "IPOP dans les 2 heures (au plus tard 24 h) si pas d‚Äôh√©maturie/perforation :",
            "‚Ä¢ Mitomycine C 40 mg dans 40 mL (instillation unique, r√©tention 1‚Äì2 h),",
            "  OU √âpirubicine 50 mg (40‚Äì50 mL),",
            "  OU Gemcitabine 1 g (50 mL).",
        ],
        "CHIMIO_EV": [
            "Chimioth√©rapie endov√©sicale (sch√©ma d‚Äôinduction 6‚Äì8 hebdo) :",
            "‚Ä¢ Mitomycine C 40 mg / 40 mL, 1√ó/semaine √ó6 √† 8 semaines.",
            "‚Ä¢ √âpirubicine 50 mg / 40‚Äì50 mL, 1√ó/semaine √ó6 √† 8 semaines.",
            "‚Ä¢ Gemcitabine 1 g / 50 mL, 1√ó/semaine √ó6 √† 8 semaines.",
            "Entretien (optionnel selon risque interm√©diaire) : 1 instillation mensuelle √ó9 (mois 4‚Üí12).",
        ],
        "BCG_12M": [
            "BCG (risque interm√©diaire, entretien 12 mois) :",
            "‚Ä¢ Induction : 6 instillations hebdomadaires (semaines 1‚Äì6).",
            "‚Ä¢ Entretien 12 mois : 3 instillations aux mois 3, 6, 12 (3√ó3).",
            "Dose : flacon standard (dose compl√®te), r√©tention ~2 h si tol√©r√©.",
        ],
        "BCG_36M": [
            "BCG (haut / tr√®s haut risque, entretien 36 mois) :",
            "‚Ä¢ Induction : 6 instillations hebdomadaires (semaines 1‚Äì6).",
            "‚Ä¢ Entretien 36 mois : 3 instillations √† M3, M6, M12, puis tous les 6 mois jusqu‚Äô√† M36 (sch√©ma 3/6/12 puis /6 mois).",
            "Dose : flacon standard (dose compl√®te), r√©tention ~2 h si tol√©r√©.",
        ],
        "RCP_CYSTECTOMIE": [
            "En cas de tr√®s haut risque :",
            "‚Ä¢ Discussion de cystectomie pr√©coce avec curage ganglionnaire √©tendu en RCP.",
        ],
    }

    if risque == "faible":
        traitement = [
            "RTUV compl√®te et profonde (d√©trusor pr√©sent au compte rendu op√©ratoire).",
            *PROTO["IPOP"],
            "Aucun traitement compl√©mentaire d‚Äôentretien n‚Äôest requis.",
        ]
        suivi = [
            "Cystoscopie : 3e et 12e mois, puis 1√ó/an pendant 5 ans.",
            "Cytologie : non syst√©matique.",
            "Uro-TDM : non syst√©matique.",
        ]
        protocoles = []
    elif risque == "interm√©diaire":
        traitement = [
            "RTUV compl√®te (second look si doute de r√©section).",
            *PROTO["CHIMIO_EV"],
            "Alternative possible : BCG (induction 6) + entretien 12 mois (si r√©cidives attendues).",
        ]
        suivi = [
            "Cystoscopie : 3e et 6e mois, puis /6 mois pendant 2 ans, puis 1√ó/an (au moins 10 ans).",
            "Cytologie : syst√©matique.",
            "Uro-TDM : non syst√©matique.",
        ]
        protocoles = [*PROTO["BCG_12M"]]
    elif risque == "haut":
        traitement = [
            "RTUV compl√®te + second look si pT1 ou muscle absent.",
            *PROTO["BCG_36M"],
            "Si CI/√©chec BCG : chimioth√©rapie endov√©sicale (MMC/gemcitabine ¬± doc√©taxel) selon tol√©rance.",
        ]
        suivi = [
            "Cystoscopie : /3 mois pendant 2 ans, puis /6 mois jusqu‚Äô√† 5 ans, puis 1√ó/an √† vie.",
            "Cytologie : syst√©matique.",
            "Uro-TDM : annuel recommand√©.",
        ]
        protocoles = []
    else:  # tr√®s haut
        traitement = [
            "RTUV compl√®te (qualit√© maximale).",
            *PROTO["BCG_36M"],
            *PROTO["RCP_CYSTECTOMIE"],
        ]
        suivi = [
            "Cystoscopie : /3 mois pendant 2 ans, puis /6 mois jusqu‚Äô√† 5 ans, puis 1√ó/an √† vie.",
            "Cytologie : syst√©matique.",
            "Uro-TDM : annuel obligatoire.",
        ]
        protocoles = []

    return traitement, suivi, protocoles, notes_second_look

def build_report_text(stade, grade, taille, nombre, risque, traitement, suivi, protocoles, notes_second_look) -> str:
    lines = []
    lines.append("Urology Assistant AI ‚Äî CAT TVNIM (AFU 2024‚Äì2026)")
    lines.append(f"G√©n√©r√© le : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    lines.append("")
    lines.append("== Donn√©es saisies ==")
    lines.append(f"- Stade : {stade}")
    lines.append(f"- Grade : {grade}")
    lines.append(f"- Taille max : {taille} mm")
    lines.append(f"- Nombre : {nombre}")
    lines.append("")
    lines.append(f"== Stratification du risque : {risque.upper()} ==")
    lines.append("")
    lines.append("== Traitement recommand√© ==")
    for t in traitement: lines.append(f"‚Ä¢ {t}")
    if protocoles:
        lines.append("")
        lines.append("== D√©tails de protocoles (si retenus) ==")
        for p in protocoles: lines.append(f"‚Ä¢ {p}")
    lines.append("")
    lines.append("== Modalit√©s de suivi ==")
    for s in suivi: lines.append(f"‚Ä¢ {s}")
    lines.append("")
    lines.append("== RTUV de second look : rappels (√† consid√©rer quel que soit le risque) ==")
    for n in notes_second_look: lines.append(f"‚Ä¢ {n}")
    lines.append("")
    lines.append("R√©fs : AFU 2024‚Äì2026 ‚Äî Tableau III (stratification/traitement), Tableau IV (suivi), reco RTUV de qualit√©.")
    return "\n".join(lines)

def offer_exports(report_text: str):
    html = f"""<!doctype html>
<html lang="fr"><meta charset="utf-8">
<title>CAT TVNIM</title>
<pre>{report_text}</pre>
</html>"""
    b64_html = base64.b64encode(html.encode()).decode()
    b64_txt = base64.b64encode(report_text.encode()).decode()
    st.markdown(f'<a href="data:text/html;base64,{b64_html}" download="CAT_TVNIM.html">üìÑ T√©l√©charger en HTML</a>', unsafe_allow_html=True)
    st.markdown(f'<a href="data:text/plain;base64,{b64_txt}" download="CAT_TVNIM.txt">üìù T√©l√©charger en TXT</a>', unsafe_allow_html=True)

# =========================
# Pages
# =========================
def render_home():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")

def render_vessie_menu():
    btn_home_and_back()
    st.markdown("## Tumeur de la vessie")
    st.caption("Choisissez le sous-module")
    c1, c2, c3 = st.columns(3)
    with c1: st.button("TVNIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVNIM"))
    with c2: st.button("TVIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVIM"))
    with c3: st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Vessie: M√©tastatique"))

def render_tvnim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVNIM (tumeur n‚Äôinfiltrant pas le muscle)")

    with st.form("tvnim_form"):
        stade = st.selectbox("Stade tumoral", ["pTa", "pT1"])
        grade = st.selectbox("Grade tumoral", ["Bas grade", "Haut grade"])
        taille = st.slider("Taille maximale (mm)", 1, 100, 10)
        nombre = st.selectbox("Nombre de tumeurs", ["Unique", "Multiple", "Papillomatose v√©sicale"])
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT")

    if submitted:
        risque = stratifier_tvnim(stade, grade, taille, nombre)
        traitement, suivi, protocoles, notes_second_look = plan_tvnim(risque)

        st.subheader(f"üìä Risque estim√© : {risque.upper()}")
        st.markdown("### üíä Traitement")
        for t in traitement: st.markdown("- " + t)

        if protocoles:
            st.markdown("### üì¶ Protocoles d√©taill√©s (si s√©lectionn√©s)")
            for p in protocoles: st.markdown("- " + p)

        st.markdown("### üìÖ Suivi")
        for s in suivi: st.markdown("- " + s)

        st.markdown("### üìù RTUV de second look ‚Äî rappels (quel que soit le risque)")
        for n in notes_second_look: st.markdown("- " + n)

        # Image de protocole (sch√©ma commun BCG/MMC pour les 3 risques)
        try:
            st.markdown("### üñºÔ∏è Sch√©ma visuel des protocoles (BCG / MMC)")
            st.image(PROTO_IMG_PATH, use_column_width=True, caption="Calendrier indicatif : cystoscopie/cytologie, MMC (induction + entretien possible), BCG (induction + entretien 12/36 mois).")
        except Exception:
            st.warning("Image du protocole non trouv√©e. V√©rifie le chemin PROTO_IMG_PATH.")

        # Export
        report_text = build_report_text(stade, grade, taille, nombre, risque, traitement, suivi, protocoles, notes_second_look)
        st.markdown("### üì§ Export")
        offer_exports(report_text)

def render_tvim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVIM (tumeur infiltrant le muscle)")
    st.info("Placeholder ‚Äî √† impl√©menter")

def render_vessie_meta_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ Tumeur de la vessie m√©tastatique")
    st.info("Placeholder ‚Äî √† impl√©menter")

def render_generic(label: str):
    btn_home_and_back()
    st.header(f"üî∑ {label}")
    st.info("Module en cours de construction")

# --- Routing ---
page = st.session_state["page"]
if page == "Accueil":
    render_home()
elif page == "Tumeur de la vessie":
    render_vessie_menu()
elif page == "Vessie: TVNIM":
    render_tvnim_page()
elif page == "Vessie: TVIM":
    render_tvim_page()
elif page == "Vessie: M√©tastatique":
    render_vessie_meta_page()
else:
    render_generic(page)
