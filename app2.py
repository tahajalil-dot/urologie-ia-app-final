# app.py ‚Äî Urology Assistant AI (Accueil + Vessie + Rein + HBP)
# Version int√©gr√©e : 2025-09-02
# Modules inclus :
# - Vessie (TVNIM, TVIM, M√©tastatique)
# - Rein (Non m√©tastatique, M√©tastatique ‚Äî IMDC/Heng ou MSKCC/Motzer)
# - HBP (PSAD + Options num√©rot√©es)

import base64
from datetime import datetime
from pathlib import Path
import html as ihtml
import io
import streamlit as st

# =========================
# CONFIG + THEME CLAIR (VERT)
# =========================
st.set_page_config(page_title="Urology Assistant AI", layout="wide")

st.markdown("""
<style>
:root, html, body, .stApp, .block-container { background:#ffffff !important; color:#111 !important; }
[data-testid="stHeader"], header { background:#ffffff !important; }

h1,h2,h3,h4,h5,h6 { color:#0B5D3B !important; }
a, a:visited { color:#0B5D3B !important; }

[data-testid="stMarkdownContainer"] p,
[data-testid="stMarkdownContainer"] li,
[data-testid="stMarkdownContainer"] span,
[data-testid="stMarkdownContainer"] div { color:#111 !important; }

.stButton > button {
  background:#0B5D3B !important; color:#fff !important; border-radius:10px; padding:0.6rem 1rem; border:none;
}
.stButton > button:hover { background:#0E744C !important; }

.header-green {
  padding:18px 22px; background:linear-gradient(90deg,#F6FBF7,#EAF6EE);
  border:1px solid #d8eadf; border-radius:12px; margin-bottom:18px;
}

.cat-bar { height:6px; background:#DFF3E6; border-radius:6px; margin-bottom:12px; }

.kv-table { width:100%; border-collapse:separate; border-spacing:0; }
.kv-table thead th {
  background:#ECF7F0; color:#0B5D3B; font-weight:700; text-align:left;
  border-bottom:1px solid #dfece5; padding:10px 12px;
}
.kv-table tbody td {
  background:#ffffff; color:#111; padding:10px 12px; border-bottom:1px solid #f0f5f2;
}
.kv-table tbody tr:last-child td { border-bottom:none; }
.kv-table td:first-child { width:38%; }
.kv-table td strong { color:#0B5D3B; }
.section-block { margin-top: 0.6rem; margin-bottom: 1.2rem; }
</style>
""", unsafe_allow_html=True)

APP_TITLE = "Urology Assistant AI"
APP_SUBTITLE = "Assistant intelligent pour la d√©cision clinique ‚Äî *d√©mo, ne remplace pas les RBP officielles*"

MODULES = [
    "Tumeur de la vessie",
    "Tumeurs des voies excr√©trices",
    "Tumeur de la prostate",
    "Tumeur du rein",
    "Hypertrophie b√©nigne de la prostate (HBP)",
    "Lithiase",
    "Infectiologie",
]
PALETTE = {m: "#DFF3E6" for m in MODULES}

if "page" not in st.session_state:
    st.session_state["page"] = "Accueil"

# =========================
# HELPERS UI
# =========================

def go_home():
    st.session_state["page"] = "Accueil"
    st.rerun()

def go_module(label: str):
    st.session_state["page"] = label
    st.rerun()

def category_button(label: str, color: str, key: str):
    with st.container():
        clicked = st.button(f"{label}  ‚Ä∫", key=key, use_container_width=True)
        st.markdown(f"<div class='cat-bar' style='background:{color}'></div>", unsafe_allow_html=True)
        if clicked:
            go_module(label)

def top_header():
    st.markdown(f"<div class='header-green'><h1 style='margin:0;font-weight:800;font-size:28px'>{APP_TITLE}</h1></div>", unsafe_allow_html=True)

def btn_home_and_back(show_back: bool = False, back_label: str = "Tumeur de la vessie"):
    cols = st.columns([1, 3])
    with cols[0]:
        st.button("üè† Accueil", on_click=go_home)
    if show_back:
        with cols[1]:
            st.button(f"‚¨ÖÔ∏è Retour : {back_label}", on_click=lambda: go_module(back_label))

def esc(x: str) -> str:
    return ihtml.escape(str(x))

def render_kv_table(title, pairs, col1="√âl√©ment", col2="D√©tail"):
    if not pairs: return
    st.markdown(f"### {esc(title)}")
    html = [f"<div class='section-block'><table class='kv-table'><thead><tr><th>{esc(col1)}</th><th>{esc(col2)}</th></tr></thead><tbody>"]
    for k, v in pairs:
        html.append(f"<tr><td><strong>{esc(k)}</strong></td><td>{esc(v)}</td></tr>")
    html.append("</tbody></table></div>")
    st.markdown("".join(html), unsafe_allow_html=True)

def build_report_text(title: str, sections: dict) -> str:
    lines = []
    lines.append(f"Urology Assistant AI ‚Äî {title}")
    lines.append(f"G√©n√©r√© le : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    lines.append("")
    for sec, arr in sections.items():
        if not arr: continue
        lines.append(f"== {sec} ==")
        for x in arr:
            lines.append(f"‚Ä¢ {x}")
        lines.append("")
    lines.append("R√©fs : AFU/EAU ‚Äî version simplifi√©e.")
    return "\n".join(lines)

def offer_exports(report_text: str, basename: str):
    bio = io.BytesIO(report_text.encode("utf-8"))
    st.download_button("üìù T√©l√©charger .txt", data=bio, file_name=f"{basename}.txt")
    html = f"<!doctype html><html lang='fr'><meta charset='utf-8'><title>{basename}</title><pre>{ihtml.escape(report_text)}</pre></html>"
    st.download_button("üìÑ T√©l√©charger .html", data=html.encode("utf-8"), file_name=f"{basename}.html", mime="text/html")

# =========================
# LOGIQUE CLINIQUE ‚Äî Rein (localis√© + m√©tastatique)
# =========================

def plan_rein_local(
    cT: str,
    cN_pos: bool,
    size_cm: float,
    thrombus: str,  # "Aucun", "Veine r√©nale", "VCC infra-h√©patique", "VCC supra-h√©patique/atrium"
    rein_unique_ou_CKD: bool,
    tumeur_hilaire: bool,
    exophytique: bool,
    age: int,
    haut_risque_op: bool,
    biopsie_dispo: bool,
):
    """
    Renvoie dict {donnees, traitement (list), suivi (list), notes (list)} avec options num√©rot√©es.
    Logique synth√©tique (√† adapter aux RBP locales).
    """
    donnees = [
        ("cT", cT),
        ("cN+", "Oui" if cN_pos else "Non"),
        ("Taille", f"{size_cm:.1f} cm"),
        ("Thrombus", thrombus),
        ("Rein unique/CKD", "Oui" if rein_unique_ou_CKD else "Non"),
        ("Tumeur hilaire/centrale", "Oui" if tumeur_hilaire else "Non"),
        ("Exophytique", "Oui" if exophytique else "Non"),
        ("√Çge", f"{age} ans"),
        ("Haut risque op√©ratoire", "Oui" if haut_risque_op else "Non"),
        ("Biopsie disponible", "Oui" if biopsie_dispo else "Non"),
    ]

    options = []
    idx = 1
    notes = []

    if not biopsie_dispo:
        notes.append("Biopsie √† discuter si traitement focal/surveillance pr√©vue, doute diagnostique, ou avant syst√©mique.")

    # D√©cision par stade clinique (TNM 2017)
    if cT == "T1a":  # ‚â§ 4 cm
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle (standard). Approche robot/LP/ouverte selon plateau."); idx += 1
        if size_cm <= 4.0 and exophytique:
            options.append(f"Option {idx} : traitement focal ‚Äî Cryoablation ou RFA percutan√©e (‚â§3‚Äì4 cm, exophytique/post√©rieure, fragilit√©)."); idx += 1
        options.append(f"Option {idx} : surveillance active ‚Äî Imagerie √† 3‚Äì6 mois puis 6‚Äì12 mois; d√©clencheurs = croissance rapide/sympt√¥mes/haut grade confirm√©."); idx += 1
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale si NP non faisable (anatomie/hilaire) ou rein non fonctionnel."); idx += 1

    elif cT == "T1b":  # 4‚Äì7 cm
        if rein_unique_ou_CKD:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle en centre expert (pr√©server la fonction r√©nale)."); idx += 1
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale si NP non faisable."); idx += 1
        else:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle (s√©lectionn√©) OU N√©phrectomie totale selon complexit√© (hilaire/endophytique ‚Üí plut√¥t NT)."); idx += 1
        options.append(f"Option {idx} : surveillance active ‚Äî Uniquement si comorbidit√©s majeures/inop√©rable (RCP)."); idx += 1

    elif cT in ("T2a", "T2b"):
        if rein_unique_ou_CKD:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle *imp√©rative* (centre expert) OU N√©phrectomie totale si NP impossible."); idx += 1
        else:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale (standard)."); idx += 1
        options.append(f"Option {idx} : surveillance ‚Äî Seulement si inop√©rable/fragilit√© majeure (RCP, soins de support)."); idx += 1

    elif cT == "T3a":
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale avec ex√©r√®se graisse p√©ri-r√©nale ¬± veine r√©nale (si envahie)."); idx += 1
        if rein_unique_ou_CKD:
            options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie partielle *imp√©rative* (centre expert) si anatomie favorable."); idx += 1

    elif cT in ("T3b", "T3c"):
        options.append(f"Option {idx} : traitement chirurgical ‚Äî N√©phrectomie totale + thrombectomie (niveau {thrombus}). √âquipe vasculaire/cardiothoracique si VCC."); idx += 1
        options.append(f"Option {idx} : strat√©gie ‚Äî Discussion RCP sp√©cialis√©e (op√©rabilit√© vs traitement syst√©mique d‚Äôembl√©e)."); idx += 1

    elif cT == "T4":
        options.append(f"Option {idx} : traitement chirurgical ‚Äî R√©section √©largie si r√©s√©cable (RCP de recours)."); idx += 1
        options.append(f"Option {idx} : strat√©gie ‚Äî Traitement syst√©mique d‚Äôembl√©e si non r√©s√©cable."); idx += 1

    # Ad√©nopathies
    if cN_pos:
        notes.append("Curage ganglionnaire cibl√© si ad√©nopathies cliniquement envahies; curage √©tendu syst√©matique non recommand√©.")

    # Adjuvant (info g√©n√©rale)
    notes.append("Adjuvant : pembrolizumab 12 mois √† discuter chez ccRCC √† haut risque (profils type KEYNOTE-564).")

    # Suivi post-traitement (simplifi√© par risque)
    suivi = []
    if cT == "T1a" and not cN_pos:
        suivi += [
            "Imagerie abdo ¬± thorax : √† 12 mois, puis annuelle jusqu‚Äô√† 5 ans (adapter selon histologie/grade).",
            "Fonction r√©nale : cr√©at/DFG √† chaque visite; PA, bilan m√©tabolique."
        ]
    elif cT in ("T1b", "T2a", "T2b") and not cN_pos:
        suivi += [
            "Imagerie : tous les 6‚Äì12 mois pendant 3 ans, puis annuelle jusqu‚Äô√† 5 ans.",
            "Biologie : cr√©at/DFG, ¬± Hb/Ca selon contexte."
        ]
    else:  # T3/T4 ou N+
        suivi += [
            "Imagerie : tous les 3‚Äì6 mois pendant 3 ans, puis tous les 6‚Äì12 mois jusqu‚Äô√† 5 ans.",
            "Biologie : cr√©at/DFG, Hb, Ca; √©valuer sympt√¥mes cibl√©s."
        ]

    return {"donnees": donnees, "traitement": options, "suivi": suivi, "notes": notes}


def calc_imdc(
    karnofsky_lt80: bool,
    time_to_systemic_le_12mo: bool,
    hb_basse: bool,
    calcium_haut: bool,
    neutro_hauts: bool,
    plaquettes_hautes: bool,
):
    """Heng/IMDC : 6 facteurs (KPS<80, d√©lai<1 an, Hb basse, Ca haut, neutros hauts, plaquettes hautes)."""
    score = sum([
        karnofsky_lt80,
        time_to_systemic_le_12mo,
        hb_basse,
        calcium_haut,
        neutro_hauts,
        plaquettes_hautes,
    ])
    if score == 0:
        groupe = "Bon pronostic (0)"
    elif score in (1, 2):
        groupe = "Interm√©diaire (1‚Äì2)"
    else:
        groupe = "Mauvais (‚â•3)"
    return score, groupe


def calc_mskcc(
    karnofsky_lt80: bool,
    time_to_systemic_le_12mo: bool,
    hb_basse: bool,
    calcium_haut: bool,
    ldh_haut: bool,
):
    """MSKCC/Motzer : 5 facteurs (KPS<80, d√©lai<1 an, Hb basse, Ca haut, LDH √©lev√©)."""
    score = sum([
        karnofsky_lt80,
        time_to_systemic_le_12mo,
        hb_basse,
        calcium_haut,
        ldh_haut,
    ])
    if score == 0:
        groupe = "Bon pronostic (0)"
    elif score in (1, 2):
        groupe = "Interm√©diaire (1‚Äì2)"
    else:
        groupe = "Mauvais (‚â•3)"
    return score, groupe


def plan_rein_meta(
    histo: str,             # "ccRCC" ou "non-ccRCC"
    score: int,
    group: str,
    score_system_label: str,
    oligo: bool,
    bone: bool,
    brain: bool,
    liver: bool,
    io_contra: bool,
):
    """
    Renvoie dict {donnees, stratification, traitement (list), suivi (list), notes (list)}.
    Enum√®re les options 1, 2, 3... selon pronostic et histologie (mol√©cules sans doses).
    """
    donnees = [
        ("Histologie", histo),
        (f"{score_system_label} score", str(score)),
        (f"Groupe {score_system_label}", group),
        ("Oligom√©tastatique", "Oui" if oligo else "Non"),
        ("M√©tastases osseuses", "Oui" if bone else "Non"),
        ("C√©r√©brales", "Oui" if brain else "Non"),
        ("H√©patiques", "Oui" if liver else "Non"),
        ("CI immunoth√©rapie", "Oui" if io_contra else "Non"),
    ]

    options = []
    idx = 1
    notes = []

    # Maladie oligom√©tastatique
    if oligo:
        notes.append("Oligom√©tastatique : envisager m√©tastasectomie et/ou radioth√©rapie st√©r√©otaxique sur sites s√©lectionn√©s.")

    # ccRCC vs non-ccRCC
    if histo == "ccRCC":
        if "Bon" in group:  # IMDC/MSKCC bon pronostic
            if not io_contra:
                options.append(f"Option {idx} : syst√©mique ‚Äî Pembrolizumab + Axitinib."); idx += 1
                options.append(f"Option {idx} : syst√©mique ‚Äî Pembrolizumab + Lenvatinib."); idx += 1
                options.append(f"Option {idx} : syst√©mique ‚Äî Nivolumab + Cabozantinib."); idx += 1
                options.append(f"Option {idx} : strat√©gie ‚Äî Surveillance rapproch√©e (indolent, charge tumorale faible)."); idx += 1
            options.append(f"Option {idx} : syst√©mique ‚Äî TKI seul (Axitinib, Pazopanib, Sunitinib, Tivozanib) si CI √† l‚Äôimmunoth√©rapie."); idx += 1
        else:  # interm√©diaire/mauvais
            if not io_contra:
                options.append(f"Option {idx} : syst√©mique ‚Äî Nivolumab + Ipilimumab."); idx += 1
                options.append(f"Option {idx} : syst√©mique ‚Äî Pembrolizumab + Lenvatinib."); idx += 1
                options.append(f"Option {idx} : syst√©mique ‚Äî Nivolumab + Cabozantinib."); idx += 1
                options.append(f"Option {idx} : syst√©mique ‚Äî Pembrolizumab + Axitinib."); idx += 1
            options.append(f"Option {idx} : syst√©mique ‚Äî TKI seul (Cabozantinib, Axitinib, Sunitinib, Tivozanib) si CI √† l‚Äôimmunoth√©rapie."); idx += 1
    else:
        # non-ccRCC (global)
        options.append(f"Option {idx} : syst√©mique ‚Äî Cabozantinib (pr√©f√©rence pour papillaire)."); idx += 1
        options.append(f"Option {idx} : syst√©mique ‚Äî Pembrolizumab + Lenvatinib."); idx += 1
        options.append(f"Option {idx} : syst√©mique ‚Äî Sunitinib ou Pazopanib."); idx += 1
        options.append(f"Option {idx} : syst√©mique ‚Äî Lenvatinib + Everolimus (s√©lectionn√©, ex. chromophobe/ind√©termin√©)."); idx += 1
        options.append(f"Option {idx} : chimioth√©rapie ‚Äî Gemcitabine + (Cisplatine/Carboplatine) pour sous-types agressifs (collecting-duct/medullaire)."); idx += 1
        options.append(f"Option {idx} : strat√©gie ‚Äî Essai clinique si disponible."); idx += 1

    # N√©phrectomie de cytor√©duction (principes)
    notes.append("N√©phrectomie de cytor√©duction : imm√©diate (bon pronostic et tumeur r√©nale dominante), diff√©r√©e (interm√©diaire/mauvais apr√®s r√©ponse au syst√©mique), ou de cl√¥ture si RC/PR majeure.")

    # Sites particuliers
    if bone:
        notes.append("Os : acide zol√©dronique ou denosumab + Ca/Vit D; radioth√©rapie antalgique si douloureux.")
    if brain:
        notes.append("Cerveau : st√©r√©otaxie/chirurgie + st√©ro√Ødes selon sympt√¥mes; coordination neuro-oncologie.")

    # Suivi (m√©tastatique)
    suivi = [
        "Bilan initial : TDM TAP ¬± c√©r√©brale selon sympt√¥mes; biologie (fonction r√©nale/h√©patique, Hb, Ca; TSH si IO/TKI).",
        "R√©√©valuation : imagerie toutes 8‚Äì12 semaines au d√©but, puis adapter selon r√©ponse/clinique.",
        "Toxicit√©s : PA/prot√©inurie (TKI), TSH/lipase/transaminases (IO/TKI), et sympt√¥mes immuno (dermato, colite, pneumonite).",
    ]

    return {
        "donnees": donnees,
        "stratification": [(score_system_label, f"{group} (score {score})")],
        "traitement": options,
        "suivi": suivi,
        "notes": notes,
    }


# =========================
# PAGES (UI)
# =========================

def render_kidney_menu():
    btn_home_and_back()
    st.markdown("## Tumeur du rein")
    st.caption("Choisissez le sous-module")
    c1, c2 = st.columns(2)
    with c1:
        st.button("Non m√©tastatique", use_container_width=True, on_click=lambda: go_module("Rein: Non m√©tastatique"))
    with c2:
        st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Rein: M√©tastatique"))


def render_kidney_local_page():
    btn_home_and_back(show_back=True, back_label="Tumeur du rein")
    st.header("üî∑ Rein ‚Äî tumeur non m√©tastatique")
    with st.form("kidney_local_form"):
        cT = st.selectbox("Stade cT (TNM 2017)", ["T1a", "T1b", "T2a", "T2b", "T3a", "T3b", "T3c", "T4"])
        cN_pos = st.radio("Ad√©nopathies cliniques (cN+) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        size_cm = st.number_input("Taille max (cm)", min_value=0.5, max_value=25.0, value=3.0, step=0.1)
        thrombus = st.selectbox("Thrombus veineux", ["Aucun", "Veine r√©nale", "VCC infra-h√©patique", "VCC supra-h√©patique/atrium"])
        rein_unique_ou_CKD = st.radio("Rein unique ou CKD significative ?", ["Non", "Oui"], horizontal=True) == "Oui"
        tumeur_hilaire = st.radio("Tumeur hilaire/centrale ?", ["Non", "Oui"], horizontal=True) == "Oui"
        exophytique = st.radio("Tumeur exophytique ?", ["Oui", "Non"], horizontal=True) == "Oui"
        age = st.number_input("√Çge (ans)", min_value=18, max_value=100, value=62)
        haut_risque_op = st.radio("Haut risque op√©ratoire ?", ["Non", "Oui"], horizontal=True) == "Oui"
        biopsie_dispo = st.radio("Biopsie disponible ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì Rein non m√©tastatique")

    if submitted:
        plan = plan_rein_local(
            cT, cN_pos, size_cm, thrombus, rein_unique_ou_CKD, tumeur_hilaire,
            exophytique, age, haut_risque_op, biopsie_dispo
        )
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        st.markdown("### üíä Traitement ‚Äî Options num√©rot√©es")
        for x in plan["traitement"]:
            st.markdown("- " + x)
        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Traitement (options)": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Rein non m√©tastatique", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Rein_Non_Metastatique")


def render_kidney_meta_page():
    btn_home_and_back(show_back=True, back_label="Tumeur du rein")
    st.header("üî∑ Rein ‚Äî tumeur m√©tastatique")
    with st.form("kidney_meta_form"):
        histo = st.selectbox("Histologie pr√©sum√©e/confirm√©e", ["ccRCC", "non-ccRCC (papillaire/chromophobe/autre)"])
        risk_system = st.radio("Classification pronostique", ["IMDC (Heng)", "MSKCC (Motzer)"], horizontal=True)

        # Variables communes
        st.markdown("#### Variables communes")
        kps = st.slider("Karnofsky (%)", 50, 100, 90, step=10)
        karnofsky_lt80 = (kps < 80)
        time_le_12 = st.radio("D√©lai diagnostic ‚Üí traitement syst√©mique ‚â§ 12 mois ?", ["Non", "Oui"], horizontal=True) == "Oui"
        hb_basse = st.radio("Hb < LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
        ca_haut = st.radio("Calcium corrig√© > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"

        # Variables sp√©cifiques
        if risk_system.startswith("IMDC"):
            st.markdown("#### Variables sp√©cifiques IMDC (Heng)")
            neutro_hauts = st.radio("Neutrophiles > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
            plaquettes_hautes = st.radio("Plaquettes > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
            ldh_haut = False
        else:
            st.markdown("#### Variables sp√©cifiques MSKCC (Motzer)")
            ldh_haut = st.radio("LDH > LSN ?", ["Non", "Oui"], horizontal=True) == "Oui"
            neutro_hauts = False
            plaquettes_hautes = False

        # Sites et CI IO
        st.markdown("#### Charge tumorale & sites")
        oligo = st.radio("Oligom√©tastatique (nombre limit√©, r√©s√©cable/irradiable) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bone = st.radio("M√©tastases osseuses ?", ["Non", "Oui"], horizontal=True) == "Oui"
        brain = st.radio("M√©tastases c√©r√©brales ?", ["Non", "Oui"], horizontal=True) == "Oui"
        liver = st.radio("M√©tastases h√©patiques ?", ["Non", "Oui"], horizontal=True) == "Oui"
        io_contra = st.radio("Contre-indication √† l‚Äôimmunoth√©rapie ?", ["Non", "Oui"], horizontal=True) == "Oui"

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì Rein m√©tastatique")

    if submitted:
        if risk_system.startswith("IMDC"):
            score, group = calc_imdc(karnofsky_lt80, time_le_12, hb_basse, ca_haut, neutro_hauts, plaquettes_hautes)
            label = "IMDC (Heng)"
        else:
            score, group = calc_mskcc(karnofsky_lt80, time_le_12, hb_basse, ca_haut, ldh_haut)
            label = "MSKCC (Motzer)"

        plan = plan_rein_meta(
            "ccRCC" if "ccRCC" in histo else "non-ccRCC",
            score, group, label, oligo, bone, brain, liver, io_contra
        )

        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])
        render_kv_table("üìä Stratification", plan["stratification"], "Syst√®me", "R√©sultat")

        st.markdown("### üíä Traitement ‚Äî Options num√©rot√©es")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        st.markdown("### üìÖ Modalit√©s de suivi")
        for x in plan["suivi"]:
            st.markdown("- " + x)

        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Stratification": [f"{label}: {group} (score {score})"],
            "Traitement (options)": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT Rein m√©tastatique", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Rein_Metastatique")


# ... (toutes les fonctions render_xxx d√©j√† int√©gr√©es : rein local, rein meta, hbp, vessie...)

# =========================
# ROUTING
# =========================

page = st.session_state["page"]
if page == "Accueil":
    render_home_wrapper()
elif page == "Tumeur de la vessie":
    render_vessie_menu()
elif page.startswith("Vessie:"):
    if page == "Vessie: TVNIM": render_tvnim_page()
    elif page == "Vessie: TVIM": render_tvim_page()
    elif page == "Vessie: M√©tastatique": render_vessie_meta_page()
elif page == "Tumeur du rein":
    render_kidney_menu()
elif page == "Rein: Non m√©tastatique":
    render_kidney_local_page()
elif page == "Rein: M√©tastatique":
    render_kidney_meta_page()
elif page == "Hypertrophie b√©nigne de la prostate (HBP)":
    render_hbp_page()
else:
    render_generic(page)
