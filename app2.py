# app.py ‚Äî Urology Assistant AI (Accueil + Vessie -> TVNIM/TVIM/M√©tastatique + HBP refait)
import streamlit as st
import base64
from datetime import datetime
from pathlib import Path
import html as ihtml

# =========================
# CONFIG + THEME CLAIR (VERT)
# =========================
st.set_page_config(page_title="Urology Assistant AI", layout="wide")

st.markdown("""
<style>
:root, html, body, .stApp, .block-container { background:#ffffff !important; color:#111 !important; }
[data-testid="stHeader"], header { background:#ffffff !important; }

/* Titres & liens */
h1,h2,h3,h4,h5,h6 { color:#0B5D3B !important; }
a, a:visited { color:#0B5D3B !important; }

/* Texte markdown par d√©faut */
[data-testid="stMarkdownContainer"] p,
[data-testid="stMarkdownContainer"] li,
[data-testid="stMarkdownContainer"] span,
[data-testid="stMarkdownContainer"] div { color:#111 !important; }

/* Boutons */
.stButton > button {
  background:#0B5D3B !important; color:#fff !important; border-radius:10px; padding:0.6rem 1rem; border:none;
}
.stButton > button:hover { background:#0E744C !important; }

/* Inputs */
div[data-baseweb="select"] > div,
.stTextInput input, .stTextArea textarea, .stNumberInput input {
  background:#fff !important; color:#111 !important; border:1px solid #e4efe8 !important;
}

/* En-t√™te (gradient vert tr√®s clair) */
.header-green {
  padding:18px 22px; background:linear-gradient(90deg,#F6FBF7,#EAF6EE);
  border:1px solid #d8eadf; border-radius:12px; margin-bottom:18px;
}

/* Barre d√©corative sous les cat√©gories */
.cat-bar { height:6px; background:#DFF3E6; border-radius:6px; margin-bottom:12px; }

/* Tableaux (HTML) pour Donn√©es & Stratification */
.kv-table { width:100%; border-collapse:separate; border-spacing:0; }
.kv-table thead th {
  background:#ECF7F0; color:#0B5D3B; font-weight:700; text-align:left;
  border-bottom:1px solid #dfece5; padding:10px 12px;
}
.kv-table tbody td {
  background:#ffffff; color:#111; padding:10px 12px; border-bottom:1px solid #f0f5f2;
}
.kv-table tbody tr:last-child td { border-bottom:none; }
.kv-table td:first-child { width:38%; }
.kv-table td strong { color:#0B5D3B; }
.section-block { margin-top: 0.6rem; margin-bottom: 1.2rem; }
</style>
""", unsafe_allow_html=True)

APP_TITLE = "Urology Assistant AI"
APP_SUBTITLE = "Assistant intelligent pour la d√©cision clinique align√© AFU 2024‚Äì2026"

MODULES = [
    "Tumeur de la vessie",
    "Tumeurs des voies excr√©trices",
    "Tumeur de la prostate",
    "Tumeur du rein",
    "Hypertrophie b√©nigne de la prostate (HBP)",
    "Lithiase",
    "Infectiologie",
]
PALETTE = {m: "#DFF3E6" for m in MODULES}

if "page" not in st.session_state:
    st.session_state["page"] = "Accueil"

# =========================
# HELPERS UI
# =========================
def go_home():
    st.session_state["page"] = "Accueil"
    st.rerun()

def go_module(label: str):
    st.session_state["page"] = label
    st.rerun()

def category_button(label: str, color: str, key: str):
    with st.container():
        clicked = st.button(f"{label}  ‚Ä∫", key=key, use_container_width=True)
        st.markdown(f"<div class='cat-bar' style='background:{color}'></div>", unsafe_allow_html=True)
        if clicked:
            go_module(label)

def top_header():
    st.markdown(
        f"<div class='header-green'><h1 style='margin:0;font-weight:800;font-size:28px'>{APP_TITLE}</h1></div>",
        unsafe_allow_html=True,
    )

def btn_home_and_back(show_back: bool = False, back_label: str = "Tumeur de la vessie"):
    cols = st.columns([1, 3])
    with cols[0]:
        st.button("üè† Accueil", on_click=go_home)
    if show_back:
        with cols[1]:
            st.button(f"‚¨ÖÔ∏è Retour : {back_label}", on_click=lambda: go_module(back_label))

# ===== Tableaux (HTML 2 colonnes) ‚Äî pour Donn√©es & Stratification =====
def esc(x: str) -> str:
    return ihtml.escape(str(x))

def render_kv_table(title, pairs, col1="√âl√©ment", col2="D√©tail"):
    if not pairs: return
    st.markdown(f"### {esc(title)}")
    html = [f"<div class='section-block'><table class='kv-table'><thead><tr><th>{esc(col1)}</th><th>{esc(col2)}</th></tr></thead><tbody>"]
    for k, v in pairs:
        html.append(f"<tr><td><strong>{esc(k)}</strong></td><td>{esc(v)}</td></tr>")
    html.append("</tbody></table></div>")
    st.markdown("".join(html), unsafe_allow_html=True)

# ===== Export helpers =====
def build_report_text(title: str, sections: dict) -> str:
    lines = []
    lines.append(f"Urology Assistant AI ‚Äî {title} (AFU 2024‚Äì2026)")
    lines.append(f"G√©n√©r√© le : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    lines.append("")
    for sec, arr in sections.items():
        if not arr: continue
        lines.append(f"== {sec} ==")
        for x in arr:
            lines.append(f"‚Ä¢ {x}")
        lines.append("")
    lines.append("R√©fs : AFU/EAU ‚Äî synth√®se actualis√©e.")
    return "\n".join(lines)

def offer_exports(report_text: str, basename: str):
    html = f"""<!doctype html>
<html lang="fr"><meta charset="utf-8">
<title>{basename}</title>
<pre>{report_text}</pre>
</html>"""
    b64_html = base64.b64encode(html.encode()).decode()
    b64_txt = base64.b64encode(report_text.encode()).decode()
    st.markdown(f'<a href="data:text/html;base64,{b64_html}" download="{basename}.html">üìÑ T√©l√©charger en HTML</a>', unsafe_allow_html=True)
    st.markdown(f'<a href="data:text/plain;base64,{b64_txt}" download="{basename}.txt">üìù T√©l√©charger en TXT</a>', unsafe_allow_html=True)

# =========================
# IMAGE DES PROTOCOLES (facultatif)
# =========================
PROTO_URL = ""  # ‚Üê colle ici l‚ÄôURL raw d‚Äôun sch√©ma si tu veux l‚Äôafficher
CANDIDATE_PATHS = [
    Path(__file__).parent / "assets" / "protocoles_tvnim.png",
    Path(__file__).parent / "protocoles_tvnim.png",
]
def show_protocol_image():
    st.markdown("### üñºÔ∏è Sch√©ma visuel (optionnel)")
    if PROTO_URL.strip():
        try:
            st.image(PROTO_URL.strip(), use_container_width=True)
            return
        except Exception:
            st.warning("√âchec du chargement via l‚ÄôURL ‚Äî on tente les fichiers locaux‚Ä¶")
    for p in CANDIDATE_PATHS:
        if p.exists():
            st.image(str(p), use_container_width=True)
            return
    up = st.file_uploader("üìé Importer une image (png/jpg) ‚Äî optionnel", type=["png", "jpg", "jpeg"])
    if up is not None:
        st.image(up, use_container_width=True)

# =========================
# LOGIQUE CLINIQUE ‚Äî HBP (refait, PSAD uniquement)
# =========================
def classer_ipss(ipss: int) -> str:
    if ipss <= 7: return "l√©gers"
    if ipss <= 19: return "mod√©r√©s"
    return "s√©v√®res"

def eval_suspicion_adk(psa_total: float, volume_ml: int, tr_suspect: bool):
    """
    TRIAGE CANCER (ADK) BAS√â SUR PSAD UNIQUEMENT (PSA 4‚Äì10) + TR.
    Retourne (suspect_adk: bool, explications: list[str], psad: float|None).
    R√®gles:
      - TR suspect ‚Üí ADK
      - PSA ‚â• 10 ‚Üí ADK
      - 4 ‚â§ PSA < 10 ‚Üí calcul PSAD = PSA / volume (mL)
          * PSAD > 0,15 ‚Üí ADK
          * PSAD ‚â§ 0,15 ‚Üí OK HBP
      - PSA < 4 ‚Üí OK HBP (sauf TR suspect)
    """
    exp = []
    psad = None

    # Toucher rectal
    if tr_suspect:
        exp.append("TR suspect ‚Üí orientation cancer de la prostate.")
        return True, exp, psad

    # PSA total
    if psa_total >= 10.0:
        exp.append("PSA ‚â• 10 ng/mL ‚Üí orientation cancer de la prostate.")
        return True, exp, psad

    if psa_total >= 4.0:  # plage 4‚Äì10 : utiliser PSAD
        if volume_ml > 0:
            psad = psa_total / float(volume_ml)  # ng/mL / mL
            exp.append(f"Densit√© PSA (PSAD) = {psad:.2f}.")
            if psad > 0.15:
                exp.append("PSAD > 0,15 ‚Üí crit√®re suspect.")
                return True, exp, psad
            else:
                exp.append("PSAD ‚â§ 0,15 ‚Üí on poursuit l‚Äôanalyse HBP.")
        else:
            exp.append("Volume inconnu/0 ‚Üí PSAD non calculable; prudence clinique.")

    # PSA < 4 et TR non suspect ‚Üí OK HBP
    return False, exp, psad

def plan_hbp(age: int, volume_ml: int, lobe_median: bool, ipss: int, psa_total: float,
             tr_suspect: bool, anticoag: bool, preservation_ejac: bool,
             ci_chirurgie: bool, refus_chir: bool, infections_recid: bool,
             retention: bool, calculs: bool, hematurie_recid: bool, ir_post_obstacle: bool):
    """
    Retourne dict {donnees, traitement, notes}
    - Pas de 'suivi' (retir√©).
    - Lobe m√©dian = INDICATION CHIRURGICALE (comme demand√©).
    - Modalit√©s th√©rapeutiques d√©taill√©es (m√©dical/chirurgical) + indications.
    """
    donnees = [
        ("√Çge", f"{age} ans"),
        ("Volume prostatique", f"{volume_ml} mL"),
        ("Lobe m√©dian", "Oui" if lobe_median else "Non"),
        ("IPSS", f"{ipss} ({classer_ipss(ipss)})"),
        ("PSA total", f"{psa_total:.2f} ng/mL"),
        ("TR suspect", "Oui" if tr_suspect else "Non"),
        ("Anticoagulants/antiagr√©gants", "Oui" if anticoag else "Non"),
        ("Pr√©servation √©jaculation", "Oui" if preservation_ejac else "Non"),
        ("CI/refus chirurgie", "Oui" if (ci_chirurgie or refus_chir) else "Non"),
        ("Complications", ", ".join([txt for ok, txt in [
            (infections_recid, "IU r√©cidivantes"),
            (retention, "R√©tention urinaire"),
            (calculs, "Calculs v√©sicaux"),
            (hematurie_recid, "H√©maturie r√©cidivante"),
            (ir_post_obstacle, "Alt√©ration fonction r√©nale li√©e √† l‚Äôobstacle"),
        ] if ok]) or "Aucune"),
    ]

    # 0) Triage ADK bas√© sur PSAD + TR
    suspect_adk, exp_adk, psad = eval_suspicion_adk(psa_total, volume_ml, tr_suspect)
    if psad is not None:
        donnees.append(("Densit√© PSA (PSAD)", f"{psad:.2f}"))

    if suspect_adk:
        traitement = [
            "Orientation ADK prostatique ‚Üí",
            "‚Üí IRM prostatique multiparam√©trique.",
            "‚Üí Biopsies prostatiques cibl√©es ¬± syst√©matiques (selon IRM/PIRADS).",
            "‚Üí Bilan d‚Äôextension selon risque (ex : PSMA PET-CT si disponible).",
            "‚Üí Discussion en RCP uro-oncologie.",
        ]
        notes = exp_adk
        return {"donnees": donnees, "traitement": traitement, "notes": notes}

    # 1) HBP : options th√©rapeutiques (sans suivi)
    traitement = []
    notes = []

    # A) Mesures g√©n√©rales (si sympt√¥mes l√©gers et sans complication)
    if ipss <= 7 and not any([infections_recid, retention, calculs, hematurie_recid, ir_post_obstacle, lobe_median]):
        traitement += [
            "Sympt√¥mes l√©gers ‚Üí abstention surveill√©e + r√®gles hygi√©no-di√©t√©tiques.",
            "‚Üí R√©duire caf√©ine/alcool le soir; mictions r√©guli√®res; gestion hydrique; √©viter la r√©tention prolong√©e.",
        ]

    # B) Traitement m√©dical (LUTS mod√©r√©s/s√©v√®res sans r√©tention/IR obstructive majeure)
    if ipss >= 8 and not any([retention, ir_post_obstacle]):
        traitement += [
            "Traitement m√©dical ‚Üí",
            "‚Üí Alpha-bloquant (ex : tamsulosine/silodosine) ‚Üí LUTS mod√©r√©s/s√©v√®res; effet rapide sur le d√©bit et les sympt√¥mes.",
            "‚Üí ¬± Inhibiteur 5-Œ±-r√©ductase (finast√©ride/dutast√©ride) ‚Üí prostate ‚â• 40 mL ou PSA ‚â• 1,5; effet lent (6‚Äì12 mois) ‚Üìvolume/RA.",
            "‚Üí ¬± Association alpha-bloquant + 5-ARI ‚Üí sympt√¥mes importants ET gros volume (diminuer risque de RA/CHIR).",
            "‚Üí ¬± Tadalafil 5 mg/j ‚Üí LUTS avec dysfonction √©rectile.",
            "‚Üí ¬± Antimuscarinique ou Œ≤3-agoniste ‚Üí sympt√¥mes de stockage (si RPM non √©lev√©).",
        ]
        if preservation_ejac:
            notes += ["Objectif pr√©servation √©jaculation ‚Üí informer des troubles √©jaculatoires possibles avec certains alpha-bloquants."]

    # C) Indications chirurgicales (fortes) ‚Äî inclut LOBE M√âDIAN
    indications_chir = any([
        infections_recid, retention, calculs, hematurie_recid, ir_post_obstacle, lobe_median
    ]) or (ipss >= 8 and not ci_chirurgie and not refus_chir)

    if indications_chir:
        if ci_chirurgie or refus_chir:
            # Alternatives non chirurgicales
            if volume_ml > 80:
                traitement += ["CI/refus de chirurgie avec gros volume ‚Üí embolisation art√®res prostatiques (discussion RCP)."]
            else:
                traitement += ["CI/refus de chirurgie ‚Üí optimisation m√©dicale, sondages intermittents si besoin."]
        else:
            # Choix technique selon volume + lobe m√©dian (lobe m√©dian = indication chirurgicale)
            bloc = []

            # 1) TUIP (incision cervico-prostatique)
            if volume_ml < 30 and not lobe_median:
                bloc += [
                    "TUIP (incision cervico-prostatique) ‚Üí volume < 30 mL et SANS lobe m√©dian.",
                    "‚Üí Avantages ‚Üí temps op√©ratoire court, saignement limit√©, meilleure pr√©servation √©jaculatoire.",
                    "‚Üí Limites ‚Üí risque de retraitement > RTUP √† long terme.",
                ]

            # 2) RTUP mono/bipolaire (r√©f√©rence 30‚Äì80 mL)
            if 30 <= volume_ml <= 80 or lobe_median:
                bloc += [
                    "RTUP (mono/bipolaire) ‚Üí standard 30‚Äì80 mL; aussi privil√©gi√©e en pr√©sence de lobe m√©dian.",
                    "‚Üí Bipolaire ‚Üí meilleure h√©mostase; √©limine le risque de syndrome d‚Äôabsorption (TUR syndrome).",
                ]

            # 3) PVP GreenLight (saignement/anticoagulants)
            if anticoag or (30 <= volume_ml <= 80):
                bloc += [
                    "PVP GreenLight ‚Üí alternative si risque h√©morragique/anticoagulants ou pr√©f√©rence pour h√©mostase optimale.",
                    "‚Üí Avantages ‚Üí excellente h√©mostase, s√©jour/sondage courts, ambulatoire fr√©quent.",
                ]

            # 4) √ânucl√©ations endoscopiques (HoLEP/ThuLEP/BipolEP)
            if volume_ml >= 60:
                bloc += [
                    "√ânucl√©ation endoscopique (HoLEP/ThuLEP/BipolEP) ‚Üí efficace pour moyens √† TR√àS gros volumes (‚â• 60‚Äì100+ mL).",
                    "‚Üí Avantages ‚Üí r√©sultats fonctionnels durables, h√©mostase favorable, ‚Üìdur√©e de sondage/s√©jour.",
                    "‚Üí Remarque ‚Üí courbe d‚Äôapprentissage; n√©cessite plateau exp√©riment√©.",
                ]

            # 5) Ad√©nomectomie voie haute (ouverte/robot assist√©e)
            if volume_ml > 100:
                bloc += [
                    "Ad√©nomectomie voie haute (ouverte/robot) ‚Üí si tr√®s gros volumes et/ou si √©nucl√©ation non disponible.",
                    "‚Üí R√©f√©rence historique pour tr√®s grosses prostates; morbidit√© plus √©lev√©e que l‚Äôendoscopie.",
                ]

            # 6) Implants ur√©traux (pr√©servation √©jaculation)
            if (volume_ml < 70) and (not lobe_median) and preservation_ejac:
                bloc += [
                    "Implants ur√©traux (UroLift) ‚Üí < 70 mL, SANS lobe m√©dian, objectif majeur de pr√©server l‚Äô√©jaculation.",
                ]

            # Regroupement chirurgie
            traitement += ["Prise en charge chirurgicale ‚Üí"] + ["‚Üí " + x for x in bloc]

    # Notes additionnelles
    if anticoag:
        notes += ["Anticoagulants/antiagr√©gants ‚Üí privil√©gier PVP GreenLight/HoLEP (h√©mostase sup√©rieure)."]
    if lobe_median and volume_ml < 30:
        notes += ["Lobe m√©dian pr√©sent avec petit volume ‚Üí pr√©f√©rer RTUP/√©nucl√©ation plut√¥t que TUIP."]

    return {"donnees": donnees, "traitement": traitement, "notes": notes}

# =========================
# PAGES
# =========================
def render_home():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")

def render_vessie_menu():
    btn_home_and_back()
    st.markdown("## Tumeur de la vessie")
    st.caption("Choisissez le sous-module")
    c1, c2, c3 = st.columns(3)
    with c1: st.button("TVNIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVNIM"))
    with c2: st.button("TVIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVIM"))
    with c3: st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Vessie: M√©tastatique"))

def render_tvnim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVNIM (tumeur n‚Äôinfiltrant pas le muscle)")
    with st.form("tvnim_form"):
        stade = st.selectbox("Stade tumoral", ["pTa", "pT1"])
        grade = st.selectbox("Grade tumoral", ["Bas grade", "Haut grade"])
        taille = st.slider("Taille maximale (mm)", 1, 100, 10)
        nombre = st.selectbox("Nombre de tumeurs", ["Unique", "Multiple", "Papillomatose v√©sicale"])
        cis_associe = lvi = urethre_prostatique = formes_agressives = False
        if stade == "pT1" and grade == "Haut grade":
            st.markdown("#### Facteurs aggravants (pT1 haut grade) ‚Äî cochez s‚Äôils sont pr√©sents")
            c1, c2 = st.columns(2)
            with c1:
                cis_associe = st.checkbox("CIS associ√©")
                lvi = st.checkbox("Envahissement lymphovasculaire (LVI)")
            with c2:
                urethre_prostatique = st.checkbox("Atteinte de l‚Äôur√®tre prostatique")
                formes_agressives = st.checkbox("Formes anatomo-pathologiques agressives")
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT")
    if submitted:
        risque = stratifier_tvnim(stade, grade, taille, nombre, cis_associe, lvi, urethre_prostatique, formes_agressives)
        traitement, suivi, protocoles, notes_second_look = plan_tvnim(risque)
        donnees_pairs = [("Stade", stade), ("Grade", grade), ("Taille maximale", f"{taille} mm"), ("Nombre", nombre)]
        if stade == "pT1" and grade == "Haut grade":
            if cis_associe: donnees_pairs.append(("CIS associ√©", "Oui"))
            if lvi: donnees_pairs.append(("LVI", "Oui"))
            if urethre_prostatique: donnees_pairs.append(("Atteinte ur√®tre prostatique", "Oui"))
            if formes_agressives: donnees_pairs.append(("Formes anatomo-path. agressives", "Oui"))
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        render_kv_table("üìä Stratification", [("Risque estim√©", risque.upper())], "√âl√©ment", "R√©sultat")
        st.markdown("### üíä Traitement recommand√©")
        for t in traitement: st.markdown("- " + t)
        if protocoles:
            st.markdown("### üì¶ Sch√©mas BCG (sans dose)")
            for p in protocoles: st.markdown("- " + p)
        st.markdown("### üìÖ Modalit√©s de suivi")
        for s in suivi: st.markdown("- " + s)
        st.markdown("### üìù RTUV de second look ‚Äî rappels")
        for n in notes_second_look: st.markdown("- " + n)
        # show_protocol_image()  # optionnel
        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in donnees_pairs],
            "Stratification": [f"Risque estim√© : {risque.upper()}"],
            "Traitement recommand√©": traitement + (["Sch√©mas BCG :"] + protocoles if protocoles else []),
            "Modalit√©s de suivi": suivi,
            "Rappels second look": notes_second_look,
        }
        report_text = build_report_text("CAT TVNIM", sections)
        st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_TVNIM")

def render_tvim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVIM (tumeur infiltrant le muscle)")
    with st.form("tvim_form"):
        t_cat = st.selectbox("T (clinique)", ["T2", "T3", "T4a"])
        cN_pos = st.radio("Atteinte ganglionnaire clinique (cN+) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        metastases = st.radio("M√©tastases √† distance ?", ["Non", "Oui"], horizontal=True) == "Oui"
        st.markdown("#### √âligibilit√©s & contexte")
        cis_eligible = st.radio("√âligible Cisplatine (PS 0‚Äì1, DFG ‚â•50‚Äì60‚Ä¶)?", ["Oui", "Non"], horizontal=True) == "Oui"
        t2_localise = st.radio("Tumeur T2 localis√©e (unique, mobile) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        hydron = st.radio("Hydron√©phrose ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bonne_fct_v = st.radio("Bonne fonction v√©sicale ?", ["Oui", "Non"], horizontal=True) == "Oui"
        cis_diffus = st.radio("CIS diffus ?", ["Non", "Oui"], horizontal=True) == "Oui"
        pdl1_pos = st.radio("PD-L1 positif (si dispo) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        post_op_high_risk = st.radio("pT3‚Äì4 et/ou pN+ attendu/identifi√© ?", ["Non", "Oui"], horizontal=True) == "Oui"
        neo_adjuvant_fait = st.radio("N√©oadjuvant d√©j√† r√©alis√© ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì TVIM")
    if submitted:
        plan = plan_tvim(t_cat, cN_pos, metastases, cis_eligible, t2_localise, hydron, bonne_fct_v, cis_diffus, pdl1_pos, post_op_high_risk, neo_adjuvant_fait)
        donnees_pairs = [
            ("T", t_cat), ("cN+", "Oui" if cN_pos else "Non"), ("M√©tastases", "Oui" if metastases else "Non"),
            ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"), ("T2 localis√©e (TMT possible)", "Oui" if t2_localise else "Non"),
            ("Hydron√©phrose", "Oui" if hydron else "Non"), ("Bonne fonction v√©sicale", "Oui" if bonne_fct_v else "Non"),
            ("CIS diffus", "Oui" if cis_diffus else "Non"), ("PD-L1 positif", "Oui" if pdl1_pos else "Non"),
            ("pT3‚Äì4/pN+ attendu/identifi√©", "Oui" if post_op_high_risk else "Non"), ("NAC d√©j√† faite", "Oui" if neo_adjuvant_fait else "Non"),
        ]
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        st.markdown("### üíä Traitement recommand√©");  [st.markdown("- " + x) for x in plan["traitement"]]
        st.markdown("### üìÖ Modalit√©s de suivi");      [st.markdown("- " + x) for x in plan["surveillance"]]
        if plan["notes"]:
            st.markdown("### üìù Notes");              [st.markdown("- " + x) for x in plan["notes"]]
        sections = {"Donn√©es":[f"{k}: {v}" for k,v in donnees_pairs],"Traitement recommand√©":plan["traitement"],"Modalit√©s de suivi":plan["surveillance"],"Notes":plan["notes"]}
        report_text = build_report_text("CAT TVIM", sections); st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_TVIM")

def render_vessie_meta_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ Tumeur de la vessie m√©tastatique")
    with st.form("meta_form"):
        st.markdown("#### Contexte & √©ligibilit√©")
        platinum_naive = st.radio("Jamais trait√© par platine (1re ligne) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        cis_eligible = st.radio("√âligible Cisplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
        carbo_eligible = st.radio("√âligible Carboplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
        pdl1_pos = st.radio("PD-L1 positif (si dispo) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_platinum = st.radio("A d√©j√† re√ßu un platine ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_cpi = st.radio("A d√©j√† re√ßu une immunoth√©rapie (CPI) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bone_mets = st.radio("M√©tastases osseuses ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì M√©tastatique")
    if submitted:
        plan = plan_meta(cis_eligible, carbo_eligible, platinum_naive, pdl1_pos, prior_platinum, prior_cpi, bone_mets)
        donnees_pairs = [
            ("1re ligne (na√Øf platine)", "Oui" if platinum_naive else "Non"),
            ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"),
            ("√âligible Carboplatine", "Oui" if carbo_eligible else "Non"),
            ("PD-L1 positif", "Oui" if pdl1_pos else "Non"),
            ("Platines re√ßus", "Oui" if prior_platinum else "Non"),
            ("CPI re√ßu", "Oui" if prior_cpi else "Non"),
            ("M√©tastases osseuses", "Oui" if bone_mets else "Non"),
        ]
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        st.markdown("### üíä Traitement recommand√©"); [st.markdown("- " + x) for x in plan["traitement"]]
        st.markdown("### üìÖ Modalit√©s de suivi");     [st.markdown("- " + x) for x in plan["suivi"]]
        if plan["notes"]:
            st.markdown("### üìù Notes");             [st.markdown("- " + x) for x in plan["notes"]]
        sections = {"Donn√©es":[f"{k}: {v}" for k,v in donnees_pairs],"Traitement recommand√©":plan["traitement"],"Modalit√©s de suivi":plan["suivi"],"Notes":plan["notes"]}
        report_text = build_report_text("CAT Vessie M√©tastatique", sections); st.markdown("### üì§ Export"); offer_exports(report_text, "CAT_Vessie_Metastatique")

# -------------------------
# HBP (UI)
# -------------------------
def render_hbp_page():
    btn_home_and_back()
    st.header("üî∑ Hypertrophie b√©nigne de la prostate (HBP) ‚Äî triage PSAD + CAT d√©taill√©e")

    with st.form("hbp_form"):
        age = st.number_input("√Çge", min_value=40, max_value=100, value=65)
        volume = st.number_input("Volume prostatique (mL)", min_value=10, max_value=250, value=45)
        lobe_median = st.radio("Lobe m√©dian pr√©sent ?", ["Non", "Oui"], horizontal=True) == "Oui"
        ipss = st.slider("Score IPSS", 0, 35, 18)
        psa_total = st.number_input("PSA total (ng/mL)", min_value=0.0, step=0.1, value=1.6)
        tr_suspect = st.radio("Toucher rectal suspect ?", ["Non", "Oui"], horizontal=True) == "Oui"
        anticoag = st.radio("Anticoagulants/antiagr√©gants ?", ["Non", "Oui"], horizontal=True) == "Oui"
        preservation_ejac = st.radio("Souhaite pr√©server l‚Äô√©jaculation ?", ["Non", "Oui"], horizontal=True) == "Oui"
        ci_chirurgie = st.radio("Contre-indication √† la chirurgie ?", ["Non", "Oui"], horizontal=True) == "Oui"
        refus_chir = st.radio("Refus de chirurgie ?", ["Non", "Oui"], horizontal=True) == "Oui"

        st.markdown("#### Complications (cocher si pr√©sentes)")
        c1, c2, c3, c4, c5 = st.columns(5)
        with c1: infections_recid = st.checkbox("IU r√©cidivantes")
        with c2: retention = st.checkbox("R√©tention urinaire")
        with c3: calculs = st.checkbox("Calculs v√©sicaux")
        with c4: hematurie_recid = st.checkbox("H√©maturie r√©cidivante")
        with c5: ir_post_obstacle = st.checkbox("Alt√©ration fonction r√©nale")

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì HBP")

    if submitted:
        plan = plan_hbp(
            age, volume, lobe_median, ipss, psa_total, tr_suspect, anticoag,
            preservation_ejac, ci_chirurgie, refus_chir, infections_recid,
            retention, calculs, hematurie_recid, ir_post_obstacle
        )

        # Tableau des donn√©es
        render_kv_table("üßæ Donn√©es saisies", plan["donnees"])

        # Conduite √† tenir (texte √† puces)
        st.markdown("### üíä Conduite √† tenir / Options th√©rapeutiques")
        for x in plan["traitement"]:
            st.markdown("- " + x)

        # Notes
        if plan["notes"]:
            st.markdown("### üìù Notes")
            for x in plan["notes"]:
                st.markdown("- " + x)

        # Export
        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in plan["donnees"]],
            "Conduite √† tenir / Options th√©rapeutiques": plan["traitement"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT HBP (triage PSAD)", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_HBP")
# =========================
# ROUTING
# =========================
def render_home_wrapper():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")

page = st.session_state["page"]
if page == "Accueil":
    render_home_wrapper()
elif page == "Tumeur de la vessie":
    render_vessie_menu()
elif page == "Vessie: TVNIM":
    render_tvnim_page()
elif page == "Vessie: TVIM":
    render_tvim_page()
elif page == "Vessie: M√©tastatique":
    render_vessie_meta_page()
elif page == "Hypertrophie b√©nigne de la prostate (HBP)":
    render_hbp_page()
else:
    render_generic(page)
