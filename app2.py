# app.py ‚Äî Urology Assistant AI (Accueil + Vessie -> TVNIM/TVIM/M√©tastatique)
import streamlit as st
import base64
from datetime import datetime
from pathlib import Path
import html as ihtml  # pour √©chapper le HTML dans nos tableaux

# =========================
# CONFIG DE BASE + THEME CLAIR (VERT)
# =========================
st.set_page_config(page_title="Urology Assistant AI", layout="wide")

st.markdown("""
<style>
/* ----- Th√®me clair √† dominance vert ----- */
:root, html, body, .stApp, .block-container { background:#ffffff !important; color:#111 !important; }
[data-testid="stHeader"], header { background:#ffffff !important; }

/* Titres & liens en vert fonc√© */
h1,h2,h3,h4,h5,h6 { color:#0B5D3B !important; }
a, a:visited { color:#0B5D3B !important; }

/* Texte markdown par d√©faut */
[data-testid="stMarkdownContainer"] p,
[data-testid="stMarkdownContainer"] li,
[data-testid="stMarkdownContainer"] span,
[data-testid="stMarkdownContainer"] div {
  color:#111 !important;
}

/* Boutons */
.stButton > button {
  background:#0B5D3B !important; color:#fff !important; border-radius:10px; padding:0.6rem 1rem; border:none;
}
.stButton > button:hover { background:#0E744C !important; }

/* S√©lecteurs & inputs */
div[data-baseweb="select"] > div,
.stTextInput input, .stTextArea textarea, .stNumberInput input {
  background:#fff !important; color:#111 !important;
  border:1px solid #e4efe8 !important;
}

/* Bandeau d'en-t√™te (gradient vert tr√®s clair) */
.header-green {
  padding:18px 22px; background:linear-gradient(90deg,#F6FBF7,#EAF6EE);
  border:1px solid #d8eadf; border-radius:12px; margin-bottom:18px;
}

/* Barre d√©corative sous les boutons de cat√©gories (vert clair) */
.cat-bar {
  height:6px; background:#DFF3E6; border-radius:6px; margin-bottom:12px;
}

/* ====== TABLEAUX 2 COLONNES (HTML) ====== */
.kv-table { width:100%; border-collapse:separate; border-spacing:0; }
.kv-table thead th {
  background:#ECF7F0; color:#0B5D3B; font-weight:700; text-align:left;
  border-bottom:1px solid #dfece5; padding:10px 12px;
}
.kv-table tbody td {
  background:#ffffff; color:#111; padding:10px 12px; border-bottom:1px solid #f0f5f2;
}
.kv-table tbody tr:last-child td { border-bottom:none; }
.kv-table td:first-child { width:38%; }
.kv-table td strong { color:#0B5D3B; }

/* Espacement entre sections */
.section-block { margin-top: 0.6rem; margin-bottom: 1.2rem; }
</style>
""", unsafe_allow_html=True)

APP_TITLE = "Urology Assistant AI"
APP_SUBTITLE = "Assistant intelligent pour la d√©cision clinique align√© AFU 2024‚Äì2026"

# Modules (page d‚Äôaccueil)
MODULES = [
    "Tumeur de la vessie",
    "Tumeurs des voies excr√©trices",
    "Tumeur de la prostate",
    "Tumeur du rein",
    "Hypertrophie b√©nigne de la prostate (HBP)",
    "Lithiase",
    "Infectiologie",
]

# Couleur d√©corative (vert clair) pour les barres sous chaque bouton
PALETTE = {m: "#DFF3E6" for m in MODULES}

# Etat initial de navigation
if "page" not in st.session_state:
    st.session_state["page"] = "Accueil"

# =========================
# HELPERS UI & NAVIGATION
# =========================
def go_home():
    st.session_state["page"] = "Accueil"
    st.rerun()

def go_module(label: str):
    st.session_state["page"] = label
    st.rerun()

def category_button(label: str, color: str, key: str):
    with st.container():
        clicked = st.button(f"{label}  ‚Ä∫", key=key, use_container_width=True)
        st.markdown(f"<div class='cat-bar' style='background:{color}'></div>", unsafe_allow_html=True)
        if clicked:
            go_module(label)

def top_header():
    st.markdown(
        f"<div class='header-green'><h1 style='margin:0;font-weight:800;font-size:28px'>{APP_TITLE}</h1></div>",
        unsafe_allow_html=True,
    )

def btn_home_and_back(show_back: bool = False, back_label: str = "Tumeur de la vessie"):
    cols = st.columns([1, 3])
    with cols[0]:
        st.button("üè† Accueil", on_click=go_home)
    if show_back:
        with cols[1]:
            st.button(f"‚¨ÖÔ∏è Retour : {back_label}", on_click=lambda: go_module(back_label))

# =========================
# TABLE HELPERS (HTML, 2 colonnes, pas d'index)
# =========================
def esc(x: str) -> str:
    return ihtml.escape(str(x))

def render_kv_table(title: str, pairs: list[tuple[str, str]], col1: str = "√âl√©ment", col2: str = "D√©tail"):
    """Affiche un tableau 2 colonnes (titre en gras, explication)."""
    if not pairs:
        return
    st.markdown(f"### {esc(title)}")
    html = [f"<div class='section-block'><table class='kv-table'><thead><tr><th>{esc(col1)}</th><th>{esc(col2)}</th></tr></thead><tbody>"]
    for k, v in pairs:
        html.append(f"<tr><td><strong>{esc(k)}</strong></td><td>{esc(v)}</td></tr>")
    html.append("</tbody></table></div>")
    st.markdown("".join(html), unsafe_allow_html=True)

def split_line_to_pair(s: str) -> tuple[str, str]:
    """
    Si la ligne contient ‚Äú:‚Äù, on s√©pare avant/apr√®s pour faire (titre, d√©tail).
    Sinon, on met un point m√©dian en titre et la phrase en d√©tail.
    """
    s = s.strip("‚Ä¢ ").strip()
    if ":" in s:
        a, b = s.split(":", 1)
        return a.strip(), b.strip()
    return "‚Ä¢", s

def list_to_pairs(lines: list[str]) -> list[tuple[str, str]]:
    return [split_line_to_pair(x) for x in lines]

# ------ Export helpers ------
def build_report_text(title: str, sections: dict) -> str:
    lines = []
    lines.append(f"Urology Assistant AI ‚Äî {title} (AFU 2024‚Äì2026)")
    lines.append(f"G√©n√©r√© le : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    lines.append("")
    for sec, arr in sections.items():
        if not arr:
            continue
        lines.append(f"== {sec} ==")
        for x in arr:
            lines.append(f"‚Ä¢ {x}")
        lines.append("")
    lines.append("R√©fs : AFU/EAU ‚Äî synth√®se actualis√©e.")
    return "\n".join(lines)

def offer_exports(report_text: str, basename: str):
    html = f"""<!doctype html>
<html lang="fr"><meta charset="utf-8">
<title>{basename}</title>
<pre>{report_text}</pre>
</html>"""
    b64_html = base64.b64encode(html.encode()).decode()
    b64_txt = base64.b64encode(report_text.encode()).decode()
    st.markdown(f'<a href="data:text/html;base64,{b64_html}" download="{basename}.html">üìÑ T√©l√©charger en HTML</a>', unsafe_allow_html=True)
    st.markdown(f'<a href="data:text/plain;base64,{b64_txt}" download="{basename}.txt">üìù T√©l√©charger en TXT</a>', unsafe_allow_html=True)

# =========================
# IMAGE DES PROTOCOLES (BCG / MMC) ‚Äî URL / LOCAL / UPLOAD
# =========================
# üëâ COLLE ICI l‚ÄôURL "Raw" de ton image (format .png/.jpg) :
# Exemple :
#   https://raw.githubusercontent.com/<user>/<repo>/<branch>/assets/protocoles_tvnim.png
PROTO_URL = ""  # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< COLLE TON URL ICI ENTRE GUILLEMETS

# Chemins locaux possibles (si tu ajoutes l‚Äôimage dans le repo)
CANDIDATE_PATHS = [
    Path(__file__).parent / "assets" / "protocoles_tvnim.png",  # assets/protocoles_tvnim.png
    Path(__file__).parent / "protocoles_tvnim.png",             # ./protocoles_tvnim.png
]

def show_protocol_image():
    st.markdown("### üñºÔ∏è Sch√©ma visuel des protocoles (BCG / MMC)")
    if PROTO_URL.strip():
        try:
            st.image(PROTO_URL.strip(), use_container_width=True, caption="Sch√©ma des protocoles (charg√© via URL)")
            return
        except Exception:
            st.warning("√âchec du chargement via l‚ÄôURL fournie. On tente les fichiers locaux‚Ä¶")

    for p in CANDIDATE_PATHS:
        if p.exists():
            st.image(str(p), use_container_width=True, caption=f"Sch√©ma des protocoles (trouv√© : {p.name})")
            return

    up = st.file_uploader("üìé Importer l'image des protocoles (png/jpg)", type=["png", "jpg", "jpeg"])
    if up is not None:
        st.image(up, use_container_width=True, caption="Sch√©ma des protocoles (image t√©l√©vers√©e)")
    else:
        st.info(
            "Aucune image trouv√©e.\n\n"
            "Solutions :\n"
            "‚Ä¢ Collez l‚ÄôURL Raw de l‚Äôimage dans PROTO_URL (ligne indiqu√©e dans le code),\n"
            "‚Ä¢ ou ajoutez le fichier dans le repo (assets/protocoles_tvnim.png ou ./protocoles_tvnim.png),\n"
            "‚Ä¢ ou importez l‚Äôimage via le bouton ci-dessus."
        )

# =========================
# LOGIQUE CLINIQUE ‚Äî TVNIM (AFU)
# =========================
def stratifier_tvnim(
    stade: str,
    grade: str,
    taille_mm: int,
    nombre: str,
    cis_associe: bool = False,
    lvi: bool = False,
    urethre_prostatique: bool = False,
    formes_agressives: bool = False,
) -> str:
    """
    - Faible : pTa bas grade, <3 cm, unifocale
    - Interm√©diaire : pTa bas grade (sans crit√®res haut/tr√®s haut)
    - Haut : pT1 OU haut grade
    - Tr√®s haut : pT1 haut grade + (‚â•1 facteur aggravant)
                  (taille >3 cm, multifocalit√©/papillomatose, CIS associ√©, LVI,
                   atteinte ur√®tre prostatique, formes anatomo-path. agressives)
    """
    facteurs_aggravants = (
        (taille_mm > 30)
        or (nombre != "Unique")
        or cis_associe
        or lvi
        or urethre_prostatique
        or formes_agressives
    )
    if stade == "pT1" and grade == "Haut grade" and facteurs_aggravants:
        return "tr√®s haut"
    if stade == "pT1" or grade == "Haut grade":
        return "haut"
    if stade == "pTa" and grade == "Bas grade" and taille_mm < 30 and nombre == "Unique":
        return "faible"
    return "interm√©diaire"

def plan_tvnim(risque: str):
    notes_second_look = [
        "RTUV de second look recommand√©e si :",
        "‚Ä¢ Tumeur pT1 (r√©√©valuation syst√©matique).",
        "‚Ä¢ Tumeur volumineuse et/ou multifocale (premi√®re r√©section possiblement incompl√®te).",
        "‚Ä¢ Absence de muscle d√©trusor dans la pi√®ce initiale (qualit√© insuffisante).",
    ]

    PROTO = {
        "IPOP": [
            "IPOP dans les 2 h (‚â§24 h) si pas d‚Äôh√©maturie/perforation :",
            "‚Ä¢ Mitomycine C 40 mg dans 40 mL (instillation unique, r√©tention 1‚Äì2 h).",
            "OU : √âpirubicine 50 mg (40‚Äì50 mL).",
            "OU : Gemcitabine 1 g (50 mL).",
        ],
        "CHIMIO_EV": [
            "Chimioth√©rapie endov√©sicale ‚Äî Induction hebdomadaire 6‚Äì8 :",
            "‚Ä¢ MMC 40 mg / 40 mL, 1√ó/semaine √ó6‚Äì8.",
            "‚Ä¢ √âpirubicine 50 mg / 40‚Äì50 mL, 1√ó/semaine √ó6‚Äì8.",
            "‚Ä¢ Gemcitabine 1 g / 50 mL, 1√ó/semaine √ó6‚Äì8.",
            "Entretien (option) : 1 instillation mensuelle √ó9 (mois 4‚Üí12).",
        ],
        "BCG_12M": [
            "BCG ‚Äî maintien 12 mois (risque interm√©diaire) :",
            "Induction : 6 instillations hebdomadaires (semaines 1‚Äì6).",
            "Entretien : 3 instillations aux mois 3, 6 et 12 (3√ó3).",
            "Dose : flacon complet, r√©tention ~2 h si tol√©r√©.",
        ],
        "BCG_36M": [
            "BCG ‚Äî maintien 36 mois (haut / tr√®s haut) :",
            "Induction : 6 instillations hebdomadaires (semaines 1‚Äì6).",
            "Entretien : 3 instillations √† M3, M6, M12, puis /6 mois jusqu‚Äô√† M36.",
            "Dose : flacon complet, r√©tention ~2 h si tol√©r√©.",
        ],
        "RCP_CYSTECTOMIE": [
            "Tr√®s haut risque :",
            "Discussion RCP pour cystectomie pr√©coce + curage √©tendu.",
        ],
    }

    if risque == "faible":
        traitement = [
            "RTUV compl√®te et profonde : mention du d√©trusor au CR.",
            *PROTO["IPOP"],
            "Aucun traitement d‚Äôentretien requis.",
        ]
        suivi = [
            "Cystoscopie : 3e et 12e mois, puis 1√ó/an pendant 5 ans.",
            "Cytologie : non syst√©matique.",
            "Uro-TDM : non syst√©matique.",
        ]
        protocoles = []
    elif risque == "interm√©diaire":
        traitement = [
            "RTUV compl√®te (second look si doute d‚Äôex√©r√®se).",
            *PROTO["CHIMIO_EV"],
            "Alternative : BCG (induction 6) + entretien 12 mois selon profil.",
        ]
        suivi = [
            "Cystoscopie : 3e et 6e mois, puis /6 mois pendant 2 ans, puis 1√ó/an (‚â•10 ans).",
            "Cytologie : syst√©matique.",
            "Uro-TDM : non syst√©matique.",
        ]
        protocoles = [*PROTO["BCG_12M"]]
    elif risque == "haut":
        traitement = [
            "RTUV compl√®te + second look si pT1 ou muscle absent.",
            *PROTO["BCG_36M"],
            "Si CI/√©chec BCG : chimio EV (MMC/gemcitabine ¬± doc√©taxel).",
        ]
        suivi = [
            "Cystoscopie : /3 mois √ó 2 ans, puis /6 mois jusqu‚Äô√† 5 ans, puis 1√ó/an √† vie.",
            "Cytologie : syst√©matique.",
            "Uro-TDM : annuel recommand√©.",
        ]
        protocoles = []
    else:  # tr√®s haut
        traitement = [
            "RTUV compl√®te (qualit√© maximale).",
            *PROTO["BCG_36M"],
            *PROTO["RCP_CYSTECTOMIE"],
        ]
        suivi = [
            "Cystoscopie : /3 mois √ó 2 ans, puis /6 mois jusqu‚Äô√† 5 ans, puis 1√ó/an √† vie.",
            "Cytologie : syst√©matique.",
            "Uro-TDM : annuel obligatoire.",
        ]
        protocoles = []

    return traitement, suivi, protocoles, notes_second_look

# =========================
# LOGIQUE CLINIQUE ‚Äî TVIM (AFU)
# =========================
def plan_tvim(
    t_cat: str,
    cN_pos: bool,
    metastases: bool,
    cis_eligible: bool,
    t2_localise: bool,
    hydron: bool,
    bonne_fct_v: bool,
    cis_diffus: bool,
    pdl1_pos: bool,
    post_op_high_risk: bool,
    neo_adjuvant_fait: bool,
):
    res = {"traitement": [], "surveillance": [], "notes": []}

    if metastases:
        res["traitement"].append("Maladie m√©tastatique : se r√©f√©rer au module ¬´ Vessie: M√©tastatique ¬ª (1re/2e ligne).")
        return res

    # N√©oadjuvant
    if cis_eligible:
        res["traitement"] += [
            "Chimioth√©rapie n√©oadjuvante (NAC) avant cystectomie :",
            "Gemcitabine + Cisplatine (GC), q21j √ó 4 cycles : Gemcitabine 1 000 mg/m¬≤ J1 & J8, Cisplatine 70 mg/m¬≤ J1.",
            "OU : dd-MVAC (q14j √ó 4) avec G-CSF : MTX 30 mg/m¬≤ J1, VBL 3 mg/m¬≤ J2, DOX 30 mg/m¬≤ J2, CDDP 70 mg/m¬≤ J2.",
        ]
    else:
        res["traitement"].append("Non √©ligible cisplatine : NAC non standard.")

    # Option TMT
    if t2_localise and (not hydron) and bonne_fct_v and (not cis_diffus):
        res["traitement"] += [
            "Option conservatrice (TMT) si patient inform√© :",
            "RTUV maximale (r√©section compl√®te) + radiochimioth√©rapie concomitante.",
            "Radioth√©rapie v√©sicale 64‚Äì66 Gy (ex : 55 Gy/20 fx ou 64 Gy/32 fx).",
            "Radiosensibilisation : 5-FU 500 mg/m¬≤ J1‚Äì5 & J16‚Äì20 + MMC 12 mg/m¬≤ J1, OU Cisplatine hebdo 30‚Äì40 mg/m¬≤.",
        ]
        res["notes"] += [
            "CI relatives TMT : hydron√©phrose, CIS diffus, mauvaise capacit√© v√©sicale, tumeur non r√©s√©cable.",
            "Cystectomie de rattrapage si √©chec/progression.",
        ]

    # Cystectomie
    res["traitement"] += [
        "Cystectomie radicale + curage ganglionnaire √©tendu (si pas de TMT) :",
        "D√©rivation : conduit il√©al / n√©ovessie orthotopique (ur√®tre indemne, bonne fonction r√©nale/h√©patique).",
    ]

    # Adjuvant
    if post_op_high_risk or (not neo_adjuvant_fait):
        res["traitement"].append("Adjuvant √† discuter :")
        if cis_eligible and (not neo_adjuvant_fait) and post_op_high_risk:
            res["traitement"].append("Chimioth√©rapie adjuvante (GC q21j √ó 4 ou dd-MVAC q14j √ó 4) si pT3‚Äì4/pN+.")
        res["traitement"].append("Immunoth√©rapie adjuvante : Nivolumab 240 mg q2s ou 480 mg q4s, 1 an (selon AMM/PD-L1).")

    # Suivi
    res["surveillance"] += [
        "Apr√®s cystectomie : Clinique + bio √† 3‚Äì4 mois, puis /6 mois √ó 2 ans, puis annuel jusqu‚Äô√† 5 ans.",
        "Apr√®s cystectomie : TDM TAP /6 mois √ó 2‚Äì3 ans, puis annuelle jusqu‚Äô√† 5 ans.",
        "Surveillance ur√®tre si marges ur√©trales/CIS trigonal (cytologie ¬± ur√©troscopie).",
        "D√©rivation : fonction r√©nale/√©lectrolytes; B12 annuelle si n√©ovessie; soins de stomie si conduit.",
        "Apr√®s TMT : Cystoscopie + cytologie /3 mois √ó 2 ans, puis /6 mois jusqu‚Äô√† 5 ans, puis annuel.",
        "Apr√®s TMT : TDM TAP annuelle (ou /6‚Äì12 mois selon risque).",
        "Cystectomie de rattrapage si r√©cidive MIBC/non-r√©pondeur.",
    ]

    res["notes"] += [
        "D√©cision partag√©e en RCP (NAC vs TMT vs cystectomie).",
        "Doses indicatives √† valider par oncologie/pharmacie (clairance, comorbidit√©s).",
    ]
    return res

# =========================
# LOGIQUE CLINIQUE ‚Äî M√©tastatique (AFU)
# =========================
def plan_meta(
    cis_eligible: bool,
    carbo_eligible: bool,
    platinum_naive: bool,
    pdl1_pos: bool,
    prior_platinum: bool,
    prior_cpi: bool,
    bone_mets: bool,
):
    res = {"traitement": [], "suivi": [], "notes": []}

    if platinum_naive:
        if cis_eligible:
            res["traitement"] += [
                "1re ligne : GC q21j √ó 4‚Äì6 (Gemcitabine 1 000 mg/m¬≤ J1 & J8 + Cisplatine 70 mg/m¬≤ J1).",
                "OU : dd-MVAC q14j √ó 4‚Äì6 avec G-CSF.",
                "Maintenance Avelumab 800 mg IV q2s si r√©ponse/SD apr√®s platine.",
            ]
        elif carbo_eligible:
            res["traitement"] += [
                "1re ligne : Gemcitabine + Carboplatine (AUC 4‚Äì5) q21j √ó 4‚Äì6.",
                "Maintenance Avelumab 800 mg IV q2s si r√©ponse/SD apr√®s platine.",
            ]
        else:
            if pdl1_pos:
                res["traitement"].append("In√©ligible platine : Pembrolizumab 200 mg q3s (ou 400 mg q6s) si PD-L1 positif.")
            else:
                res["traitement"].append("In√©ligible platine : immunoth√©rapie seule √† discuter (AMM/PD-L1/local).")
    else:
        if prior_platinum and (not prior_cpi):
            res["traitement"].append("Apr√®s platine : Pembrolizumab 200 mg q3s (ou 400 mg q6s).")
        if prior_platinum and prior_cpi:
            res["traitement"] += [
                "Apr√®s platine + CPI : Enfortumab Vedotin 1,25 mg/kg J1/J8/J15 q28j (si dispo).",
                "OU : Sacituzumab Govitecan 10 mg/kg J1/J8 q21j (si dispo).",
            ]
        if (not prior_platinum):
            res["traitement"].append("Jamais expos√© au platine : envisager GC ou Gem-Carbo selon √©ligibilit√©.")

    if bone_mets:
        res["traitement"] += [
            "Os-protecteurs : Acide zol√©dronique 4 mg IV q4s (adapter √† DFG) OU D√©nosumab 120 mg SC q4s + Ca/VitD.",
        ]
        res["notes"].append("Pr√©venir l‚Äôost√©on√©crose mandibulaire (bilan dentaire).")

    res["suivi"] += [
        "√âvaluation clinico-bio + toxicit√©s avant chaque cycle.",
        "Imagerie de r√©ponse toutes les 8‚Äì12 semaines au d√©but, puis selon √©volution.",
        "Soins de support (douleur, nutrition, thrombo-prophylaxie selon risque).",
    ]

    res["notes"] += [
        "Adapter √† l‚ÄôAMM locale/essais/stock. D√©cisions en RCP.",
        "Doses indicatives √† valider avec oncologie/pharmacie.",
    ]
    return res

# =========================
# PAGES
# =========================
def render_home():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")

def render_vessie_menu():
    btn_home_and_back()
    st.markdown("## Tumeur de la vessie")
    st.caption("Choisissez le sous-module")
    c1, c2, c3 = st.columns(3)
    with c1: st.button("TVNIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVNIM"))
    with c2: st.button("TVIM", use_container_width=True, on_click=lambda: go_module("Vessie: TVIM"))
    with c3: st.button("M√©tastatique", use_container_width=True, on_click=lambda: go_module("Vessie: M√©tastatique"))

def render_tvnim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVNIM (tumeur n‚Äôinfiltrant pas le muscle)")

    with st.form("tvnim_form"):
        stade = st.selectbox("Stade tumoral", ["pTa", "pT1"])
        grade = st.selectbox("Grade tumoral", ["Bas grade", "Haut grade"])
        taille = st.slider("Taille maximale (mm)", 1, 100, 10)
        nombre = st.selectbox("Nombre de tumeurs", ["Unique", "Multiple", "Papillomatose v√©sicale"])

        # Facteurs aggravants visibles seulement si pT1 + Haut grade
        cis_associe = lvi = urethre_prostatique = formes_agressives = False
        if stade == "pT1" and grade == "Haut grade":
            st.markdown("#### Facteurs aggravants (pT1 haut grade) ‚Äî cochez s‚Äôils sont pr√©sents")
            c1, c2 = st.columns(2)
            with c1:
                cis_associe = st.checkbox("CIS associ√©")
                lvi = st.checkbox("Envahissement lymphovasculaire (LVI)")
            with c2:
                urethre_prostatique = st.checkbox("Atteinte de l‚Äôur√®tre prostatique")
                formes_agressives = st.checkbox("Formes anatomo-pathologiques agressives")

        submitted = st.form_submit_button("üîé G√©n√©rer la CAT")

    if submitted:
        risque = stratifier_tvnim(
            stade=stade, grade=grade, taille_mm=taille, nombre=nombre,
            cis_associe=cis_associe, lvi=lvi, urethre_prostatique=urethre_prostatique,
            formes_agressives=formes_agressives,
        )
        traitement, suivi, protocoles, notes_second_look = plan_tvnim(risque)

        # Donn√©es (paires)
        donnees_pairs = [
            ("Stade", stade),
            ("Grade", grade),
            ("Taille maximale", f"{taille} mm"),
            ("Nombre", nombre),
        ]
        if stade == "pT1" and grade == "Haut grade":
            if cis_associe: donnees_pairs.append(("CIS associ√©", "Oui"))
            if lvi: donnees_pairs.append(("LVI", "Oui"))
            if urethre_prostatique: donnees_pairs.append(("Atteinte ur√®tre prostatique", "Oui"))
            if formes_agressives: donnees_pairs.append(("Formes anatomo-path. agressives", "Oui"))

        # Rendu des tableaux
        render_kv_table("üìä Stratification", [("Risque estim√©", risque.upper())], "√âl√©ment", "R√©sultat")
        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        render_kv_table("üíä Traitement recommand√©", list_to_pairs(traitement))
        if protocoles:
            render_kv_table("üì¶ Protocoles d√©taill√©s", list_to_pairs(protocoles))
        render_kv_table("üìÖ Modalit√©s de suivi", list_to_pairs(suivi))
        render_kv_table("üìù RTUV de second look ‚Äî rappels", list_to_pairs(notes_second_look))

        show_protocol_image()

        # Export (texte)
        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in donnees_pairs],
            "Stratification": [f"Risque estim√© : {risque.upper()}"],
            "Traitement recommand√©": traitement + (["D√©tails de protocoles :"] + protocoles if protocoles else []),
            "Modalit√©s de suivi": suivi,
            "Rappels second look": notes_second_look,
        }
        report_text = build_report_text("CAT TVNIM", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_TVNIM")

def render_tvim_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ TVIM (tumeur infiltrant le muscle)")

    with st.form("tvim_form"):
        t_cat = st.selectbox("T (clinique)", ["T2", "T3", "T4a"])
        cN_pos = st.radio("Atteinte ganglionnaire clinique (cN+) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        metastases = st.radio("M√©tastases √† distance ?", ["Non", "Oui"], horizontal=True) == "Oui"

        st.markdown("#### √âligibilit√©s & contexte")
        cis_eligible = st.radio("√âligible Cisplatine (PS 0‚Äì1, DFG ‚â•50‚Äì60, pas de neuropathie/surdit√© majeures) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        t2_localise = st.radio("Tumeur T2 localis√©e (unique, mobile √† la RTUV) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        hydron = st.radio("Hydron√©phrose ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bonne_fct_v = st.radio("Bonne fonction v√©sicale ?", ["Oui", "Non"], horizontal=True) == "Oui"
        cis_diffus = st.radio("CIS diffus ?", ["Non", "Oui"], horizontal=True) == "Oui"
        pdl1_pos = st.radio("PD-L1 positif (si disponible) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        post_op_high_risk = st.radio("pT3‚Äì4 et/ou pN+ attendu/apr√®s chirurgie ?", ["Non", "Oui"], horizontal=True) == "Oui"
        neo_adjuvant_fait = st.radio("Chimioth√©rapie n√©oadjuvante d√©j√† r√©alis√©e ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì TVIM")

    if submitted:
        plan = plan_tvim(
            t_cat=t_cat, cN_pos=cN_pos, metastases=metastases, cis_eligible=cis_eligible,
            t2_localise=t2_localise, hydron=hydron, bonne_fct_v=bonne_fct_v,
            cis_diffus=cis_diffus, pdl1_pos=pdl1_pos, post_op_high_risk=post_op_high_risk,
            neo_adjuvant_fait=neo_adjuvant_fait
        )

        donnees_pairs = [
            ("T", t_cat),
            ("cN+", "Oui" if cN_pos else "Non"),
            ("M√©tastases", "Oui" if metastases else "Non"),
            ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"),
            ("T2 localis√©e (TMT possible)", "Oui" if t2_localise else "Non"),
            ("Hydron√©phrose", "Oui" if hydron else "Non"),
            ("Bonne fonction v√©sicale", "Oui" if bonne_fct_v else "Non"),
            ("CIS diffus", "Oui" if cis_diffus else "Non"),
            ("PD-L1 positif", "Oui" if pdl1_pos else "Non"),
            ("pT3‚Äì4/pN+ attendu/identifi√©", "Oui" if post_op_high_risk else "Non"),
            ("NAC d√©j√† faite", "Oui" if neo_adjuvant_fait else "Non"),
        ]

        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        render_kv_table("üíä Traitement recommand√©", list_to_pairs(plan["traitement"]))
        render_kv_table("üìÖ Modalit√©s de suivi", list_to_pairs(plan["surveillance"]))
        if plan["notes"]:
            render_kv_table("üìù Notes", list_to_pairs(plan["notes"]))

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in donnees_pairs],
            "Traitement recommand√©": plan["traitement"],
            "Modalit√©s de suivi": plan["surveillance"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT TVIM", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_TVIM")

def render_vessie_meta_page():
    btn_home_and_back(show_back=True)
    st.header("üî∑ Tumeur de la vessie m√©tastatique")

    with st.form("meta_form"):
        st.markdown("#### Contexte & √©ligibilit√©")
        platinum_naive = st.radio("Jamais trait√© par platine (1re ligne) ?", ["Oui", "Non"], horizontal=True) == "Oui"
        cis_eligible = st.radio("√âligible Cisplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
        carbo_eligible = st.radio("√âligible Carboplatine ?", ["Oui", "Non"], horizontal=True) == "Oui"
        pdl1_pos = st.radio("PD-L1 positif (si disponible) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_platinum = st.radio("A d√©j√† re√ßu un platine ?", ["Non", "Oui"], horizontal=True) == "Oui"
        prior_cpi = st.radio("A d√©j√† re√ßu une immunoth√©rapie (CPI) ?", ["Non", "Oui"], horizontal=True) == "Oui"
        bone_mets = st.radio("M√©tastases osseuses ?", ["Non", "Oui"], horizontal=True) == "Oui"
        submitted = st.form_submit_button("üîé G√©n√©rer la CAT ‚Äì M√©tastatique")

    if submitted:
        plan = plan_meta(
            cis_eligible=cis_eligible, carbo_eligible=carbo_eligible, platinum_naive=platinum_naive,
            pdl1_pos=pdl1_pos, prior_platinum=prior_platinum, prior_cpi=prior_cpi, bone_mets=bone_mets
        )

        donnees_pairs = [
            ("1re ligne (na√Øf platine)", "Oui" if platinum_naive else "Non"),
            ("√âligible Cisplatine", "Oui" if cis_eligible else "Non"),
            ("√âligible Carboplatine", "Oui" if carbo_eligible else "Non"),
            ("PD-L1 positif", "Oui" if pdl1_pos else "Non"),
            ("Platines re√ßus", "Oui" if prior_platinum else "Non"),
            ("CPI re√ßu", "Oui" if prior_cpi else "Non"),
            ("M√©tastases osseuses", "Oui" if bone_mets else "Non"),
        ]

        render_kv_table("üßæ Donn√©es saisies", donnees_pairs)
        render_kv_table("üíä Traitement recommand√©", list_to_pairs(plan["traitement"]))
        render_kv_table("üìÖ Modalit√©s de suivi", list_to_pairs(plan["suivi"]))
        if plan["notes"]:
            render_kv_table("üìù Notes", list_to_pairs(plan["notes"]))

        sections = {
            "Donn√©es": [f"{k}: {v}" for k, v in donnees_pairs],
            "Traitement recommand√©": plan["traitement"],
            "Modalit√©s de suivi": plan["suivi"],
            "Notes": plan["notes"],
        }
        report_text = build_report_text("CAT M√©tastatique", sections)
        st.markdown("### üì§ Export")
        offer_exports(report_text, "CAT_Vessie_Metastatique")

def render_generic(label: str):
    btn_home_and_back()
    st.header(f"üî∑ {label}")
    st.info("Module en cours de construction")

# =========================
# ROUTING
# =========================
def render_home_wrapper():
    top_header()
    st.markdown("### S√©lectionnez une rubrique")
    st.caption(APP_SUBTITLE)
    col1, col2 = st.columns(2)
    for i, mod in enumerate(MODULES):
        with (col1 if i % 2 == 0 else col2):
            category_button(mod, PALETTE[mod], key=f"btn_{i}")

page = st.session_state["page"]
if page == "Accueil":
    render_home_wrapper()
elif page == "Tumeur de la vessie":
    render_vessie_menu()
elif page == "Vessie: TVNIM":
    render_tvnim_page()
elif page == "Vessie: TVIM":
    render_tvim_page()
elif page == "Vessie: M√©tastatique":
    render_vessie_meta_page()
else:
    render_generic(page)
